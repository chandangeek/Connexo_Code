package com.elster.jupiter.cbo;

import static com.elster.jupiter.cbo.QualityCodeCategory.*;

import java.util.Arrays;
import java.util.Optional;

public enum QualityCodeIndex {
	DATAVALID(VALID,0),
	VALIDATED(VALID,1),
	DIAGNOSTICSFLAG(DIAGNOSTICS,0),
	BATTERYLOW(DIAGNOSTICS,1),
	SENSORFAILURE(DIAGNOSTICS,3),
	WATCHDOGFLAG(DIAGNOSTICS,4),
	PARITYERROR(DIAGNOSTICS,5),
	CRCERROR(DIAGNOSTICS,6),
	RAMCHECKSUMERROR(DIAGNOSTICS,7),
	ROMCHECKSUMERROR(DIAGNOSTICS,8),
	CLOCKERROR(DIAGNOSTICS,9),
	POWERQUALITYFLAG(POWERQUALITY,0),
	EXCESSIVEOUTAGECOUNT(POWERQUALITY,1),
	PQCOUNTER(POWERQUALITY,2),
	SERVICEDISCONNECTSWITCHING(POWERQUALITY,3),
	POWERFAIL(POWERQUALITY,32),
	REVENUEPROTECTION(TAMPER,0),
	COVEROPENED(TAMPER,1),
	LOGICALDISCONNECT(TAMPER,2),
	REVENUEPROTECTIONSUSPECT(TAMPER,3),
	REVERSEROTATION(TAMPER,4),
	STATICDATAFLAG(TAMPER,5),
	ALARMFLAG(DATACOLLECTION,0),
	OVERFLOWCONDITIONDETECTED(DATACOLLECTION,1),
	PARTIALINTERVAL(DATACOLLECTION,2),
	LONGINTERVAL(DATACOLLECTION,3),
	SKIPPEDINTERVAL(DATACOLLECTION,4),
	TESTDATA(DATACOLLECTION,5),
	CONFIGURATIONCHANGED(DATACOLLECTION,6),
	NOTRECORDING(DATACOLLECTION,7),
	RESETOCCURED(DATACOLLECTION,8),
	CLOCKCHANGED(DATACOLLECTION,9),
	LOADCONTROLOCCUREDD(DATACOLLECTION,10),
	DSTINEFFECT(DATACOLLECTION,16),
	CLOCKSETFORWARD(DATACOLLECTION,64),
	CLOCKSETBACKWARD(DATACOLLECTION,128),
	FAILEDPROBEATTEMPT(DATACOLLECTION,129),
	CUSTOMERRAD(DATACOLLECTION,130),
	MANUALREAD(DATACOLLECTION,131),
	DSTCHANGEOCCURED(DATACOLLECTION,259),
	DATAOUTSIDEEXPECTEDRANGE(REASONABILITY,256),
	ERRORCODE(REASONABILITY,257),
	SUSPECT(REASONABILITY,258),
	KNOWNMISSINGREAD(REASONABILITY,259),
	VALIDATIONGENERIC(VALIDATION,0),
	ZEROUSAGE(VALIDATION,1),
	USAGEONINACTIVEMETER(VALIDATION,2),
	USAGEABOVE(VALIDATION,3),
	USAGEBELOW(VALIDATION,4),
	USAGEABOVEPERCENT(VALIDATION,5),
	USAGEBELOWPERCENT(VALIDATION,6),
	TOUSUMCHECK(VALIDATION,9),
	EDITGENERIC(EDITED,0),
	ADDED(EDITED,1),
	REJECTED(EDITED,3),
	ESTIMATEGENERIC(ESTIMATED,0),
	INDETERMINATE(QUESTIONABLE,0),
	ACCEPTED(QUESTIONABLE,1),
	DETERMINISTIC(DERIVED,0),
	INFERRED(DERIVED,1),
	PROJECTEDGENERIC(PROJECTED,0),
	;
	
	private final QualityCodeCategory category;
	private final int index;
	
	private QualityCodeIndex(QualityCodeCategory category, int index) {
		this.category = category;
		this.index = index;
	}
	
	public QualityCodeCategory category() {
		return category;
	}
	
	public int index() {
		return index;
	}
	
	static Optional<QualityCodeIndex> get(QualityCodeCategory category, int index) {
		return Arrays.stream(values())
			.filter(codeIndex -> codeIndex.category == category)
			.filter(codeIndex -> codeIndex.index == index)
			.findFirst();
	}
}
