package com.elster.jupiter.cbo;

import com.elster.jupiter.util.units.Unit;

public enum ReadingTypeUnit {
	NOTAPPLICABLE(0,Unit.UNITLESS),
	METER (2,Unit.METER),
	GRAM (3,Unit.GRAM),
	ROTATIONSPERSECOND (4,Unit.ROTATIONS_PER_SECOND),
	AMPERE (5,Unit.AMPERE),
	KELVIN (6,Unit.KELVIN),
	MOLE (7,Unit.MOLE),
	CANDELA (8,Unit.CANDELA),
	DEGREES (9,Unit.DEGREES),
	RADIAN (10,Unit.RADIAN),
	STERADIAN (11,Unit.STERADIAN),
	GRAY(21,Unit.GRAY),
	BECQUEREL (22,Unit.BECQUEREL),
	DEGREESCELSIUS (23,Unit.DEGREES_CELSIUS),
	SIEVERT (24,Unit.SIEVERT),
	FARAD (25,Unit.FARAD),
	COULOMB (26,Unit.COULOMB),
	SECOND (27,Unit.SECOND),
	HENRY (28,Unit.HENRY),
	VOLT (29,Unit.VOLT),
	OHM (30,Unit.OHM),
	JOULE (31,Unit.JOULE),
	NEWTON (32,Unit.NEWTON),
	HERTZ (33,Unit.HERTZ),
	LUX (34,Unit.LUX),
	LUMEN (35,Unit.LUMEN),
	WEBER (36,Unit.WEBER),
	TESLA (37,Unit.TESLA),
	WATT (38,Unit.WATT),
	PASCAL (39,Unit.PASCAL),
	SQUAREMETER(41,Unit.SQUARE_METER),
	CUBICMETER (42,Unit.CUBIC_METER),
	METERPERSECOND (43,Unit.METER_PER_SECOND),
	METERPERSECONDSQUARED (44,Unit.METER_PER_SECOND_SQUARED),
	CUBICMETERPERSECOND (45,Unit.CUBIC_METER_PER_SECOND),
	METERPERCUBICMETER (46,Unit.METER_PER_CUBIC_METER),
	GRAMMETER (47,Unit.GRAM_METER),
	GRAMPERCUBICMETER (48,Unit.GRAM_PER_CUBIC_METER),
	METERSQUAREDPERSECOND (49,Unit.METER_SQUARED_PER_SECOND),
	WATTPERMETERKELVIN (50,Unit.WATT_PER_METER_KELVIN),
	JOULEPERKELVIN (51,Unit.JOULE_PER_KELVIN),
	PARTSPERMILLION (52,Unit.PARTS_PER_MILLION),
	SIEMENS (53,Unit.SIEMENS),
	RADIANSPERSECOND (54,Unit.RADIANS_PER_SECOND),
	VOLTAMPERE (61,Unit.VOLT_AMPERE),
	VOLTAMPEREREACTIVE (63,Unit.VOLT_AMPERE_REACTIVE),
	PHASEANGLE (64,Unit.PHASE_ANGLE),
	POWERFACTOR (65,Unit.POWER_FACTOR),
	VOLTSECONDS (66,Unit.VOLT_SECONDS),
	VOLTSQUARED (67,Unit.VOLT_SQUARED),
	AMPERESECONDS (68,Unit.AMPERE_SECONDS),
	AMPERESQUARED (69,Unit.AMPERE_SQUARED),
	AMPERESQUAREDSECOND (70,Unit.AMPERE_SQUARED_SECOND),
	VOLTAMPEREHOUR (71,Unit.VOLT_AMPERE_HOUR),
	WATTHOUR (72,Unit.WATT_HOUR),
	VOLTAMPEREREACTIVEHOUR (73,Unit.VOLT_AMPERE_REACTIVE_HOUR),
	VOLTPERHERZ (74,Unit.VOLT_PER_HERTZ),
	HERZPERSECOND (75,Unit.HERTZ_PER_SECOND),
	CHARACTERS (76,Unit.CHARACTERS),
	CHARACTERSPERSECOND (77,Unit.CHARACTERS_PER_SECOND),
	GRAMMETERSQUARED (78,Unit.GRAM_METER_SQUARED),
	BEL (79,Unit.BEL),
	MONEY (80,Unit.MONEY),
	WATTPERSECOND(81,Unit.WATT_PER_SECOND),
	LITREPERSECOND(82,Unit.LITRE_PER_SECOND),
	QUANTITYPOWER(100,Unit.QUANTITY_POWER),
	QUANTITYENERGY (101,Unit.QUANTITY_ENERGY),
	OHMMETER (102,Unit.OHM_METER),
	AMPEREPERMETER (103,Unit.AMPERE_PER_METER),
	VOLTSQUAREDHOUR (104,Unit.VOLT_SQUARED_HOUR),
	AMPERESQUAREDHOUR (105,Unit.AMPERE_SQUARED_HOUR),
	AMPEREHOUR (106,Unit.AMPERE_HOUR),
	WATTHOURPERCUBICMETER (107,Unit.WATT_HOUR_PER_CUBIC_METER),
	TIMESTAMP (108,Unit.TIMESTAMP),
	BOOLEAN (109,Unit.BOOLEAN),
	BOOLEANARRAY (110,Unit.BOOLEAN_ARRAY),
	COUNT (111,Unit.COUNT),
	BELMILLIWATT (113,Unit.BEL_MILLIWATT),
	ENCODEDVALUE (114,Unit.ENCODED_VALUE),
	WATTHOURPERROTATION (115,Unit.WATT_HOUR_PER_ROTATION),
	VOLTAMPEREREACTIVEHOURPERROTATION (116,Unit.VOLT_AMPERE_REACTIVE_HOUR_PER_ROTATION),
	VOLTAMPEREHOURPERROTATION (117,Unit.VOLT_AMPERE_HOUR_PER_ROTATION),
	ENDDEVICEEVENTCODE (118,Unit.END_DEVICE_EVENT_CODE),
	CUBICFEET(119,Unit.CUBIC_FEET),
	CUBICFEETCOMPENSATED(120,Unit.CUBIC_FEET_COMPENSATED),
	CUBICFEETUNCOMPENSATED(121,Unit.CUBIC_FEET_UNCOMPENSATED),
	CUBICFEETPERHOUR(122,Unit.CUBIC_FEET_PER_HOUR),
	CUBICFEETCOMPENSATEDPERHOUR(123,Unit.CUBIC_FEET_COMPENSATED_PER_HOUR),
	CUBICFEETUNCOMPENSATEDPERHHOUR(124,Unit.CUBIC_FEET_UNCOMPENSATED_PER_HOUR),
	CUBICMETERPERHOUR(125,Unit.CUBIC_METER_PER_HOUR),
	CUBICMETERPERHOURCOMPENSATED(126,Unit.CUBIC_METER_COMPENSATED_PER_HOUR),
    CUBICMETERPERHOURUNCOMPENSATED(127,Unit.CUBIC_METER_UNCOMPENSATED_PER_HOUR),
    USGALLON(128,Unit.USGALLON),
	USGALLONPERHOUR(129,Unit.USGALLON_PER_HOUR),
	IMPERIALGALLON(130,Unit.IMPERIALGALLON),
	IMPERIALGALLONPERHOUR(131,Unit.IMPERIALGALLON_PER_HOUR),
	BRITISHTHERMALUNIT(132,Unit.BRITISH_THERMAL_UNIT),
	BRITISHTHERMALUNITPERHOUR(133,Unit.BRITISH_THERMAL_UNIT_PER_HOUR),
	LITRE(134,Unit.LITRE),
	LITREPERHOUR(137,Unit.LITRE_PER_HOUR),
	LITREPERHOURCOMPENSATED(138,Unit.LITRE_COMPENSATED_PER_HOUR),
	LITREPERHOURUNCOMPENSATED(139,Unit.LITRE_UNCOMPENSATED_PER_HOUR),
	PASCALGUAGE(140,Unit.PASCAL_GAUGE),
	POUNDPERSQUAREINCHABSOLUTE(141,Unit.POUND_PER_SQUARE_INCH_ABSOLUTE),
	POUNDPERSQUAREINCHGAUGE(142,Unit.POUND_PER_SQUARE_INCH_GAUGE),
	LITREPERLITRE(143,Unit.UNITLESS),
	GPERG(144,Unit.UNITLESS),
	MOLPERM3(145,Unit.MOL_PER_M3),
	MOLPERMOL(146,Unit.UNITLESS),
	MOLPERKG(147,Unit.MOL_PER_KG),
	METERPERMETER(148,Unit.METER_PER_METER),
	SECONDPERSECOND(149,Unit.SECOND_PER_SECOND),
	HERZPERHERZ(150,Unit.HERZ_PER_HERZ),
	VOLTPERVOLT(151,Unit.VOLT_PER_VOLT),
	AMPEREPERAMPERE(152,Unit.AMPERE_PER_AMPERE),
	WATTPERVOLTAMPERE(153,Unit.WATT_PER_VOLTAMPERE),
	REVOLUTIONS(154,Unit.REVOLUTIONS),
	PASCALABSOLUTE(155,Unit.PASCAL_ABSOLUTE),
	LITREUNCOMPENSATED(156,Unit.LITRE_UNCOMPENSATED),
	LITRECOMPENSATED(157,Unit.LITRE_COMPENSATED),
	KATAL(158,Unit.KATAL),
	MINUTE(159,Unit.MINUTE),
	HOUR(160,Unit.HOUR),
	QUANTITYPOWER45(161,Unit.QUANTITY_POWER_45),
	QUANTITYPOWER60(162,Unit.QUANTITY_POWER_60),
	QUANTITYENERGY45(163,Unit.QUANTITY_ENERGY_45),
	QUANTITYENERGY60(164,Unit.QUANTITY_ENERGY_60),
	JOULEPERKG(165,Unit.JOULES_PER_KG),
	CUBICMETERUNCOMPENSATED(166,Unit.CUBIC_METER_UNCOMPENSATED),
	CUBICMETERCOMPENSATED(167,Unit.CUBIC_METER_COMPENSATED),
	WATTPERWATT(168,Unit.WATT_PER_WATT),
	THERM(169,Unit.THERM),
	REFRACTIVEINDEX(170,Unit.UNITLESS),
	RELATIVEPERMEABILITY(171,Unit.UNITLESS),
	NEPER(172,Unit.NEPER),
	WAVENUMBER(173,Unit.WAVENUMBER),
	CUBICMETERPERKILOGRAM(174,Unit.CUBIC_METER_PER_KILOGRAM),
	PASCALSECOND(175,Unit.PASCAL_SECOND),
	NEWTONMETER(176,Unit.NEWTON_METER),
	NEWTONPERMETER(177,Unit.NEWTON_PER_METER),
	RADIANSPERSECONDSQUARED(178,Unit.RADIANS_PER_SECOND_SQUARED),
	WATTPERSQUAREDMETER(179,Unit.WATT_PER_SQUARED_METER),
	JOULEPERKILOGRAMKELVIN(180,Unit.JOULE_PER_KILOGRAM_KELVIN),
	JOULEPERCUBICMETER(181,Unit.JOULE_PER_CUBIC_METER),
	VOLTPERMETER(182,Unit.VOLT_PER_METER),
	COULOMBPERCUBICMETER(183,Unit.COULOMB_PER_CUBIC_METER),
	COULOMBPERSQUAREMETER(184,Unit.COULOMB_PER_SQUARE_METER),
	FARADPERMETER(185,Unit.FARAD_PER_METER),
	HENRYPERMETER(186,Unit.HENRY_PER_METER),
	JOULEPERMOLE(187,Unit.JOULE_PER_MOLE),
	JOULEPERMOLEKELVIN(188,Unit.JOULE_PER_MOLE_KELVIN),
	COULOMBPERKILOGRAM(189,Unit.COULOMB_PER_KILOGRAM),
	GRAYPERSECOND(190,Unit.GRAY_PER_SECOND),
	WATTPERSTERADIAN(191,Unit.WATT_PER_STERADIAN),
	WATTPERSQUAREMETERSTERADIAN(192,Unit.WATT_PER_SQUARE_METER_STERADIAN),
	KATALPERCUBICMETER(193,Unit.KATAL_PER_CUBIC_METER),
	DAY(195,Unit.DAY),
	ANGLEMIN(196,Unit.ANGLEMINUTE),
	ANGLESECOND(197,Unit.ANGLESECOND),
	HECTARE(198,Unit.HECTARE),
	TON(199,Unit.TON),
	ELECTRONVOLT(200,Unit.ELECTRON_VOLT),
	DALTON(201,Unit.DALTON),
	UNIFIEDMASS(202,Unit.UNIFIED_MASS),
	ASTRONOMICALUNIT(203,Unit.ASTRONOMICAL_UNIT),
	LIGHTSPEED(204,Unit.LIGHT_SPEED),
	NATURALACTION(205,Unit.REDUCED_PLANCK),
	NATURALMASS(206,Unit.ELECTRON_MASS),
	NATURALTIME(207,Unit.NATURAL_UNIT_TIME),
	ELECTRONCHARGE(208,Unit.ELECTRON_CHARGE),
	ELECTRONMASS(209,Unit.ELECTRON_MASS),
	ATOMICACTION(210,Unit.REDUCED_PLANCK),
	BOHRRADIUS(211,Unit.BOHR_RADIUS),
	HARTREE(212,Unit.HARTREE),
	ATOMICTIME(213,Unit.ATOMIC_TIME),
	BAR(214,Unit.BAR),
	MMMERCURY(215,Unit.MM_MERCURY),
	ANGSTROM(216,Unit.ANGSTROM),
	NAUTICALMILE(217,Unit.NAUTICAL_MILE),
	BARN(218,Unit.BARN),
	KNOT(219,Unit.KNOT),
	CURIE(220,Unit.CURIE),
	ROENTGEN(221,Unit.ROENTGEN),
	RAD(222,Unit.RAD),
	REM(223,Unit.REM),
	INCH(224,Unit.INCH),
	FOOT(225,Unit.FOOT),
	ROD(226,Unit.ROD),
	FURLONG(227,Unit.FURLONG),
	MILE(228,Unit.MILE),
	SQUAREFOOT(229,Unit.SQUARE_FOOT),
	SQUAREYARD(230,Unit.SQUARE_YARD),
	SQUAREROD(231,Unit.SQUARE_ROD),
	ACRE(232,Unit.ACRE),
	SQUAREMILE(233,Unit.SQUARE_MILE),
	SECTIONOFLAND(234,Unit.SQUARE_MILE),
	TOWNSHIP(235,Unit.TOWNSHIP),
	CUBICYARD(237,Unit.CUBIC_YARD),
	LINK(238,Unit.LINK),
	CHAIN(239,Unit.CHAIN),
	USLIQUIDPINT(240,Unit.US_LIQUID_PINT),
	USLIQUIDQUART(241,Unit.US_LIQUID_QUART),
	FLUIDDREAM(242,Unit.FLUIDDRAM),
	FLUIDOUNCE(243,Unit.FLUIDOUNCE),
	USDRYPINT(244,Unit.US_DRY_PINT),
	USDRYQUART(245,Unit.US_DRY_QUART),
	USPECK(246,Unit.US_PECK),
	USBUSHEL(247,Unit.US_BUSHEL),
	GRAIN(248,Unit.GRAIN),
	AVOIRDUPOISDRAM(249,Unit.AVOIRDUPOIS_DRAM),
	AVOIRDUPOISONCE(250,Unit.AVOIRDUPOIS_OUNCE),
	AVOIRDUPOISPOUND(251,Unit.AVOIRDUPOIS_POUND),
	AVOIRDUPOISHUNDREDWEIGHT(252,Unit.AVOIRDUPOIS_HUNDREDWEIGHT),
	AVOIRDUPOISTON(253,Unit.AVOIRDUPOIS_TON),
	AVOIRDUPOISGROSS(254,Unit.AVOIRDUPOIS_GROSS),
	AVOIRDUPOISLONGTON(255,Unit.AVOIRDUPOIS_LONG_TON),
	TROYPENNYWEIGHT(256,Unit.TROY_PENNY_WEIGHT),
	TROYOUNCE(257,Unit.TROY_OUNCE),
	TROYPOUND(258,Unit.TROY_POUND),
	APOTHECARIESSCRUPLE(259,Unit.APOTHECARIES_SCRUPLE),
	APOTHECARIESDRAM(260,Unit.APOTHECARIES_DRAM),
	APOTHECARIESOUNCE(261,Unit.APOTHECARIES_OUNCE),
	APOTHECARIESPOUND(262,Unit.APOTHECARIES_POUND),
	MILEPERIMPERIALGALLON(263,Unit.MILE_PER_IMPERIAL_GALLON),
	MILEPERUSGALLON(264,Unit.MILE_PER_US_GALLON),
	MILEPERUSGALLONEQUIVALENT(265,Unit.MILE_PER_US_GALLON_EQUIVALENT),
	LITREPER100KM(266,Unit.LITER_PER_100_KM),
	WATTHOURPERMILE(267,Unit.WATT_HOUR_PER_MILE),
	WATTHOURPER100MILE(268,Unit.WATT_HOUR_PER_100_MILE),
	DEGREESFAHRENHEIT(279,Unit.DEGREES_FAHRENHEIT),
	VOLTHOUR(280,Unit.VOLT_HOUR),
	HUMIDITY(281,Unit.UNITLESS),
	SKYCOVER(282,Unit.UNITLESS);
	
	
	private final int id;
	private final Unit unit;
	
	ReadingTypeUnit(int id , Unit unit) {
		this.id = id;
		this.unit = unit;
	}
	
	public Unit getUnit() {
		return unit;
	}
	
	public String getSymbol() {
		return unit.getSymbol();
	}
	
	public int getId() {
		return id;		
	}
	
	@Override
	public String toString() {
		return getSymbol();
	}
	
	public boolean isApplicable() {
		return id != 0;
	}
	
	public static ReadingTypeUnit get(int id) {
		for (ReadingTypeUnit each : values()) {
			if (each.id == id) {
				return each;
			}
		}
        throw new IllegalEnumValueException(ReadingTypeUnit.class, id);
	}
	

}
