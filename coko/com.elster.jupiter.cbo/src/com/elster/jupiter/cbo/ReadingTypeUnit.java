package com.elster.jupiter.cbo;

import com.elster.jupiter.units.Unit;

public enum ReadingTypeUnit {
	NOTAPPLICABLE(0,Unit.UNITLESS),
	METER (2,Unit.METER),
	GRAM (3,Unit.GRAM),
	ROTATIONSPERSECOND (4,Unit.ROTATIONSPERSECOND),
	AMPERE (5,Unit.AMPERE),
	KELVIN (6,Unit.KELVIN),
	MOLE (7,Unit.MOLE),
	CANDELA (8,Unit.CANDELA),
	DEGREES (9,Unit.DEGREES),
	RADIAN (10,Unit.RADIAN),
	STERADIAN (11,Unit.STERADIAN),
	GRAY(21,Unit.GRAY),
	BECQUEREL (22,Unit.BECQUEREL),
	DEGREESCELSIUS (23,Unit.DEGREESCELSIUS),
	SIEVERT (24,Unit.SIEVERT),
	FARAD (25,Unit.FARAD),
	COULOMB (26,Unit.COULOMB),
	SECOND (27,Unit.SECOND),
	HENRY (28,Unit.HENRY),
	VOLT (29,Unit.VOLT),
	OHM (30,Unit.OHM),
	JOULE (31,Unit.JOULE),
	NEWTON (32,Unit.NEWTON),
	HERTZ (33,Unit.HERTZ),
	LUX (34,Unit.LUX),
	LUMEN (35,Unit.LUMEN),
	WEBER (36,Unit.WEBER),
	TESLA (37,Unit.TESLA),
	WATT (38,Unit.WATT),
	PASCAL (39,Unit.PASCAL),
	SQUAREMETER(41,Unit.SQUAREMETER),
	CUBICMETER (42,Unit.CUBICMETER),
	METERPERSECOND (43,Unit.METERPERSECOND),
	METERPERSECONDSQUARED (44,Unit.METERPERSECONDSQUARED),
	CUBICMETERPERSECOND (45,Unit.CUBICMETERPERSECOND),
	METERPERCUBICMETER (46,Unit.METERPERCUBICMETER),
	KILOGRAMMETER (47,Unit.KILOGRAMMETER),
	KILOGRAMPERCUBICMETER (48,Unit.KILOGRAMPERCUBICMETER),
	METERSQUAREDPERSECOND (49,Unit.METERSQUAREDPERSECOND),
	WATTPERMETERKELVIN (50,Unit.WATTPERMETERKELVIN),
	JOULEPERKELVIN (51,Unit.JOULEPERKELVIN),
	PARTSPERMILLION (52,Unit.PARTSPERMILLION),
	SIEMENS (53,Unit.SIEMENS),
	RADIANSPERSECOND (54,Unit.RADIANSPERSECOND),
	VOLTAMPERE (61,Unit.VOLTAMPERE),
	VOLTAMPEREREACTIVE (62,Unit.VOLTAMPEREREACTIVE),
	PHASEANGLE (63,Unit.PHASEANGLE),
	POWERFACTOR (64,Unit.POWERFACTOR),
	VOLTSECONDS (65,Unit.VOLTSECONDS),
	VOLTSQUARED (66,Unit.VOLTSQUARED),
	AMPERESECONDS (67,Unit.AMPERESECONDS),
	AMPERESQUARED (68,Unit.AMPERESQUARED),
	AMPERESQUAREDSECOND (69,Unit.AMPERESQUAREDSECOND),
	VOLTAMPEREHOUR (70,Unit.VOLTAMPEREHOUR),
	WATTHOUR (71,Unit.WATTHOUR),
	VOLTAMPEREREACTIVEHOUR (72,Unit.VOLTAMPEREREACTIVE),
	VOLTPERHERZ (73,Unit.VOLTPERHERTZ),
	HERZPERSECOND (74,Unit.HERTZPERSECOND),
	CHARACTERS (75,Unit.CHARACTERS),
	CHARACTERSPERSECOND (76,Unit.CHARACTERSPERSECOND),
	KILOGRAMMETERSQUARED (77,Unit.KILOGRAMMETERSQUARED),
	DECIBEL (78,Unit.DECIBEL),
	MONEY (79,Unit.MONEY),
	QUANTITYPOWER(100,Unit.QUANTITYPOWER),
	QUANTITYENERGY (101,Unit.QUANTITYENERGY),
	OHMMETER (102,Unit.OHMMETER),
	AMPEREPERMETER (103,Unit.AMPEREPERMETER),
	VOLTSQUAREDHOUR (104,Unit.VOLTSQUAREDHOUR),
	AMPERESQUAREDHOUR (105,Unit.AMPERESQUAREDHOUR),
	AMPEREHOUR (106,Unit.AMPEREHOUR),
	WATTHOURPERCUBICMETER (107,Unit.WATTHOURPERCUBICMETER),
	TIMESTAMP (108,Unit.TIMESTAMP),
	BOOLEAN (109,Unit.BOOLEAN),
	BOOLEANARRAY (110,Unit.BOOLEANARRAY),
	COUNT (111,Unit.COUNT),
	DECIBELMILLIWATT (113,Unit.DECIBELMILLIWATT),
	ENCODEDVALUE (114,Unit.ENCODEDVALUE),
	WATTHOURPERROTATION (115,Unit.WATTHOURPERROTATION),
	VOLTAMPEREREACTIVEHOURPERROTATION (116,Unit.VOLTAMPEREREACTIVEHOURPERROTATION),
	VOLTAMPEREHOURPERROTATION (117,Unit.VOLTAMPEREHOURPERROTATION),
	ENDDEVICEEVENTCODE (118,Unit.ENDDEVICEEVENTCODE);
	
	private final int cimCode;
	private final Unit unit;
	
	private ReadingTypeUnit(int cimCode , Unit unit) {
		this.cimCode = cimCode;
		this.unit = unit;
	}
	
	public String getSymbol() {
		return unit.getSymbol();
	}
	
	public int getCimCode() {
		return cimCode;		
	}
	
	@Override
	public String toString() {
		return getSymbol();
	}
	
	public boolean isApplicable() {
		return cimCode != 0;
	}
	
	public static ReadingTypeUnit get(int id) {
		for (ReadingTypeUnit each : values()) {
			if (each.cimCode == id) {
				return each;
			}
		}
		throw new IllegalArgumentException("" + id);
	}
	

}
