/*
 * NumberFormatPnl.java
 *
 * Created on 6 juli 2005, 14:39
 */

package com.energyict.mdc.engine.offline.gui.fieldediting;

import com.energyict.mdc.engine.offline.core.FormatProvider;
import com.energyict.mdc.engine.offline.core.TranslatorProvider;
import com.energyict.mdc.engine.offline.core.Utils;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.text.DecimalFormat;

/**
 * @author Geert
 */
public class NumberFormatPnl extends FieldEditingPnl implements DocumentListener {

    private boolean canceled = false;
    private DecimalFormat userFormatter =
            FormatProvider.instance.get().getFormatPreferences().getNumberFormat();


    /**
     * Creates new form NumberFormatPnl
     */
    public NumberFormatPnl() {
        initComponents();
        patternField.getDocument().addDocumentListener(this);
        updateSample();
        pack();
    }

    public boolean check() {
        try {
            String value = getFieldText();
            if (Utils.isNull(value)) {
                JOptionPane.showMessageDialog(this,
                        TranslatorProvider.instance.get().getTranslator().getTranslation("emptyNumberField"),
                        TranslatorProvider.instance.get().getTranslator().getTranslation("message"),
                        JOptionPane.WARNING_MESSAGE);
                return false;
            }
            DecimalFormat formatter = new DecimalFormat(value);
            formatter.format(1234567.890);
            return true;
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this,
                    TranslatorProvider.instance.get().getTranslator().getTranslation("invalidPattern"),
                    TranslatorProvider.instance.get().getTranslator().getTranslation("message"),
                    JOptionPane.WARNING_MESSAGE);
            return false;
        }
    }

    private void updateSample() {
        try {
            DecimalFormat formatter =
                    FormatProvider.instance.get().getFormatPreferences().getNumberFormat();
            // 1. the entered pattern is applied
            formatter.applyPattern(getFieldText());
            // 2. but the grouping & size is overruled by the user preferences
            formatter.setGroupingUsed(userFormatter.isGroupingUsed());
            formatter.setGroupingSize(userFormatter.getGroupingSize());

            sampleField.setText(formatter.format(1234567.890));
        } catch (IllegalArgumentException x) {
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        centerPanel = new javax.swing.JPanel();
        innerPanel = new javax.swing.JPanel();
        patternLabel = new javax.swing.JLabel();
        patternField = new javax.swing.JTextField();
        sampleLabel = new javax.swing.JLabel();
        sampleField = new javax.swing.JLabel();
        southPanel = new javax.swing.JPanel();
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        centerPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        innerPanel.setLayout(new java.awt.GridBagLayout());

        patternLabel.setText(TranslatorProvider.instance.get().getTranslator().getTranslation("pattern") + ":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        innerPanel.add(patternLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        innerPanel.add(patternField, gridBagConstraints);

        sampleLabel.setText(TranslatorProvider.instance.get().getTranslator().getTranslation("sample") + ":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        innerPanel.add(sampleLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        innerPanel.add(sampleField, gridBagConstraints);

        centerPanel.add(innerPanel);

        add(centerPanel, java.awt.BorderLayout.CENTER);

        southPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        buttonPanel.setLayout(new java.awt.GridLayout(1, 0, 6, 0));

        okButton.setText(TranslatorProvider.instance.get().getTranslator().getTranslation("ok"));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(okButton);

        cancelButton.setText(TranslatorProvider.instance.get().getTranslator().getTranslation("cancel"));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(cancelButton);

        southPanel.add(buttonPanel);

        add(southPanel, java.awt.BorderLayout.SOUTH);

    }//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        canceled = false;
        if (check()) {
            doClose();
        }
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        performEscapeAction();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void performEscapeAction() {
        canceled = true;
        doClose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JPanel innerPanel;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField patternField;
    private javax.swing.JLabel patternLabel;
    private javax.swing.JLabel sampleField;
    private javax.swing.JLabel sampleLabel;
    private javax.swing.JPanel southPanel;
    // End of variables declaration//GEN-END:variables

    // FieldEditingPnl methods

    public void setFieldText(String text) {
        patternField.setText(text);
    }

    public String getFieldText() {
        return patternField.getText();
    }

    public boolean isCanceled() {
        return canceled;
    }

    // DocumentListener interface

    public void changedUpdate(DocumentEvent e) {
    }

    public void insertUpdate(DocumentEvent e) {
        updateSample();
    }

    public void removeUpdate(DocumentEvent e) {
        updateSample();
    }
}
