/*
 * SelectDateFormatPnl.java
 *
 * Created on 25 januari 2005, 14:25
 */

package com.energyict.mdc.engine.offline.gui.selecting;

import com.energyict.mdc.engine.offline.core.TranslatorProvider;
import com.energyict.mdc.engine.offline.gui.fieldediting.FieldEditingPnl;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.prefs.Preferences;

/**
 * @author Geert
 */
public class SelectDateFormatPnl extends FieldEditingPnl
        implements DocumentListener {

    private boolean canceled = false;
    private SimpleDateFormat sdf = new SimpleDateFormat();
    private Preferences userPrefs;
    private String format = null;
    private int mode = MODE_UNDEFINED;
    private String defaultFormat = null;
    private String prefKey = null;

    public static int MODE_UNDEFINED = 0;
    public static int MODE_MONTH = 1;
    public static int MODE_WEEK = 2;
    public static int MODE_YEAR = 3;
    public static int MODE_DAYOFWEEK = 4;
    public static int MODE_TIME = 5;
    public static int MODE_DATE = 6;
    public static int MODE_DATETIME = 7;

    /**
     * Creates new form SelectDateFormatPnl
     */
    public SelectDateFormatPnl(int mode) {
        this(mode, null, true);
    }

    public SelectDateFormatPnl(int mode, String prefKey, boolean showDefaultButton) {
        this.mode = mode;
        this.prefKey = prefKey;
        initComponents();
        if (!showDefaultButton) {
            jPanel3.remove(defaultButton);
        }
        userPrefs = Preferences.userNodeForPackage(SelectDateFormatPnl.class);
        String previousFormat = (prefKey != null) ? userPrefs.get(prefKey, "yyyy MMM dd HH:mm:ss") : null;
        initCombo(previousFormat);
        pack();
    }

    private void initCombo(String toSelect) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(new Vector(getDefaultPatterns()));
        formatComboBox.setModel(model);
        if (toSelect != null) {
            model.setSelectedItem(toSelect);
        } else {
            formatComboBox.setSelectedIndex(0);
        }
        format = (String) formatComboBox.getSelectedItem();
        updateExample();
        ((JTextField) formatComboBox.getEditor().getEditorComponent()).getDocument().addDocumentListener(this);
    }

    public void performEscapeAction() {
        canceled = true;
        doClose();
    }

    public String getFormat() {
        return format;
    }

    public void setModeAndDefaultFormat(int mode, String fmt) {
        this.mode = mode;
        this.defaultFormat = fmt;
        initCombo(format);
    }

    private void updateExample() {
        try {
            sdf.applyPattern(format);
            sampleLabel.setText(sdf.format(new Date()));
        } catch (IllegalArgumentException x) {
        }
    }

    private boolean check() {
        if (doCheckPattern()) {
            return true;
        }

        JOptionPane.showMessageDialog(this,
                TranslatorProvider.instance.get().getTranslator().getTranslation("invalidFormat"),
                TranslatorProvider.instance.get().getTranslator().getTranslation("message"),
                JOptionPane.WARNING_MESSAGE);
        return false;
    }

    private boolean doCheckPattern() {
        try {
            String pattern = getFormat();
            if ((pattern == null) || (pattern.equals(""))) {
                return false;
            }
            SimpleDateFormat formatter = new SimpleDateFormat(pattern);
            formatter.format(new Date());
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel5 = new JPanel();
        jPanel4 = new JPanel();
        formatLabel = new JLabel();
        formatComboBox = new JComboBox();
        nowLabel = new JLabel();
        sampleLabel = new JLabel();
        jPanel2 = new JPanel();
        jPanel3 = new JPanel();
        defaultButton = new JButton();
        okButton = new JButton();
        cancelButton = new JButton();

        setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jPanel4.setLayout(new java.awt.GridBagLayout());

        formatLabel.setText(TranslatorProvider.instance.get().getTranslator().getTranslation("format") + ":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(formatLabel, gridBagConstraints);

        formatComboBox.setEditable(true);
        formatComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatComboBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(formatComboBox, gridBagConstraints);

        nowLabel.setText(TranslatorProvider.instance.get().getTranslator().getTranslation("sample") + ":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(nowLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(sampleLabel, gridBagConstraints);

        jPanel5.add(jPanel4);

        add(jPanel5, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jPanel3.setLayout(new java.awt.GridLayout(1, 0, 6, 0));

        defaultButton.setMnemonic('D');
        defaultButton.setText(TranslatorProvider.instance.get().getTranslator().getTranslation("default"));
        defaultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultButtonActionPerformed(evt);
            }
        });

        jPanel3.add(defaultButton);

        okButton.setText(TranslatorProvider.instance.get().getTranslator().getTranslation("ok"));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        jPanel3.add(okButton);

        cancelButton.setText(TranslatorProvider.instance.get().getTranslator().getTranslation("cancel"));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jPanel3.add(cancelButton);

        jPanel2.add(jPanel3);

        add(jPanel2, java.awt.BorderLayout.SOUTH);

    }//GEN-END:initComponents

    private void defaultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultButtonActionPerformed
        format = defaultFormat;
        initCombo(format);
    }//GEN-LAST:event_defaultButtonActionPerformed

    private void formatComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatComboBoxActionPerformed
        Object sel = formatComboBox.getSelectedItem();
        if (sel != null) {
            format = (String) sel;
        }
    }//GEN-LAST:event_formatComboBoxActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        performEscapeAction();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        canceled = false;
        if (prefKey != null) {
            userPrefs.put(prefKey, format);
        } // Remember the format (for a next time)
        if (check()) {
            doClose();
        }
    }//GEN-LAST:event_okButtonActionPerformed

    // DocumentListener interface

    public void changedUpdate(DocumentEvent e) {
    }

    public void insertUpdate(DocumentEvent e) {
        updateExample(e);
    }

    public void removeUpdate(DocumentEvent e) {
        updateExample(e);
    }

    private void updateExample(DocumentEvent e) {
        try {
            Document doc = e.getDocument();
            format = doc.getText(0, doc.getLength());
            updateExample();
        } catch (BadLocationException x) {
        } catch (IllegalArgumentException x) {
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton cancelButton;
    private JButton defaultButton;
    private JComboBox formatComboBox;
    private JLabel formatLabel;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JPanel jPanel4;
    private JPanel jPanel5;
    private JLabel nowLabel;
    private JButton okButton;
    private JLabel sampleLabel;
    // End of variables declaration//GEN-END:variables

    protected List getDefaultPatterns() {
        if (mode == MODE_MONTH) {
            return getMonthPatterns();
        } else if (mode == MODE_WEEK) {
            return getWeekPatterns();
        } else if (mode == MODE_YEAR) {
            return getYearPatterns();
        } else if (mode == MODE_DAYOFWEEK) {
            return getDayOfWeekPatterns();
        } else if (mode == MODE_TIME) {
            return getTimePatterns();
        } else if (mode == MODE_DATE) {
            return getDatePatterns();
        } else if (mode == MODE_DATETIME) {
            return getDateTimePatterns();
        } else {
            return new ArrayList();
        }
    }

    protected List getMonthPatterns() {
        List patterns = new ArrayList();
        patterns.add("MM/yyyy");
        patterns.add("MM/yy");
        patterns.add("yyyy/MM");
        patterns.add("yy/MM");
        patterns.add("MM");
        patterns.add("MMM");
        patterns.add("MMM yyyy");
        return patterns;
    }

    protected List getWeekPatterns() {
        List patterns = new ArrayList();
        patterns.add("w");
        return patterns;
    }

    protected List getYearPatterns() {
        List patterns = new ArrayList();
        patterns.add("yyyy");
        patterns.add("yy");
        return patterns;
    }

    protected List getDayOfWeekPatterns() {
        List patterns = new ArrayList();
        patterns.add("E");
        return patterns;
    }

    protected List getTimePatterns() {
        List patterns = new ArrayList();
        patterns.add("HH:mm");
        patterns.add("hh:mm a");
        patterns.add("H:m");
        patterns.add("h:m a");
        return patterns;
    }

    protected List getDateTimePatterns() {
        List patterns = new ArrayList();
        patterns.add("dd/MM/yyyy HH:mm");
        patterns.add("MM/dd/yyyy HH:mm");
        patterns.add("dd-MMM-yyyy HH:mm");
        patterns.add("dd MMMM yyyy HH:mm");
        patterns.add("MMMM dd yyyy HH:mm");
        patterns.add("dd/MM/yyyy hh:mm a");
        patterns.add("MM/dd/yyyy hh:mm a");
        patterns.add("dd-MMM-yyyy hh:mm a");
        patterns.add("dd MMMM yyyy hh:mm a");
        patterns.add("MMMM dd yyyy hh:mm a");
        patterns.add("dd/MM/yyyy H:m");
        patterns.add("MM/dd/yyyy H:m");
        patterns.add("dd-MMM-yyyy H:m");
        patterns.add("dd MMMM yyyy H:m");
        patterns.add("MMMM dd yyyy H:m");
        patterns.add("dd/MM/yyyy h:m a");
        patterns.add("MM/dd/yyyy h:m a");
        patterns.add("dd-MMM-yyyy h:m a");
        patterns.add("dd MMMM yyyy h:m a");
        patterns.add("MMMM dd yyyy h:m a");
        return patterns;
    }

    protected List getDatePatterns() {
        List patterns = new ArrayList();
        patterns.add("dd/MM/yyyy");
        patterns.add("MM/dd/yyyy");
        patterns.add("dd-MMM-yyyy");
        patterns.add("dd MMMM yyyy");
        patterns.add("MMMM dd yyyy");
        return patterns;
    }
    // FieldEditingPnl functions

    public void setFieldText(String text) {
        format = text;
        initCombo(format);
    }

    public String getFieldText() {
        return format;
    }

    public boolean isCanceled() {
        return canceled;
    }
}
