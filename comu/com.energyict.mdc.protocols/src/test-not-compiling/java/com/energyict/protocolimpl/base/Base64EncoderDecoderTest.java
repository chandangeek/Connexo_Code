package com.energyict.protocolimpl.base;

import com.energyict.protocolimpl.base.Base64EncoderDecoder;
import com.energyict.protocolimpl.utils.ProtocolTools;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

import static junit.framework.Assert.assertEquals;
import static junit.framework.Assert.assertNotNull;
import static org.junit.Assert.assertArrayEquals;

/**
 * Copyrights EnergyICT
 * Date: 4/3/12
 * Time: 11:16 PM
 */
public class Base64EncoderDecoderTest {

    private static final Map<String, String> TEST_VECTORS = new HashMap<String, String>();

    static {
        TEST_VECTORS.put("", "");
        TEST_VECTORS.put("60", "YA==");
        TEST_VECTORS.put("38", "OA==");
        TEST_VECTORS.put("7A", "eg==");
        TEST_VECTORS.put("BE", "vg==");
        TEST_VECTORS.put("F6", "9g==");
        TEST_VECTORS.put("60B420BB3851D9D47ACB933DBE7039", "YLQguzhR2dR6y5M9vnA5");
        TEST_VECTORS.put("F6C92DA33AF01D4FB770E98C0325F4", "9sktozrwHU+3cOmMAyX0");
        TEST_VECTORS.put("3EBAF8986DA712C82BCD4D554BF0B5", "Prr4mG2nEsgrzU1VS/C1");
        TEST_VECTORS.put("23C29B624DE9EF9C2F931EFC580F9A", "I8KbYk3p75wvkx78WA+a");
        TEST_VECTORS.put("081B12E107B1E805F2B4F5F0F1D00C", "CBsS4Qex6AXytPXw8dAM");
        TEST_VECTORS.put("60B420BB3851D9D47ACB933DBE70399BF6C92DA33AF01D4FB770E98C0325", "YLQguzhR2dR6y5M9vnA5m/bJLaM68B1Pt3DpjAMl");
        TEST_VECTORS.put("3EBAF8986DA712C82BCD4D554BF0B54023C29B624DE9EF9C2F931EFC580F", "Prr4mG2nEsgrzU1VS/C1QCPCm2JN6e+cL5Me/FgP");
        TEST_VECTORS.put("081B12E107B1E805F2B4F5F0F1D00C2D0F62634670921C505867FF20F6A8", "CBsS4Qex6AXytPXw8dAMLQ9iY0ZwkhxQWGf/IPao");
        TEST_VECTORS.put("98AF8725385586B41FEFF205B4E05A000823F78B5F8F5C02439CE8F67A78", "mK+HJThVhrQf7/IFtOBaAAgj94tfj1wCQ5zo9np4");
        TEST_VECTORS.put("CBE6BF1AE7F2BC40A49709A06C0E31499BF02969CA42D203E566BCC696DE", "y+a/GufyvECklwmgbA4xSZvwKWnKQtID5Wa8xpbe");
        TEST_VECTORS.put("60B420BB3851D9D47ACB933DBE70399BF6C92DA33AF01D4FB770E98C0325F41D3EBAF8986DA712C82BCD4D554BF0B54023C29B624DE9EF9C2F931EFC580F9AFB", "YLQguzhR2dR6y5M9vnA5m/bJLaM68B1Pt3DpjAMl9B0+uviYbacSyCvNTVVL8LVAI8KbYk3p75wvkx78WA+a+w==");
        TEST_VECTORS.put("081B12E107B1E805F2B4F5F0F1D00C2D0F62634670921C505867FF20F6A8335E98AF8725385586B41FEFF205B4E05A000823F78B5F8F5C02439CE8F67A781D90", "CBsS4Qex6AXytPXw8dAMLQ9iY0ZwkhxQWGf/IPaoM16Yr4clOFWGtB/v8gW04FoACCP3i1+PXAJDnOj2engdkA==");
        TEST_VECTORS.put("CBE6BF1AE7F2BC40A49709A06C0E31499BF02969CA42D203E566BCC696DE08FA0102A0FD2E2330B0964ABB7C443020DE1CAD09BFD6381FFB94DAAFBB90C4ED91", "y+a/GufyvECklwmgbA4xSZvwKWnKQtID5Wa8xpbeCPoBAqD9LiMwsJZKu3xEMCDeHK0Jv9Y4H/uU2q+7kMTtkQ==");
        TEST_VECTORS.put("A0613AD1DC4B4703AF84C1D63B1A876921C6D5869D61CCB98ED13AE6C09A13FC91E14922F301CF8BCF934315A6049D2F07D983FAA91B8F4E7265ECB815A7CBAB", "oGE60dxLRwOvhMHWOxqHaSHG1YadYcy5jtE65sCaE/yR4Uki8wHPi8+TQxWmBJ0vB9mD+qkbj05yZey4FafLqw==");
        TEST_VECTORS.put("C1450CB72B3C74107717AA24AC42F25B6C6784767D0E3546C4F7250191A3B6AAA2B64D126E5583B04C113259C948E1D0B39BB9560CD5409B6ECAFEDBC8ACAFEE", "wUUMtys8dBB3F6okrELyW2xnhHZ9DjVGxPclAZGjtqqitk0SblWDsEwRMlnJSOHQs5u5VgzVQJtuyv7byKyv7g==");
        TEST_VECTORS.put("60B420BB3851D9D47ACB933DBE70399BF6C92DA33AF01D4FB770E98C0325F41D3EBAF8986DA712C82BCD4D554BF0B54023C29B624DE9EF9C2F931EFC580F9AFB081B12E107B1E805F2B4F5F0F1D00C2D0F62634670921C505867FF20F6A8335E", "YLQguzhR2dR6y5M9vnA5m/bJLaM68B1Pt3DpjAMl9B0+uviYbacSyCvNTVVL8LVAI8KbYk3p75wvkx78WA+a+wgbEuEHsegF8rT18PHQDC0PYmNGcJIcUFhn/yD2qDNe");
        TEST_VECTORS.put("98AF8725385586B41FEFF205B4E05A000823F78B5F8F5C02439CE8F67A781D90CBE6BF1AE7F2BC40A49709A06C0E31499BF02969CA42D203E566BCC696DE08FA0102A0FD2E2330B0964ABB7C443020DE1CAD09BFD6381FFB94DAAFBB90C4ED91", "mK+HJThVhrQf7/IFtOBaAAgj94tfj1wCQ5zo9np4HZDL5r8a5/K8QKSXCaBsDjFJm/ApacpC0gPlZrzGlt4I+gECoP0uIzCwlkq7fEQwIN4crQm/1jgf+5Tar7uQxO2R");
        TEST_VECTORS.put("A0613AD1DC4B4703AF84C1D63B1A876921C6D5869D61CCB98ED13AE6C09A13FC91E14922F301CF8BCF934315A6049D2F07D983FAA91B8F4E7265ECB815A7CBABC1450CB72B3C74107717AA24AC42F25B6C6784767D0E3546C4F7250191A3B6AA", "oGE60dxLRwOvhMHWOxqHaSHG1YadYcy5jtE65sCaE/yR4Uki8wHPi8+TQxWmBJ0vB9mD+qkbj05yZey4FafLq8FFDLcrPHQQdxeqJKxC8ltsZ4R2fQ41RsT3JQGRo7aq");
        TEST_VECTORS.put("A2B64D126E5583B04C113259C948E1D0B39BB9560CD5409B6ECAFEDBC8ACAFEEA74DB7F85ADF94BE9A85A1DD4B03AA88831DD29C4078810B3A28D22D6680B64FCBB1B237C2441234CEABBFDAD87C311548F6790274B92E6A591D3AB1A60B7340", "orZNEm5Vg7BMETJZyUjh0LObuVYM1UCbbsr+28isr+6nTbf4Wt+UvpqFod1LA6qIgx3SnEB4gQs6KNItZoC2T8uxsjfCRBI0zqu/2th8MRVI9nkCdLkualkdOrGmC3NA");
        TEST_VECTORS.put("0BC474C52D3CBCF2FBAE72B6E6D49FB0B1851336FA2C540CDFBF78C8DB492C65E75B01F2560A9DC456FEA4034286569E3086EA649724959C440892DAEB724C06E5133AC9AA9410EEBA2D54FE8AFDF8507D2113E2026A937AE439982BCE79CC24", "C8R0xS08vPL7rnK25tSfsLGFEzb6LFQM3794yNtJLGXnWwHyVgqdxFb+pANChlaeMIbqZJcklZxECJLa63JMBuUTOsmqlBDuui1U/or9+FB9IRPiAmqTeuQ5mCvOecwk");
        TEST_VECTORS.put("60B420BB3851D9D47ACB933DBE70399BF6C92DA33AF01D4FB770E98C0325F41D3EBAF8986DA712C82BCD4D554BF0B54023C29B624DE9EF9C2F931EFC580F9AFB081B12E107B1E805F2B4F5F0F1D00C2D0F62634670921C505867FF20F6A8335E98AF8725385586B41FEFF205B4E05A000823F78B5F8F5C02439CE8F67A781D90", "YLQguzhR2dR6y5M9vnA5m/bJLaM68B1Pt3DpjAMl9B0+uviYbacSyCvNTVVL8LVAI8KbYk3p75wvkx78WA+a+wgbEuEHsegF8rT18PHQDC0PYmNGcJIcUFhn/yD2qDNemK+HJThVhrQf7/IFtOBaAAgj94tfj1wCQ5zo9np4HZA=");
        TEST_VECTORS.put("CBE6BF1AE7F2BC40A49709A06C0E31499BF02969CA42D203E566BCC696DE08FA0102A0FD2E2330B0964ABB7C443020DE1CAD09BFD6381FFB94DAAFBB90C4ED91A0613AD1DC4B4703AF84C1D63B1A876921C6D5869D61CCB98ED13AE6C09A13FC91E14922F301CF8BCF934315A6049D2F07D983FAA91B8F4E7265ECB815A7CBAB", "y+a/GufyvECklwmgbA4xSZvwKWnKQtID5Wa8xpbeCPoBAqD9LiMwsJZKu3xEMCDeHK0Jv9Y4H/uU2q+7kMTtkaBhOtHcS0cDr4TB1jsah2khxtWGnWHMuY7ROubAmhP8keFJIvMBz4vPk0MVpgSdLwfZg/qpG49OcmXsuBWny6s=");
        TEST_VECTORS.put("C1450CB72B3C74107717AA24AC42F25B6C6784767D0E3546C4F7250191A3B6AAA2B64D126E5583B04C113259C948E1D0B39BB9560CD5409B6ECAFEDBC8ACAFEEA74DB7F85ADF94BE9A85A1DD4B03AA88831DD29C4078810B3A28D22D6680B64FCBB1B237C2441234CEABBFDAD87C311548F6790274B92E6A591D3AB1A60B7340", "wUUMtys8dBB3F6okrELyW2xnhHZ9DjVGxPclAZGjtqqitk0SblWDsEwRMlnJSOHQs5u5VgzVQJtuyv7byKyv7qdNt/ha35S+moWh3UsDqoiDHdKcQHiBCzoo0i1mgLZPy7GyN8JEEjTOq7/a2HwxFUj2eQJ0uS5qWR06saYLc0A=");
        TEST_VECTORS.put("0BC474C52D3CBCF2FBAE72B6E6D49FB0B1851336FA2C540CDFBF78C8DB492C65E75B01F2560A9DC456FEA4034286569E3086EA649724959C440892DAEB724C06E5133AC9AA9410EEBA2D54FE8AFDF8507D2113E2026A937AE439982BCE79CC240E264AF6CD43CC3025666BB9B37F81E7141567AD68C9824980DBECCD14DB20A8", "C8R0xS08vPL7rnK25tSfsLGFEzb6LFQM3794yNtJLGXnWwHyVgqdxFb+pANChlaeMIbqZJcklZxECJLa63JMBuUTOsmqlBDuui1U/or9+FB9IRPiAmqTeuQ5mCvOecwkDiZK9s1DzDAlZmu5s3+B5xQVZ61oyYJJgNvszRTbIKg=");
        TEST_VECTORS.put("7058017115B6105239664B7683609C18B2E652DAEB6BB378BB3F78805CBB81B69AF9EFFD0D426F91BC1222F81789C390DB28655A1E021D609E9D190CDE55A8C923ED5512F448CD00189773075F4ED41C57CFD17B8BBE340215B9D1F8E2BA5B7B23C836FD3B598F59DC1577C49D9719B8B1935B802D2098A3701B6A4147DE6656", "cFgBcRW2EFI5Zkt2g2CcGLLmUtrra7N4uz94gFy7gbaa+e/9DUJvkbwSIvgXicOQ2yhlWh4CHWCenRkM3lWoySPtVRL0SM0AGJdzB19O1BxXz9F7i740AhW50fjiult7I8g2/TtZj1ncFXfEnZcZuLGTW4AtIJijcBtqQUfeZlY=");
        TEST_VECTORS.put("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=");
        TEST_VECTORS.put("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=");
        TEST_VECTORS.put("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=");
        TEST_VECTORS.put("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=");
        TEST_VECTORS.put("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=");
    }

    @Test
    public void testEncode() throws Exception {
        final Base64EncoderDecoder b64Eict = new Base64EncoderDecoder();

        for (String hexData : TEST_VECTORS.keySet()) {
            final byte[] rawBytes = ProtocolTools.getBytesFromHexString(hexData, "");
            final String sunEncoding = TEST_VECTORS.get(hexData);

            assertArrayEquals(new byte[0], b64Eict.decode(b64Eict.encode(null)));

            String ourEncoding;

            ourEncoding = b64Eict.encode(rawBytes, 0, rawBytes.length);
            assertNotNull(ourEncoding);
            assertEquals(sunEncoding, ourEncoding);
            assertArrayEquals(rawBytes, b64Eict.decode(b64Eict.encode(rawBytes)));

            ourEncoding = b64Eict.encode(rawBytes);
            assertNotNull(ourEncoding);
            assertEquals(sunEncoding, ourEncoding);
            assertArrayEquals(rawBytes, b64Eict.decode(b64Eict.encode(rawBytes)));

        }
    }

    @Test
    public void testDecode() throws Exception {
        final Base64EncoderDecoder b64Eict = new Base64EncoderDecoder();

        for (Map.Entry<String, String> entry : TEST_VECTORS.entrySet()) {
            final String sunEncoding = entry.getValue();
            final String hexData = entry.getKey();
            final byte[] rawBytes = ProtocolTools.getBytesFromHexString(hexData, "");

            assertArrayEquals(new byte[0], b64Eict.decode(b64Eict.decode((byte[]) null)));
            assertArrayEquals(new byte[0], b64Eict.decode(b64Eict.decode((String) null)));

            byte[] decodedBytes;

            decodedBytes = b64Eict.decode(sunEncoding);
            assertNotNull(decodedBytes);
            assertArrayEquals(rawBytes, decodedBytes);
            assertArrayEquals(rawBytes, b64Eict.decode(b64Eict.encode(rawBytes)));

            decodedBytes = b64Eict.decode(sunEncoding.getBytes());
            assertNotNull(decodedBytes);
            assertArrayEquals(rawBytes, decodedBytes);
            assertArrayEquals(rawBytes, b64Eict.decode(b64Eict.encode(rawBytes)));

            decodedBytes = b64Eict.decode(sunEncoding.getBytes(), 0, sunEncoding.getBytes().length);
            assertNotNull(decodedBytes);
            assertArrayEquals(rawBytes, decodedBytes);
            assertArrayEquals(rawBytes, b64Eict.decode(b64Eict.encode(rawBytes)));

        }
    }

}
