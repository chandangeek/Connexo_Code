package com.energyict.mdc.autoreschedule.impl;

import com.elster.jupiter.time.TimeDuration;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

class RecurrenceParser {

    static final Pattern pattern = Pattern.compile("P\\[(\\d+),(\\w+)");

    /**
     * Calculates the number of seconds for the received recurrence expression, or -1 if the expression is "NEVER" or cannot be evaluated
     * @param expression - encoded recurrence expression, as generated by the custom tasks; examples: P[1,HOUR,0,50] ; P[1,WEEK,0,54,16,WEDNESDAY]
     * @return number of seconds corresponding to expression
     */
    static int getSeconds(String expression) {
        Matcher matcher = pattern.matcher(expression);
        int groupCount = matcher.groupCount();
        if (matcher.find() && matcher.groupCount() > 1) {
            try {
                int every = Integer.parseInt(matcher.group(1));
                TimeDuration timeDuration = new TimeDuration(every, TimeDuration.TimeUnit.forDescription(matcher.group(2).trim().toLowerCase() + "s"));
                return timeDuration.getSeconds();
            } catch (NumberFormatException e) {
            }
        }

        return -1;
    }
}
