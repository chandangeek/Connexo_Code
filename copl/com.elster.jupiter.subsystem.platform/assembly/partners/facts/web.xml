<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE web-app
  PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
  "http://java.sun.com/dtd/web-app_2_3.dtd" [
  <!ENTITY jsps SYSTEM "file:/D:/Connexo/Connexo/bin/../partners/tomcat/webapps/facts/WEB-INF/web-jsps.xml">
  ]>

<web-app>

  <!-- System Event and Debug classes -->
  
  <listener>
    <listener-class>com.hof.servlet.SysSessionListener</listener-class>
  </listener>    

  <listener>
    <listener-class>com.hof.util.RequestListener</listener-class>
  </listener>
  
  <filter>
	<filter-name>Connexo Authentication SSO Filter</filter-name>
    <filter-class>com.elster.partners.connexo.filters.generic.ConnexoAuthenticationSSOFilter</filter-class>
	<init-param>
		<param-name>excludePatterns</param-name>
		<param-value>/services/*;/JsAPI/*</param-value>
    </init-param>
  </filter>
  
  <filter-mapping>
    <filter-name>Connexo Authentication SSO Filter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  
  <filter>
	<filter-name>Connexo Facts SSO Filter</filter-name>
    <filter-class>com.elster.partners.connexo.filters.facts.ConnexoFactsSSOFilter</filter-class>
	<init-param>
		<param-name>excludePatterns</param-name>
		<param-value>/services/*;/JsAPI/*</param-value>
    </init-param>
  </filter>
  
  <filter-mapping>
    <filter-name>Connexo Facts SSO Filter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

   <!-- Action Servlet Configuration -->

  <servlet>
    <servlet-name>action</servlet-name>
    <servlet-class>org.apache.struts.action.ActionServlet</servlet-class>
    <init-param>
      <param-name>application</param-name>
      <param-value>com.hof.ApplicationResources</param-value>
    </init-param>
    <init-param>
      <param-name>config</param-name>
      <param-value>
              /WEB-INF/struts-config.xml,
              /WEB-INF/struts-config-ip.xml,
              /WEB-INF/struts-config-mi.xml,
              /WEB-INF/struts-config-mobile.xml
      </param-value>
    </init-param>
    <init-param>
      <param-name>debug</param-name>
      <param-value>0</param-value>
    </init-param>
    <init-param>
      <param-name>detail</param-name>
      <param-value>1</param-value>
    </init-param>
    <init-param>
      <param-name>validate</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>nocache</param-name>
      <param-value>true</param-value>
    </init-param>    
    <load-on-startup>1</load-on-startup>
  </servlet>

  <!-- Initiate Log4J logging - Setup/Configuration -->

  <servlet>
    <servlet-name>InitLogging</servlet-name>
    <servlet-class>com.hof.servlet.InitLogging</servlet-class>
    <init-param>
      <param-name>log4jConfigFile</param-name>
      <param-value>log4j.properties</param-value>
    </init-param>  
    <load-on-startup>2</load-on-startup> 
  </servlet>

  <!-- Initiate BOFinder details for pluggable interfaces -->

  <servlet>
    <servlet-name>InitBOFinder</servlet-name>
    <servlet-class>com.hof.servlet.InitBOFinder</servlet-class>
    <init-param>
      <param-name>com.hof.interfaces.EventCreation</param-name>
      <param-value>com.hof.adapter.JDBCEventCreation</param-value>
    </init-param>  
    <init-param>
      <param-name>com.hof.interfaces.Authentication</param-name>
      <param-value>com.hof.adapter.YFConfigAuthentication</param-value>
    </init-param>  
    <init-param>
      <param-name>com.hof.interfaces.GroupFlatten</param-name>
      <param-value>com.hof.adapter.JDBCGroupFlatten</param-value>
    </init-param>  
    <init-param>
      <param-name>com.hof.interfaces.FileUpload</param-name>
      <param-value>com.hof.adapter.JDBCFileUpload</param-value>
    </init-param>  
    <init-param>
      <param-name>com.hof.interfaces.SystemUtil</param-name>
      <param-value>com.hof.adapter.JDBCSystemUtil</param-value>
    </init-param>  
    <load-on-startup>3</load-on-startup> 
  </servlet>

  <!-- Initiate JDBC Connection Pooling - Setup/Configuration -->
  <servlet>
    <servlet-name>InitConnectionPool</servlet-name>
    <servlet-class>com.hof.servlet.InitConnectionPool</servlet-class>
    <init-param>
      <param-name>Description</param-name>
      <param-value>Yellowfin Connection Pool</param-value>
    </init-param>
    <init-param>
      <param-name>JDBCDriverClass</param-name>
      <param-value>oracle.jdbc.driver.OracleDriver</param-value>
    </init-param>
    <init-param>
      <param-name>JDBCUrl</param-name>
      <param-value>jdbc:oracle:thin:@localhost:1521:xe</param-value>
    </init-param>
    <init-param>
      <param-name>JDBCUser</param-name>
      <param-value>facts</param-value>
    </init-param>
    <!-- 
      Password to the configuration database connection is encrypted at
      installation time. If you need to change this password, you can set
      the JDBCPasswordEncrypted parameter to false, and store the password
      in plaintext in the JDBCPassword parameter.
    -->
    <init-param>
      <param-name>JDBCPassword</param-name>
      <param-value>9aTdFuKOvcM=</param-value>
    </init-param>
    <init-param>
      <param-name>JDBCPasswordEncrypted</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>JDBCMaxCount</param-name>
      <param-value>25</param-value>
    </init-param>
    <init-param>
      <param-name>JDBCMinCount</param-name>
      <param-value>2</param-value>
    </init-param>
    <load-on-startup>4</load-on-startup>
  </servlet>

  <!-- Initiate HOF Utils (Caches, etc) -->
  <servlet>
    <servlet-name>hofStartup</servlet-name>
    <servlet-class>com.hof.servlet.hofStartup</servlet-class>
    <init-param>
      <param-name>ContentCacheSize</param-name>
      <param-value>20</param-value>
    </init-param>
    <init-param>
      <param-name>ContentCacheMaxAge</param-name>
      <param-value>86400000</param-value>
    </init-param>
    <load-on-startup>5</load-on-startup>
  </servlet>

  <servlet>
    <servlet-name>InitLicenceCheck</servlet-name>
    <servlet-class>com.hof.servlet.InitLicenceCheck</servlet-class>
    <load-on-startup>6</load-on-startup>
  </servlet>

  <!-- Reports Initialisation -->
  <servlet>
    <servlet-name>MIStartup</servlet-name>
    <servlet-class>com.hof.mi.servlet.MIStartup</servlet-class>
    <init-param>
      <param-name>ReportCacheSize</param-name>
      <param-value>20</param-value>
    </init-param>
    <init-param>
      <param-name>ReportCacheMaxAge</param-name>
      <param-value>86400000</param-value>
    </init-param>

    <!-- Uncomment this to customise the maximum ImageCache size in bytes. The default is 50MB.

    <init-param>
      <param-name>ImageCacheMaxBytes</param-name>
      <param-value>52428800</param-value>
    </init-param>

    -->
    
    <!-- Uncomment this to customise the ReportDefinitionCache parameters.

         ReportDefinitionCacheSize: Max number of report definitions to store in the cache. Default: 1000
         ReportDefinitionCacheTimeout: Max time to store a report definition in the cache in ms. Default: 86400000 (24 hours)

    <init-param>
      <param-name>ReportDefinitionCacheSize</param-name>
      <param-value>1000</param-value>
    </init-param>
    <init-param>
      <param-name>ReportDefinitionCacheTimeout</param-name>
      <param-value>86400000</param-value>
    </init-param>

    -->

    <init-param>
      <param-name>ScanJarFiles</param-name>
      <param-value>false</param-value>
    </init-param>
    <init-param>
      <param-name>JDBCDrivers</param-name>
      <param-value>
         com.connectioncloud.jdbc.Driver,
         com.ddtek.jdbc.openedge.OpenEdgeDriver,
         com.filemaker.jdbc.Driver,
         com.hof.mi.database.jdbc.ColumnarDriver,
         com.hof.mi.jdbc.driver.HiveJDBC,
         com.hof.mi.jdbc.driver.BigQueryJDBC,
         com.ibm.as400.access.AS400JDBCDriver,
         com.ibm.db2.jcc.DB2Driver,
         com.ibm.u2.jdbc.UniJDBCDriver,
         com.informix.jdbc.IfxDriver,
         com.ingres.jdbc.IngresDriver,
         com.intersys.jdbc.CacheDriver,
         com.demandreports.jdbc.Driver,
         com.lucidera.jdbc.LucidDbHttpDriver,
         com.nimbusdb.jdbc.Driver,
         org.luciddb.jdbc.LucidDbClientDriver,
         org.luciddb.jdbc.LucidDbRmiDriver,
         com.microsoft.sqlserver.jdbc.SQLServerDriver,
         com.microsoft.jdbc.sqlserver.SQLServerDriver,
         com.mysql.jdbc.Driver,
         com.pervasive.jdbc.v2.Driver,
         com.progress.sql.jdbc.JdbcProgressDriver,
         redbrick.jdbc.RBWDriver,
         com.sap.db.jdbc.Driver,
         com.sas.net.sharenet.ShareNetDriver,
         com.sybase.jdbc3.jdbc.SybDriver,
         com.sybase.jdbc4.jdbc.SybDriver,
         com.teradata.jdbc.TeraDriver,
         interbase.interclient.Driver,
         jp.co.mdit.aql.jdbc.AqlDriver,
         net.sourceforge.jtds.jdbc.Driver,
         nl.cwi.monetdb.jdbc.MonetDriver,
         oracle.jdbc.OracleDriver,
         oracle.jdbc.oracle.OracleDriver,
         org.apache.derby.jdbc.EmbeddedDriver,
         org.firebirdsql.jdbc.FBDriver,
         org.h2.Driver,
         org.hsqldb.jdbcDriver,
         org.postgresql.Driver,
         org.sqlite.JDBC,
         org.netezza.Driver,
         com.vertica.jdbc.Driver,
         com.adl.axon.jdbc.JDBCDriver,
         net.starschema.clouddb.jdbc.BQDriver,
         rssbus.jdbc.salesforce.SalesforceDriver,
         com.ddtek.jdbc.sforce.SForceDriver,
         com.bmc.arsys.jdbc.core.Driver,
         simba.jdbc.SimbaDriver,
         com.marklogic.presales.jdbc.MLXCCDriver
         com.ddtek.jdbc.sforce.SForceDriver,
         org.mariadb.jdbc.Driver
      </param-value>
    </init-param>
    <load-on-startup>7</load-on-startup>
  </servlet>

  <!-- Initiate SystemTaskManager -->
  <servlet>
    <servlet-name>SystemTaskManager</servlet-name>
    <servlet-class>com.hof.servlet.SystemTaskManager</servlet-class>
    <load-on-startup>8</load-on-startup>
  </servlet>

  <!-- Web Services Servlet -->
  <servlet>
    <servlet-name>AxisServlet</servlet-name>
    <servlet-class>org.apache.axis.transport.http.AxisServlet</servlet-class>
  </servlet>

  <!-- External Javascript API servlet -->
  <servlet>
    <servlet-name>JsAPIServlet</servlet-name>
    <servlet-class>com.hof.mi.servlet.JsAPIServlet</servlet-class>
  </servlet>

  &jsps;

  <!-- Action Servlet Mapping -->
  <servlet-mapping>
    <servlet-name>action</servlet-name>
    <url-pattern>*.i4</url-pattern>
  </servlet-mapping>

  <!-- Web Services -->
  <servlet-mapping>
    <servlet-name>AxisServlet</servlet-name>
    <url-pattern>/services/*</url-pattern>
  </servlet-mapping>

  <!-- Javascript API servlet mapping -->
  <servlet-mapping>
    <servlet-name>JsAPIServlet</servlet-name>
    <url-pattern>/JsAPI</url-pattern>
  </servlet-mapping>


  <!-- The Welcome File List -->

  <welcome-file-list>
    <welcome-file>index_jupiter.jsp</welcome-file>
  </welcome-file-list>

  <!-- error page -->
  <error-page>
    <exception-type>java.lang.Exception</exception-type>
    <location>/ErrorEntry.i4</location>
  </error-page>

  <!-- Uncomment this section to enable JAX-WS Web Services. Java 1.6+ only

  <listener>
        <listener-class>
                com.sun.xml.ws.transport.http.servlet.WSServletContextListener
        </listener-class>
  </listener>

  <servlet>
		<servlet-name>WebServices</servlet-name>
		<servlet-class>
    		com.sun.xml.ws.transport.http.servlet.WSServlet
		</servlet-class>
  </servlet>
  <servlet-mapping>
		<servlet-name>WebServices</servlet-name>
		<url-pattern>/webservices/*</url-pattern>
  </servlet-mapping>

  -->

  <filter>
    <filter-name>CustomImageFilter</filter-name>
    <filter-class>com.hof.servlet.CustomImageFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>CustomImageFilter</filter-name>
    <url-pattern>/images/*</url-pattern>
  </filter-mapping>

  <filter>
    <filter-name>BrowserHeaderFilter</filter-name>
    <filter-class>com.hof.servlet.BrowserHeaderFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>BrowserHeaderFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

</web-app>
