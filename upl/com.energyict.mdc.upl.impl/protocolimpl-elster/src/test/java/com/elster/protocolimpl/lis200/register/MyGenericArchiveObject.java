package com.elster.protocolimpl.lis200.register;

import com.elster.protocolimpl.lis200.objects.ClockObject;
import com.elster.protocolimpl.lis200.objects.GenericArchiveObject;
import com.energyict.protocolimpl.iec1107.ProtocolLink;

import java.util.*;

/**
 * Generic archive class to do repeatable test
 *
 * User: heuckeg
 * Date: 07.04.11
 * Time: 10:15
 */
@SuppressWarnings({"unused"})
class MyGenericArchiveObject extends GenericArchiveObject {

    private TimeZone timeZone = TimeZone.getTimeZone("GMT0");

    private HashMap<Date, String> archiveData;

    private String units;

    public MyGenericArchiveObject(ProtocolLink link, int archiveInstance) {
        super(link, archiveInstance);

        archiveData = new HashMap<Date, String>();

        if (archiveInstance == 1) {
            // (GONr)(AONr)(Zeit)(Vn)(VnG)(VnMP)(Zeit)(Stat)(VnTg)(Zeit)(Stat)(Vb)(VbG)(VbMP)(Zeit)(Stat)(VbTg)(Zeit)(Stat)(St.2)(St.4)(Check)
            // archive type 50
            units = "()()()(m3)(m3)(m3)()()(m3)()()(m3)(m3)(m3)()()(m3)()()()()()";
            archiveData.put(makeDate("2010-02-01,06:00:00"), "(17417)(17)(2010-02-01,06:00:00)(1230132.0997)(1230132.0997)(35.1954)(2010-01-27,07:00:00)(0)(819.9145)(2010-01-27,06:00:00)(0)(2726200.07)(2726200.07)(36)(2010-02-01,06:00:00)(0)(864)(2010-02-01,06:00:00)(0)(0)(14)(CRC Ok)");
            archiveData.put(makeDate("2010-03-01,06:00:00"), "(18440)(18)(2010-03-01,06:00:00)(1251632.0699)(1251632.0699)(33.5927)(2010-02-01,07:00:00)(0)(791.4714)(2010-02-02,06:00:00)(0)(2750395.39)(2750395.39)(36.37)(2010-02-24,05:00:00)(0)(866.95)(2010-02-12,06:00:00)(0)(0)(14)(CRC Ok)");
            archiveData.put(makeDate("2010-04-01,06:00:00"), "(19393)(19)(2010-04-01,06:00:00)(1275591.2862)(1275591.2862)(33.5205)(2010-03-07,09:00:00)(0)(790.3091)(2010-03-08,06:00:00)(0)(2777143.39)(2777143.39)(36)(2010-04-01,06:00:00)(0)(864)(2010-04-01,06:00:00)(0)(0)(14)(CRC Ok)");
            archiveData.put(makeDate("2010-05-01,06:00:00"), "(20337)(20)(2010-05-01,06:00:00)(1298629.6069)(1298629.6069)(33.6405)(2010-04-13,09:00:00)(0)(778.6935)(2010-04-06,06:00:00)(0)(2803064.85)(2803064.85)(37.76)(2010-04-13,09:00:00)(0)(865.46)(2010-04-14,06:00:00)(0)(0)(14)(CRC Ok)");
            archiveData.put(makeDate("2010-06-01,06:00:00"), "(21319)(21)(2010-06-01,06:00:00)(1322230.7643)(1322230.7643)(32.5332)(2010-05-04,16:00:00)(0)(775.9024)(2010-05-21,06:00:00)(0)(2829849.48)(2829849.48)(36.63)(2010-05-04,16:00:00)(0)(864.63)(2010-05-05,06:00:00)(0)(0)(14)(CRC Ok)");
            archiveData.put(makeDate("2010-07-01,06:00:00"), "(22289)(22)(2010-07-01,06:00:00)(1344895.2028)(1344895.2028)(32.4826)(2010-06-01,13:00:00)(0)(769.1745)(2010-06-22,06:00:00)(0)(2855771.12)(2855771.12)(36.84)(2010-06-01,13:00:00)(0)(864.84)(2010-06-02,06:00:00)(0)(0)(14)(CRC Ok)");
            archiveData.put(makeDate("2010-08-01,06:00:00"), "(23544)(23)(2010-08-01,06:00:00)(1368217.0541)(1368217.0541)(32.3401)(2010-07-30,08:00:00)(0)(766.9234)(2010-07-27,06:00:00)(0)(2882555.44)(2882555.44)(36.19)(2010-07-05,15:00:00)(0)(864.19)(2010-07-06,06:00:00)(0)(0)(14)(CRC Ok)");
            archiveData.put(makeDate("2010-09-01,06:00:00"), "(24874)(24)(2010-09-01,06:00:00)(1391735.1855)(1391735.1855)(32.6037)(2010-08-26,15:00:00)(0)(769.5173)(2010-09-01,06:00:00)(0)(2909341)(2909341)(37.4)(2010-08-26,15:00:00)(0)(865.4)(2010-08-27,06:00:00)(0)(0)(0)(CRC Ok)");
            archiveData.put(makeDate("2010-10-01,06:00:00"), "(26630)(25)(2010-10-01,06:00:00)(1414683.1152)(1414683.1152)(32.6158)(2010-09-29,23:00:00)(0)(790.6824)(2010-09-17,06:00:00)(0)(2935297.65)(2935297.65)(36.24)(2010-09-15,16:00:00)(0)(900.02)(2010-09-17,06:00:00)(0)(0)(14)(CRC Ok)");
            archiveData.put(makeDate("2010-11-01,06:00:00"), "(27903)(26)(2010-11-01,06:00:00)(1438454.8616)(1438454.8616)(32.6647)(2010-10-26,08:00:00)(0)(789.6744)(2010-10-31,06:00:00)(0)(2962117.65)(2962117.65)(36)(2010-11-01,06:00:00)(0)(900)(2010-10-31,06:00:00)(0)(0)(14)(CRC Ok)");
            archiveData.put(makeDate("2010-12-01,06:00:00"), "(28902)(27)(2010-12-01,06:00:00)(1461328.6922)(1461328.6922)(32.1564)(2010-11-28,08:00:00)(0)(770.1637)(2010-11-20,06:00:00)(0)(2988037.65)(2988037.65)(36)(2010-12-01,06:00:00)(0)(864)(2010-12-01,06:00:00)(0)(0)(14)(CRC Ok)");
            archiveData.put(makeDate("2011-01-01,06:00:00"), "(29904)(28)(2011-01-01,06:00:00)(1485112.756)(1485112.756)(32.6143)(2010-12-26,08:00:00)(0)(779.6518)(2010-12-27,06:00:00)(0)(3014821.65)(3014821.65)(36)(2011-01-01,06:00:00)(0)(864)(2011-01-01,06:00:00)(0)(0)(14)(CRC Ok)");
            archiveData.put(makeDate("2011-02-01,06:00:00"), "(30888)(29)(2011-02-01,06:00:00)(1509023.2078)(1509023.2078)(32.6657)(2011-01-21,09:00:00)(0)(781.2835)(2011-01-22,06:00:00)(0)(3041605.65)(3041605.65)(36)(2011-02-01,06:00:00)(0)(864)(2011-02-01,06:00:00)(0)(0)(14)(CRC Ok)");
            archiveData.put(makeDate("2011-03-01,06:00:00"), "(31757)(30)(2011-03-01,06:00:00)(1530590.9722)(1530590.9722)(32.646)(2011-02-02,08:00:00)(0)(782.4728)(2011-02-03,06:00:00)(0)(3065797.65)(3065797.65)(36.01)(2011-02-28,18:00:00)(0)(864.01)(2011-02-22,06:00:00)(0)(0)(14)(CRC Ok)");
            archiveData.put(makeDate("2011-04-01,06:00:00"), "(32673)(31)(2011-04-01,06:00:00)(1554410.0513)(1554410.0513)(32.8132)(2011-03-07,09:00:00)(0)(781.2327)(2011-03-08,06:00:00)(0)(3092545.65)(3092545.65)(36.01)(2011-03-01,12:00:00)(0)(864)(2011-04-01,06:00:00)(0)(0)(14)(CRC Ok)");
        }

        if (archiveInstance == 2) {
            // (GONr)(AONr)(Zeit)(Qn)(Zeit)(Stat)(Qn)(Zeit)(Stat)(Qb)(Zeit)(Stat)(Qb)(Zeit)(Stat)(p.Mon)(p.Mon)(Zeit)(Stat)(p.Mon)(Zeit)(Stat)(T.Mon)(T.Mon)(Zeit)(Stat)(T.Mon)(Zeit)(Stat)(K.Mon)(Z.Mon)(St.7)(St.6)(St.8)(St.5)(Check)
            // archive type 34
            units = "()()()(m3|h)()()(m3|h)()()(m3|h)()()(m3|h)()()( bar)( bar)()()( bar)()()({C)({C)()()({C)()()()()()()()()()";
            archiveData.put(makeDate("2010-02-01,06:00:00"), "(17417)(22)(2010-02-01,06:00:00)(35.21)(2010-01-27,06:36:16)(0)(32.11)(2010-01-01,14:20:04)(0)(36)(2010-02-01,06:00:00)(0)(36)(2010-02-01,06:00:00)(0)(0.9867)(1.01959)(2010-01-26,22:52:40)(0)(0.96336)(2010-01-29,20:00:32)(0)(14.38)(22.18)(2010-01-26,16:08:16)(0)(6.74)(2010-01-27,06:58:20)(0)(0.98803)(0.92294)(0)(0)(0)(0)(CRC Ok)");
            archiveData.put(makeDate("2010-03-01,06:00:00"), "(18440)(23)(2010-03-01,06:00:00)(33.62)(2010-02-01,06:05:02)(0)(30.95)(2010-02-28,11:29:52)(0)(36)(2010-03-01,06:00:00)(0)(36)(2010-03-01,06:00:00)(0)(0.98589)(1.00258)(2010-02-07,11:45:54)(0)(0.96543)(2010-02-28,11:29:52)(0)(27.75)(32.2)(2010-02-05,11:36:10)(0)(12.62)(2010-02-01,06:04:28)(0)(0.98856)(0.89939)(0)(0)(0)(0)(CRC Ok)");
            archiveData.put(makeDate("2010-04-01,06:00:00"), "(19393)(24)(2010-04-01,06:00:00)(33.54)(2010-03-07,08:52:54)(0)(31.15)(2010-03-30,16:39:10)(0)(36)(2010-04-01,06:00:00)(0)(36)(2010-04-01,06:00:00)(0)(0.99332)(1.01376)(2010-03-07,10:38:36)(0)(0.97546)(2010-03-30,15:57:04)(0)(27.13)(32.04)(2010-03-25,15:22:12)(0)(19.56)(2010-03-07,07:56:48)(0)(0.98804)(0.90264)(0)(0)(0)(0)(CRC Ok)");
            archiveData.put(makeDate("2010-05-01,06:00:00"), "(20337)(25)(2010-05-01,06:00:00)(33.31)(2010-04-09,06:20:38)(0)(31.19)(2010-04-30,02:50:36)(0)(36)(2010-05-01,06:00:00)(0)(36)(2010-05-01,06:00:00)(0)(0.99137)(1.01438)(2010-04-09,11:40:00)(0)(0.98933)(2010-04-01,06:25:08)(0)(31.15)(35.1)(2010-04-29,17:43:10)(0)(21.42)(2010-04-09,06:20:32)(0)(0.9882)(0.89904)(0)(0)(0)(0)(CRC Ok)");
            archiveData.put(makeDate("2010-06-01,06:00:00"), "(21319)(26)(2010-06-01,06:00:00)(32.37)(2010-05-21,09:09:40)(0)(31.03)(2010-05-26,20:18:08)(0)(36)(2010-06-01,06:00:00)(0)(36)(2010-06-01,06:00:00)(0)(0.99497)(1.01131)(2010-05-21,01:12:12)(0)(0.98305)(2010-05-06,14:35:00)(0)(32.76)(35.82)(2010-05-26,00:54:08)(0)(28.45)(2010-05-08,08:30:00)(0)(0.99117)(0.88102)(0)(0)(0)(0)(CRC Ok)");
            archiveData.put(makeDate("2010-07-01,06:00:00"), "(22289)(27)(2010-07-01,06:00:00)(32.2)(2010-06-21,06:46:36)(0)(30.83)(2010-06-10,21:46:28)(0)(36)(2010-07-01,06:00:00)(0)(36)(2010-07-01,06:00:00)(0)(0.98691)(1.00549)(2010-06-23,00:49:50)(0)(0.9855)(2010-06-10,21:05:38)(0)(36.63)(39.39)(2010-06-29,15:56:10)(0)(26.74)(2010-06-07,08:55:48)(0)(0.9882)(0.88133)(0)(0)(0)(0)(CRC Ok)");
            archiveData.put(makeDate("2010-08-01,06:00:00"), "(23544)(28)(2010-08-01,06:00:00)(35.33)(2010-07-08,09:52:18)(0)(30.34)(2010-07-14,18:48:58)(0)(40.49)(2010-07-08,09:52:18)(0)(36)(2010-08-01,06:00:00)(0)(0.98784)(1.00993)(2010-07-18,10:12:12)(0)(0.9845)(2010-07-14,19:20:04)(0)(32.36)(41.82)(2010-07-12,16:35:28)(0)(12.78)(2010-07-02,14:57:22)(0)(0.98817)(0.87524)(0)(0)(0)(0)(CRC Ok)");
            archiveData.put(makeDate("2010-09-01,06:00:00"), "(24874)(29)(2010-09-01,06:00:00)(32.32)(2010-08-09,08:21:58)(0)(30.95)(2010-08-23,18:26:54)(0)(36)(2010-09-01,06:00:00)(0)(36)(2010-09-01,06:00:00)(0)(0.98667)(1.0061)(2010-08-21,09:16:34)(0)(0.98404)(2010-08-27,07:14:10)(0)(30.75)(35.71)(2010-08-22,20:18:32)(0)(23.79)(2010-08-17,06:30:26)(0)(0.98803)(0.886)(0)(0)(0)(0)(CRC Ok)");
            archiveData.put(makeDate("2010-10-01,06:00:00"), "(26630)(30)(2010-10-01,06:00:00)(32.64)(2010-09-29,22:35:02)(0)(31.08)(2010-09-24,14:50:40)(0)(36)(2010-10-01,06:00:00)(0)(36)(2010-10-01,06:00:00)(0)(0.98877)(1.00825)(2010-09-13,13:45:22)(0)(0.98136)(2010-09-24,14:32:06)(0)(30.52)(34.68)(2010-09-23,14:01:08)(0)(23.79)(2010-09-30,06:48:16)(0)(0.98819)(0.89271)(0)(0)(0)(0)(CRC Ok)");
            archiveData.put(makeDate("2010-11-01,06:00:00"), "(27903)(31)(2010-11-01,06:00:00)(32.67)(2010-10-26,07:54:06)(0)(31.12)(2010-10-31,13:09:06)(0)(36)(2010-11-01,06:00:00)(0)(36)(2010-11-01,06:00:00)(0)(0.98608)(1.0117)(2010-10-26,11:27:48)(0)(0.98243)(2010-10-31,04:22:38)(0)(30.08)(34.52)(2010-10-08,14:06:22)(0)(25.26)(2010-10-21,07:28:10)(0)(0.98802)(0.89236)(0)(0)(0)(0)(CRC Ok)");
            archiveData.put(makeDate("2010-12-01,06:00:00"), "(28902)(32)(2010-12-01,06:00:00)(32.17)(2010-11-28,08:10:50)(0)(30.88)(2010-11-09,11:25:20)(0)(36)(2010-12-01,06:00:00)(0)(36)(2010-12-01,06:00:00)(0)(0.98473)(1.00664)(2010-11-05,09:31:00)(0)(0.95854)(2010-11-09,03:16:48)(0)(28.52)(32.66)(2010-11-01,12:12:34)(0)(24.16)(2010-11-28,08:07:18)(0)(0.9882)(0.88864)(0)(0)(0)(0)(CRC Ok)");
            archiveData.put(makeDate("2011-01-01,06:00:00"), "(29904)(33)(2011-01-01,06:00:00)(32.63)(2010-12-26,07:02:58)(0)(31.22)(2010-12-17,11:19:30)(0)(36)(2011-01-01,06:00:00)(0)(36)(2011-01-01,06:00:00)(0)(0.98986)(1.01223)(2010-12-10,11:33:10)(0)(0.97148)(2010-12-19,23:17:46)(0)(28.45)(32.55)(2010-12-13,12:36:56)(0)(26.09)(2010-12-05,08:07:02)(0)(0.98803)(0.89338)(0)(0)(0)(0)(CRC Ok)");
            archiveData.put(makeDate("2011-02-01,06:00:00"), "(30888)(34)(2011-02-01,06:00:00)(32.67)(2011-01-21,09:39:34)(0)(31.4)(2011-01-08,13:39:42)(0)(36)(2011-02-01,06:00:00)(0)(36)(2011-02-01,06:00:00)(0)(0.98917)(1.01629)(2011-01-21,09:58:44)(0)(0.98175)(2011-01-06,17:36:32)(0)(28.92)(32.27)(2011-01-08,13:31:42)(0)(26.92)(2011-01-23,20:26:56)(0)(0.98803)(0.89766)(0)(0)(0)(0)(CRC Ok)");
            archiveData.put(makeDate("2011-03-01,06:00:00"), "(31757)(35)(2011-03-01,06:00:00)(32.65)(2011-02-02,08:16:24)(0)(31.17)(2011-02-16,14:13:42)(0)(36)(2011-03-01,06:00:00)(0)(36)(2011-03-01,06:00:00)(0)(0.99159)(1.01422)(2011-02-02,11:33:36)(0)(0.98121)(2011-02-15,18:20:20)(0)(31.13)(33.34)(2011-02-09,13:49:56)(0)(26.81)(2011-02-21,08:10:40)(0)(0.98856)(0.89534)(0)(0)(0)(0)(CRC Ok)");
            archiveData.put(makeDate("2011-04-01,06:00:00"), "(32673)(36)(2011-04-01,06:00:00)(32.82)(2011-03-07,08:32:40)(0)(31.44)(2011-03-25,16:06:10)(0)(36)(2011-04-01,06:00:00)(0)(36)(2011-04-01,06:00:00)(0)(0.98966)(1.02173)(2011-03-23,08:51:18)(0)(0.98527)(2011-03-17,02:57:24)(0)(29.53)(34.17)(2011-03-25,14:44:04)(0)(26.92)(2011-03-07,07:01:58)(0)(0.98804)(0.896)(0)(0)(0)(0)(CRC Ok)");
        }
    }

    private Date makeDate(String rawDate) {
        return ClockObject.parseCalendar(rawDate, false, timeZone).getTime();
    }

    @Override
    public String getIntervals(Date from, Date to, int blockCount) {

        StringBuilder s = new StringBuilder();
        Date[] dates = archiveData.keySet().toArray(new Date[0]);
        Arrays.sort(dates);
        for (Date d: dates) {
            if ((d.getTime() >= from.getTime()) &&
                    (d.getTime() < to.getTime())) {
                        s.append(archiveData.get(d));
                        s.append("\n\r");
            }
        }
        return s.toString();
    }

    @Override
    public String getUnits(){
        return units;
    }

}
