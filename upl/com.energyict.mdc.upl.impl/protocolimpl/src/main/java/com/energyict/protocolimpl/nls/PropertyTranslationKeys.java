package com.energyict.protocolimpl.nls;

import com.energyict.mdc.upl.nls.TranslationKey;

/**
 * Contains all the {@link TranslationKey}s for the properties (and descriptions) of all the connection types.
 *
 * @author Rudi Vankeirsbilck (rudi)
 * @since 2016-12-27 (10:28)
 */
public enum PropertyTranslationKeys implements TranslationKey {
    SEVC_ADDRESS("upl.property.sevc.address", "DeviceId"),
    SEVC_ADDRESS_DESCRIPTION("upl.property.sevc.address.description", "DeviceId"),
    SEVC_PASSWORD("upl.property.sevc.password", "Password"),
    SEVC_PASSWORD_DESCRIPTION("upl.property.sevc.password.description", "Password"),
    SEVC_TIMEOUT("upl.property.sevc.timeout", "Timeout"),
    SEVC_TIMEOUT_DESCRIPTION("upl.property.sevc.timeout.description", "Timeout"),
    SEVC_RETRIES("upl.property.sevc.retries", "Retries"),
    SEVC_RETRIES_DESCRIPTION("upl.property.sevc.retries.description", "Retries"),
    SEVC_ROUNDTRIPCORRECTION("upl.property.sevc.roundtripCorrection", "Roundtrip correction"),
    SEVC_ROUNDTRIPCORRECTION_DESCRIPTION("upl.property.sevc.roundtripCorrection.description", "Roundtrip correction"),
    SEVC_NODEID("upl.property.sevc.nodeId", "Node address"),
    SEVC_NODEID_DESCRIPTION("upl.property.sevc.nodeId.description", "Node address"),
    SEVC_SERIALNUMBER("upl.property.sevc.serialNumber", "Serialnumber"),
    SEVC_SERIALNUMBER_DESCRIPTION("upl.property.sevc.serialNumber.description", "Serialnumber"),
    SEVC_FORCED_DELAY("upl.property.sevc.forcedDelay", "Forced delay"),
    SEVC_FORCED_DELAY_DESCRIPTION("upl.property.sevc.forcedDelay.description", "Forced delay"),
    DLMS_SECURITYLEVEL("upl.property.dlms.securityLevel", "Security level"),
    DLMS_SECURITYLEVEL_DESCRIPTION("upl.property.dlms.securityLevel.description", "Security level"),
    DLMS_CONNECTION("upl.property.dlms.connection", "Connection"),
    DLMS_CONNECTION_DESCRIPTION("upl.property.dlms.connection.description", "Connection"),
    DLMS_CLIENT_MAC_ADDRESS("upl.property.clientMacAddress", "Client MAC address"),
    DLMS_CLIENT_MAC_ADDRESS_DESCRIPTION("upl.property.clientMacAddress.description", "Client MAC address"),
    DLMS_SERVER_LOWER_MAC_ADDRESS("upl.property.dlms.serverLowerMacAddress", "Server lower MAC address"),
    DLMS_SERVER_LOWER_MAC_ADDRESS_DESCRIPTION("upl.property.dlms.serverLowerMacAddress.description", "Server lower MAC address"),
    DLMS_SERVER_UPPER_MAC_ADDRESS("upl.property.dlms.serverUpperMacAddress", "Server upper MAC address"),
    DLMS_SERVER_UPPER_MAC_ADDRESS_DESCRIPTION("upl.property.dlms.serverUpperMacAddress.description", "Server upper MAC address"),
    DLMS_ADDRESSING_MODE("upl.property.dlms.addressingMode", "Adressing mode"),
    DLMS_ALARM_STATUS_FLAG_CHANNEL("upl.property.dlms.AlarmStatusFlagChannel", "Alarm status flag channel"),
    DLMS_ADDRESSING_MODE_DESCRIPTION("upl.property.dlms.addressingMode.description", "Adressing mode"),
    DLMS_MANUFACTURER("upl.property.dlms.manufacturer", "Manufacturer"),
    DLMS_MANUFACTURER_DESCRIPTION("upl.property.dlms.manufacturer.description", "Manufacturer"),
    DLMS_IIAP_INVOKE_ID("upl.property.dlms.iiapInvokeId", "IIAP invoke id"),
    DLMS_IIAP_INVOKE_ID_DESCRIPTION("upl.property.dlms.iiapInvokeId.description", "IIAP invoke id"),
    DLMS_IIAP_PRIORITY("upl.property.dlms.iiapPriority", "IIAP priority"),
    DLMS_IIAP_PRIORITY_DESCRIPTION("upl.property.dlms.iiapPriority.description", "IIAP priority"),
    DLMS_IIAP_SERVICE_CLASS("upl.property.dlms.iiapServiceClass", "IIAP service class"),
    DLMS_IIAP_SERVICE_CLASS_DESCRIPTION("upl.property.dlms.iiapServiceClass.description", "IIAP service class"),
    DLMS_SERVICE_CLASS("upl.property.dlms.serviceClass", "Service claas"),
    DLMS_SERVICE_CLASS_DESCRIPTION("upl.property.dlms.serviceClass.description", "Service claas"),
    DLMS_CIPHERING_TYPE("upl.property.dlms.cipheringType", "Ciphering type"),
    DLMS_CIPHERING_TYPE_DESCRIPTION("upl.property.dlms.cipheringType.description", "Ciphering type"),
    DLMS_MAXIMUM_NUMBER_OF_CLOCKSET_TRIES("upl.property.dlms.maximumNumberOfClockSetTries", "Maximum number of clockset tries"),
    DLMS_MAXIMUM_NUMBER_OF_CLOCKSET_TRIES_DESCRIPTION("upl.property.dlms.maximumNumberOfClockSetTries.description", "Maximum number of clockset tries"),
    DLMS_CLOCKSET_ROUDTRIP_CORRECTION_TRESHOLD("upl.property.dlms.clocksetRoundTripCorrectionTreshold", "Clockset roundtrip correction treshold"),
    DLMS_CLOCKSET_ROUDTRIP_CORRECTION_TRESHOLD_DESCRIPTION("upl.property.dlms.clocksetRoundTripCorrectionTreshold.description", "Clockset roundtrip correction treshold"),
    DLMS_MAX_REC_PDU_SIZE("upl.property.dlms.maxRecPduSize", "Maximum rec pdu size"),
    DLMS_MAX_REC_PDU_SIZE_DESCRIPTION("upl.property.dlms.maxRecPduSize.description", "Maximum rec pdu size"),
    DLMS_ISKRA_WRAPPER("upl.property.dlms.iskra.wrapper", "ISKRA wrapper"),
    DLMS_ISKRA_WRAPPER_DESCRIPTION("upl.property.dlms.iskra.wrapper.description", "ISKRA wrapper"),
    DLMS_INCREMENT_FRAMECOUNTER_FOR_RETRIES("upl.property.dlms.incrementFramecounterForRetries", "Increment framecounter for retries"),
    DLMS_INCREMENT_FRAMECOUNTER_FOR_RETRIES_DESCRIPTION("upl.property.dlms.incrementFramecounterForRetries.description", "Increment framecounter for retries"),
    DLMS_ADDRESS("upl.property.dlms.address", "DeviceId"),
    DLMS_ADDRESS_DESCRIPTION("upl.property.dlms.address.description", "DeviceId"),
    DLMS_PASSWORD("upl.property.dlms.password", "Password"),
    DLMS_PASSWORD_DESCRIPTION("upl.property.dlms.password.description", "Password"),
    DLMS_TIMEOUT("upl.property.dlms.timeout", "Timeout"),
    DLMS_TIMEOUT_DESCRIPTION("upl.property.dlms.timeout.description", "Timeout"),
    DLMS_RETRIES("upl.property.dlms.retries", "Retries"),
    DLMS_RETRIES_DESCRIPTION("upl.property.dlms.retries.description", "Retries"),
    DLMS_ROUNDTRIPCORRECTION("upl.property.dlms.roundtripCorrection", "Roundtrip correction"),
    DLMS_ROUNDTRIPCORRECTION_DESCRIPTION("upl.property.dlms.roundtripCorrection.description", "Roundtrip correction"),
    DLMS_NODEID("upl.property.dlms.nodeId", "Node address"),
    DLMS_NODEID_DESCRIPTION("upl.property.dlms.nodeId.description", "Node address"),
    DLMS_SERIALNUMBER("upl.property.dlms.serialNumber", "Serialnumber"),
    DLMS_SERIALNUMBER_DESCRIPTION("upl.property.dlms.serialNumber.description", "Serialnumber"),
    DLMS_FORCED_DELAY("upl.property.dlms.forcedDelay", "Forced delay"),
    DLMS_FORCED_DELAY_DESCRIPTION("upl.property.dlms.forcedDelay.description", "Forced delay"),
    DLMS_FIRMWARE_VERSION("upl.property.dlms.firmwareVersion","Firmware version"),
    DLMS_FIRMWARE_VERSION_DESCRIPTION("upl.property.dlms.firmwareVersion.description","Firmware version"),
    DLMS_EXTENDED_LOGGING("upl.property.dlms.extendedLogging","Extended logging"),
    DLMS_EXTENDED_LOGGING_DESCRIPTION("upl.property.dlms.extendedLogging.description","Extended logging"),
    DLMS_USE_LEGACY_HDLC_CONNECTION("upl.property,dlms.useLegacyHdlcConnection","Use legacy HDLC connection"),
    DLMS_USE_LEGACY_HDLC_CONNECTION_DESCRIPTION("upl.property,dlms.useLegacyHdlcConnection.description","Use legacy HDLC connection"),
    DLMS_REQUEST_TIME_ZONE("upl.property.dlms.requestTimezone", "Request timezone"),
    DLMS_REQUEST_TIME_ZONE_DESCRIPTION("upl.property.dlms.requestTimezone", "Request timezone"),
    DLMS_REQUEST_CLOCK_OBJECT("upl.property.dlms.requestClockObject", "Request clock object"),
    DLMS_REQUEST_CLOCK_OBJECT_DESCRIPTION("upl.property.dlms.requestClockObject", "Request clock object"),
    DLMS_DELAY_AFTERFAIL("upl.property.dlms.delayAfterfail", "Delay afterfail"),
    DLMS_DELAY_AFTERFAIL_DESCRIPTION("upl.property.dlms.delayAfterfail.description", "Delay afterfail"),
    DLMS_MAX_PDU_SIZE("upl.property.dlms.maxPduSize", "Max PDU size" ),
    DLMS_MAX_PDU_SIZE_DESCRIPTION("upl.property.dlms.maxPduSize.description", "Max PDU size" ),
    DLMS_IFORCEDDELAY_BEFORE_SEND("upl.property.dlms.iForcedDelayBeforeSend", "Forced delay before send"),
    DLMS_IFORCEDDELAY_BEFORE_SEND_DESCRIPTION("upl.property.dlms.iForcedDelayBeforeSend.description", "Forced delay before send"),
    DLMS_CHANNEL_MAP("upl.property.dlms.channelMap", "Channel map"),
    DLMS_CHANNEL_MAP_DESCRIPTION("upl.property.dlms.channelMap.description", "Channel map"),
    DLMS_READ_SERIAL_NUMBER("upl.property.dlms.readSerialNumber", "Read serial number" ),
    DLMS_READ_SERIAL_NUMBER_DESCRIPTION("upl.property.dlms.readSerialNumber.description", "Read serial number" ),
    DLMS_SEND_PREFIX("upl.property.dlms.sendPrefix", "Send prefix" ),
    DLMS_SEND_PREFIX_DESCRIPTION("upl.property.dlms.sendPrefix.description", "Send prefix" ),
    DLMS_APPLY_TRANSFORMER_RATIOS("upl.property.dlms.applyTransformerRatios", "Apply transformer ratios"),
    DLMS_APPLY_TRANSFORMER_RATIOS_DESCRIPTION("upl.property.dlms.applyTransformerRatios.description", "Apply transformer ratios"),
    DLMS_LOAD_PROFILE_OBIS_CODE("upl.property.dlms.loadProfileObisCode", "Load profile obis code"),
    DLMS_LOAD_PROFILE_OBIS_CODE_DESCRIPTION("upl.property.dlms.loadProfileObisCode.description", "Load profile obis code"),
    DLMS_STATUS_FLAG_CHANNEL("upl.property.dlms.statusFlagChannel", "Status flag channel"),
    DLMS_STATUS_FLAG_CHANNEL_DESCRIPTION("upl.property.dlms.statusFlagChannel.description", "Status flag channel"),
    DLMS_TRANSP_CONNECT_TIME("upl.property.dlms.transpConnectTime", "Transparent connect time"),
    DLMS_TRANSP_BAUDRATE("upl.property.dlms.transpBaudrate", "Transparent baudrate"),
    DLMS_TRANSP_BAUDRATE_DESCRIPTION("upl.property.dlms.transpBaudrate.description", "Transparent baudrate"),
    DLMS_TRANSP_DATABITS("upl.property.dlms.transpDatabits", "Transparent databits"),
    DLMS_TRANSP_DATABITS_DESCRIPTION("upl.property.dlms.transpDatabits.description", "Transparent databits"),
    DLMS_TRANSP_STOPBITS("upl.property.dlms.transpStopbits", "Transparent stopbits"),
    DLMS_TRANSP_STOPBITS_DESCRIPTION("upl.property.dlms.transpStopbits.description", "Transparent stopbits"),
    DLMS_TRANSP_PARITY("upl.property.dlms.transpParity", "Transparent parity"),
    DLMS_TRANSP_PARITY_DESCRIPTION("upl.property.dlms.transpParity.description", "Transparent parity"),
    DLMS_PROFILE_TYPE("upl.property.dlms.profileType", "Profile type"),
    DLMS_PROFILE_TYPE_DESCRIPTION("upl.property.dlms.profileType.description", "Profile type"),
    DLMS_OPTICAL_BAUDRATE("upl.property.dlms.opticalBaudrate", "Optical baudrate"),
    DLMS_OPTICAL_BAUDRATE_DESCRIPTION("upl.property.dlms.opticalBaudrate.description", "Optical baudrate"),
    DLMS_LIMIT_MAX_NR_OF_DAYS("upl.property.dlms.limitMaxNrOfDays", "Limit max number of days"),
    DLMS_LIMIT_MAX_NR_OF_DAYS_DESCRIPTION("upl.property.dlms.limitMaxNrOfDays.description", "Limit max number of days"),
    DLMS_READ_PLC_LOG("upl.property.dlms.readPlcLog", "Read PLC log"),
    DLMS_READ_PLC_LOG_DESCRIPTION("upl.property.dlms.readPlcLog.description", "Read PLC log"),
    DLMS_READ_CACHE("upl.property.dlms.readCache", "Read cache" ),
    DLMS_READ_CACHE_DESCRIPTION("upl.property.dlms.readCache.description", "Read cache"),
    DLMS_INFORMATION_FIELD_SIZE("upl.property.dlms.informationFieldSize", "Information field size"),
    DLMS_INFORMATION_FIELD_SIZE_DESCRIPTION("upl.property.dlms.informationFieldSize.description", "Information field size"),
    DLMS_MAXIMUM_NUMBER_OF_MBUS_DEVICES("upl.property.dlms.maximumNumberOfMbusDevices", "Maximum number of MBUS devices"),
    DLMS_MAXIMUM_NUMBER_OF_MBUS_DEVICES_DESCRIPTION("upl.property.dlms.maximumNumberOfMbusDevices.description", "Maximum number of MBUS devices"),
    DLMS_MAX_APDU_SIZE("upl.property.dlms.maxApduSize", "Maximum APDU size"),
    DLMS_MAX_APDU_SIZE_DESCRIPTION("upl.property.dlms.maxApduSize.description", "Maximum APDU size"),
    DLMS_FORCE_DELAY("upl.property.dlms.forceDelay", "Force delay"),
    DLMS_FORCE_DELAY_DESCRIPTION("upl.property.dlms.forceDelay.description", "Force delay"),
    DLMS_CLOCKSET_ROUNDTRIP_CORRECTION_TRESHOLD("upl.property.dlms.roundtripCorrectionTreshold", "Clockset roundtrip correction treshold"),
    DLMS_CLOCKSET_ROUNDTRIP_CORRECTION_TRESHOLD_DESCRIPTION("upl.property.dlms.roundtripCorrectionTreshold.description", "Clockset roundtrip correction treshold"),
    DLMS_LOADPROFILEID("upl.property.dlms.loadProfileId", "Loadprofile id"),
    DLMS_LOADPROFILEID_DESCRIPTION("upl.property.dlms.loadProfileId.description", "Loadprofile id"),
    DLMS_SERVER_MAC_ADDRESS("upl.property.dlms.serverMacAddress", "Server MAC address"),
    DLMS_SERVER_MAC_ADDRESS_DESCRIPTION("upl.property.dlms.serverMacAddress.description", "Server MAC address"),
    DLMS_HLS_SECRET("upl.property.dlms.HLSSecret", "HLS secret"),
    DLMS_HLS_SECRET_DESCRIPTION("upl.property.dlms.HLSSecret.description", "HLS secret"),
    DLMS_DSMR_40_HEX_PASSWORD("upl.property.dlms.dsmr40HexPassword", "DSMR 40 HEX password"),
    DLMS_DSMR_40_HEX_PASSWORD_DESCRIPTION("upl.property.dlms.dsmr40HexPassword.description", "DSMR 40 HEX password"),
    DLMS_LAST_SEEN_DATE("upl.property.dlms.lastSeenDate", "Last seen date"),
    DLMS_LAST_SEEN_DATE_DESCRIPTION("upl.property.dlms.lastSeenDate.description", "Last seen date"),
    DLMS_AARQ_RETRIES("upl.property.dlms.aarqRetries", "AARQ retries"),
    DLMS_AARQ_RETRIES_DESCRIPTION("upl.property.dlms.aarqRetries.description", "AARQ retries"),
    DLMS_AARQ_TIMEOUT("upl.property.dlms.aarqTimeout", "AARQ timeout"),
    DLMS_AARQ_TIMEOUT_DESCRIPTION("upl.property.dlms.aarqTimeout.description", "AARQ timeout"),
    DLMS_VALIDATE_INVOKE_ID("upl.property.dlms.validateInvokeId", "Validate invoke id" ),
    DLMS_VALIDATE_INVOKE_ID_DESCRIPTION("upl.property.dlms.validateInvokeId.description", "Validate invoke id" ),
    DLMS_PSK("upl.property.dlms.psk", "PSK"),
    DLMS_PSK_DESCRIPTION("upl.property.dlms.psk.description", "PSK"),
    DLMS_DATATRANSPORT_AUTHENTICATIONKEY("upl.property.dlms.datatransportAuthenticationKey", "Datatransport authentication key"),
    DLMS_DATATRANSPORT_AUTHENTICATIONKEY_DESCRIPTION("upl.property.dlms.datatransportAuthenticationKey.description", "Datatransport authentication key"),
    DLMS_DATATRANSPORT_ENCRYPTIONKEY("upl.property.dlms.datatransportEncryptionKey", "Datatransport encryption key"),
    DLMS_DATATRANSPORT_ENCRYPTIONKEY_DESCRIPTION("upl.property.dlms.datatransportEncryptionKey.description", "Datatransport encryption key"),
    DLMS_DEVICETYPE("upl.property.dlms.deviceType", "Devicetype"),
    DLMS_DEVICETYPE_DESCRIPTION("upl.property.dlms.deviceType.description", "Devicetype"),
    DLMS_FW_IMAGE_NAME("upl.property.dlms.firmwareImageName", "Firmware image name"),
    DLMS_FW_IMAGE_NAME_DESCRIPTION("upl.property.dlms.firmwareImageName.description", "Firmware image name"),
    DLMS_FW_UPGRADE_POLLING_DELAY("upl.property.dlms.firmwareUpgradePollingDelay", "Firmware upgrade polling delay"),
    DLMS_FW_UPGRADE_POLLING_DELAY_DESCRIPTION("upl.property.dlms.firmwareUpgradePollingDelay.description", "Firmware upgrade polling delay"),
    DLMS_FW_UPGRADE_POLLING_RETRIES("upl.property.dlms.firmwareUpgradePollingRetries", "Firmware upgrade polling retries"),
    DLMS_FW_UPGRADE_POLLING_RETRIES_DESCRIPTION("upl.property.dlms.firmwareUpgradePollingRetries.description", "Firmware upgrade polling retries"),
    DLMS_EVENT_LOGBOOK_OBIS_CODE("upl.property.dlms.eventLogbookObisCode", "Event logbook OBIS code"),
    DLMS_EVENT_LOGBOOK_OBIS_CODE_DESCRIPTION("upl.property.dlms.eventLogbookObisCode.discription", "Event logbook OBIS code"),
    DLMS_CONNECTION_MODE("upl.property.dlms.connectionMode", "Connection mode"),
    DLMS_CONNECTION_MODE_DESCRIPTION("upl.property.dlms.connectionMode.description", "Connection mode"),
    EDMI_LOAD_SURVEY_NUMBER("upl.property.edmi.loadSurveyNumber", "Load survey number"),
    EDMI_LOAD_SURVEY_NUMBER_DESCRIPTION("upl.property.edmi.loadSurveyNumber.desription", "Load survey number"),
    EDMI_DISABLE_LOG_OFF("upl.property.edmi.disableLogOff", "Disable log off"),
    EDMI_DISABLE_LOG_OFF_DESCRIPTION("upl.property.edmi.disableLogOff.description", "Disable log off"),
    EDMI_PUSH_PROTOCOL("upl.property.edmi.pushProtocol", "Push protocol"),
    EDMI_PUSH_PROTOCOL_DESCRIPTION("upl.property.edmi.pushProtocol.description", "Push protocol"),
    EDMI_FULL_DEBUG("upl.property.edmi.fullDebug", "Full debug"),
    EDMI_FULL_DEBUG_DESCRIPTION("upl.property.edmi.fullDebug.description", "Full debug"),
    EDMI_TIMEOUT_KEY("upl.property.edmi.timeOutKey", "Timeout key" ),
    EDMI_TIMEOUT_KEY_DESCRIPTION("upl.property.edmi.timeOutKey.description", "Timeout key" ),
    EDMI_RETRIES_KEY("upl.property.edmi.retriesKey", "Retries key"),
    EDMI_RETRIES_KEY_DESCRIPTION("upl.property.edmi.retriesKey.description", "Retries key"),
    EMCO_ADDRESS("upl.property.edmi.emco.address", "Address"),
    EMCO_ADDRESS_DESCRIPTION("upl.property.edmi.emco.address.description", "Address"),
    IEC1107_ADDRESS("upl.property.iec1107.address", "DeviceId"),
    IEC1107_ADDRESS_DESCRIPTION("upl.property.iec1107.address.description", "DeviceId"),
    IEC1107_NODEID("upl.property.iec1107.nodeId", "Node Id"),
    IEC1107_NODEID_DESCRIPTION("upl.property.iec1107.nodeId.description", "Node Id"),
    IEC1107_OFFLINE_NODEID("upl.property.iec1107.offlineNodeId", "Offline Node Id"),
    IEC1107_OFFLINE_NODEID_DESCRIPTION("upl.property.iec1107.offlineNodeId.description", "Offline Node Id"),
    IEC1107_SERIALNUMBER("upl.property.iec1107.serialNumber", "Serialnumber"),
    IEC1107_SERIALNUMBER_DESCRIPTION("upl.property.iec1107.serialNumber.description", "Serialnumber"),
    IEC1107_PASSWORD("upl.property.iec1107.password", "Password"),
    IEC1107_PASSWORD_DESCRIPTION("upl.property.iec1107.password.description", "Password"),
    IEC1107_TIMEOUT("upl.property.iec1107.timeout", "Timeout"),
    IEC1107_TIMEOUT_DESCRIPTION("upl.property.iec1107.timeout.description", "Timeout"),
    IEC1107_RETRIES("upl.property.iec1107.retries", "Retries"),
    IEC1107_RETRIES_DESCRIPTION("upl.property.iec1107.retries.description", "Retries"),
    IEC1107_ROUNDTRIPCORRECTION("upl.property.iec1107.roundTripCorrection", "Roundtrip correction"),
    IEC1107_ROUNDTRIPCORRECTION_DESCRIPTION("upl.property.iec1107.roundTripCorrection.description", "Roundtrip correction"),
    IEC1107_CORRECTTIME("upl.property.iec1107.correctTime", "Correct time"),
    IEC1107_CORRECTTIME_DESCRIPTION("upl.property.iec1107.correctTime.description", "Correct time"),
    IEC1107_EXTENDED_LOGGING("upl.property.iec1107.extendedLogging", "Extended logging"),
    IEC1107_EXTENDED_LOGGING_DESCRIPTION("upl.property.iec1107.extendedLogging.description", "Extended logging"),
    IEC1107_SOFTWARE_7E1("upl.property.iec1107.software7E1", "Software 7E1"),
    IEC1107_SOFTWARE_7E1_DESCRIPTION("upl.property.iec1107.software7E1.description", "Software 7E1"),
    IEC1107_SECURITYLEVEL("upl.property.iec1107.securityLevel", "Security level"),
    IEC1107_SECURITYLEVEL_DESCRIPTION("upl.property.iec1107.securityLevel.description", "Security level"),
    IEC1107_ECHOCANCELLING("upl.property.iec1107.echoCancelling", "Echo cancelling"),
    IEC1107_ECHOCANCELLING_DESCRIPTION("upl.property.iec1107.echoCancelling.description", "Echo cancelling"),
    IEC1107_FORCED_DELAY("upl.property.iec1107.forcedDelay", "Forced delay"),
    IEC1107_FORCED_DELAY_DESCRIPTION("upl.property.iec1107.forcedDelay.description", "Forced delay"),
    IEC1107_FORCEDELAY("upl.property.iec1107.forceDelay", "Force delay"),
    IEC1107_FORCEDELAY_DESCRIPTION("upl.property.iec1107.forceDelay.description", "Force delay"),
    IEC1107_PROFILEINTERVAL("upl.property.iec1107.profileInterval", "Profile interval"),
    IEC1107_PROFILEINTERVAL_DESCRIPTION("upl.property.iec1107.profileInterval.description", "Profile interval"),
    IEC1107_CHANNEL_MAP("upl.property.iec1107.channelMap", "Channel map"),
    IEC1107_CHANNEL_MAP_DESCRIPTION("upl.property.iec1107.channelMap.description", "Channel map"),
    IEC1107_DATE_FORMAT("upl.property.iec1107.dateFormat", "Date format"),
    IEC1107_DATE_FORMAT_DESCRIPTION("upl.property.iec1107.dateFormat.description", "Date format"),
    IEC1107_BILLING_DATE_FORMAT("upl.property.iec1107.billingDateFormat", "Billingdate format"),
    IEC1107_BILLING_DATE_FORMAT_DESCRIPTION("upl.property.iec1107.billingDateFormat.description", "Billingdate format"),
    IEC1107_REQUESTHEADER("upl.property.iec1107.requestHeader", "Request header"),
    IEC1107_REQUESTHEADER_DESCRIPTION("upl.property.iec1107.requestHeader.description", "Request header"),
    IEC1107_SCALER("upl.property.iec1107.scaler", "Scaler"),
    IEC1107_SCALER_DESCRIPTION("upl.property.iec1107.scaler.description", "Scaler"),
    IEC1107_DATAREADOUT("upl.property.iec1107.dataReadOut", "Data readout"),
    IEC1107_DATAREADOUT_DESCRIPTION("upl.property.iec1107.dataReadOut.description", "Data readout"),
    IEC1107_VDEWCOMPATIBLE("upl.property.iec1107.vdewCompatible", "VDEW compatible"),
    IEC1107_VDEWCOMPATIBLE_DESCRIPTION("upl.property.iec1107.vdewCompatible.description", "VDEW compatible"),
    IEC1107_LOADPROFILE_NUMBER("upl.property.iec1107.loadProfileNumber", "Loadprofile number"),
    IEC1107_LOADPROFILE_NUMBER_DESCRIPTION("upl.property.iec1107.loadProfileNumber.description", "Loadprofile number"),
    IEC1107_RS485RTU_PLUS_SERVER("upl.property.iec1107.RS485RtuPlusServer", "RS485 RTU plus server"),
    IEC1107_RS485RTU_PLUS_SERVER_DESCRIPTION("upl.property.iec1107.RS485RtuPlusServer.description", "RS485 RTU plus server"),
    IEC1107_LIMIT_MAX_NR_OF_DAYS("upl.property.iec1107.limitMaxNrOfDays", "Limit max nr of days"),
    IEC1107_LIMIT_MAX_NR_OF_DAYS_DESCRIPTION("upl.property.iec1107.limitMaxNrOfDays.description", "Limit max nr of days"),
    IEC1107_INVERT_BILLING_ORDER("upl.property.iec1107.invertBillingOrder", "Invert billing order"),
    IEC1107_INVERT_BILLING_ORDER_DESCRIPTION("upl.property.iec1107.invertBillingOrder.description", "Invert billing order"),
    IEC1107_USE_EQUIPMENT_IDENTIFIER_AS_SERIAL("upl.property.iec1107.useEquipmentIdentifierAsSerial", "Use equipment identifier as serial"),
    IEC1107_USE_EQUIPMENT_IDENTIFIER_AS_SERIAL_DESCRIPTION("upl.property.iec1107.useEquipmentIdentifierAsSerial.description", "Use equipment identifier as serial"),
    IEC1107_FAIL_ON_UNIT_MISMATCH("upl.property.iec1107.failOnUnitMismatch", "Fail on unit mismatch"),
    IEC1107_FAIL_ON_UNIT_MISMATCH_DESCRIPTION("upl.property.iec1107.failOnUnitMismatch.description", "Fail on unit mismatch"),
    IEC1107_HALF_DUPLEX("upl.property.iec1107.halfDuplex", "Half duplex"),
    IEC1107_HALF_DUPLEX_DESCRIPTION("upl.property.iec1107.halfDuplex.description", "Half duplex"),
    READ_LOGBOOK_AND_LP_COMBINED("upl.property.iec1107.readLogbookAndLpCombined", "Read logbook and load profile combined"),
    READ_LOGBOOK_AND_LP_COMBINED_DESCRIPTION("upl.property.iec1107.readLogbookAndLpCombined.description", "Read logbook and load profile combined"),
    IEC1107_DELAY_BEFORE_CONNECT("upl.property.iec1107.delayBeforeConnect", "Delay before connect"),
    IEC1107_DELAY_BEFORE_CONNECT_DESCRIPTION("upl.property.iec1107.delayBeforeConnect.description", "Delay before connect"),
    IEC1107_COMPATIBLE("upl.property.iec1107.compatible", "IEC1107 compatible"),
    IEC1107_COMPATIBLE_DESCRIPTION("upl.property.iec1107.compatible.description", "IEC1107 compatible"),
    IEC1107_DISABLE_LOG_OFF_COMMAND("upl.property.iec1107.disableLogOffCommand", "Disable logoff command"),
    IEC1107_DISABLE_LOG_OFF_COMMAND_DESCRIPTION("upl.property.iec1107.disableLogOffCommand.description", "Disable logoff command"),
    IEC1107_EXTENDED_PROFILE_STATUS("upl.property.iec1107.extendedProfileStatus", "Extended profile status"),
    IEC1107_EXTENDED_PROFILE_STATUS_DESCRIPTION("upl.property.iec1107.extendedProfileStatus.description", "Extended profile status"),
    IEC1107_USE_SELECTIVE_ACCESS_BY_FROM_AND_TO_DATE("upl.property.iec1107.useSelectiveAccessByFromAndToDate", "Use selective access by from and to date"),
    IEC1107_USE_SELECTIVE_ACCESS_BY_FROM_AND_TO_DATE_DESCRIPTION("upl.property.iec1107.useSelectiveAccessByFromAndToDate.description", "Use selective access by from and to date"),
    IEC1107_FIRMWARE_VERSION("upl.property.iec1107.firmwareVersion", "Firmware version"),
    IEC1107_FIRMWARE_VERSION_DESCRIPTION("upl.property.iec1107.firmwareVersion.description", "Firmware version"),
    IEC1107_MAX_NR_OF_DAYS_PROFILE_DATA("upl.property.iec1107.maxNrOFDaysProfileData", "Max number of days profile data"),
    IEC1107_PROFILE_REQUEST_BLOCK_SIZE("upl.property.iec1107.ProfileRequestBlockSize", "Profile request block size"),
    IEC1107_MAX_NR_OF_DAYS_PROFILE_DATA_DESCRIPTION("upl.property.iec1107.maxNrOFDaysProfileData.description", "Max number of days profile data"),
    IEC1107_METER_TYPE("upl.property.iec1107.meterType", "Metertype"),
    IEC1107_METER_TYPE_DESCRIPTION("upl.property.iec1107.meterType.description", "Metertype"),
    IEC1107_BREAK_BEFORE_CONNECT("upl.property.iec1107.breakBeforeConnect", "Break before connect"),
    IEC1107_BREAK_BEFORE_CONNECT_DESCRIPTION("upl.property.iec1107.breakBeforeConnect.description", "Break before connect"),
    IEC1107_ADDRESSING_MODE("upl.property.iec1107.addressingMode", "Addressing mode"),
    IEC1107_ADDRESSING_MODE_DESCRIPTION("upl.property.iec1107.addressingMode.description", "Addressing mode"),
    IEC1107_CONNECTION("upl.property.iec1107.connection", "Connection"),
    IEC1107_CONNECTION_DESCRIPTION("upl.property.iec1107.connection.description", "Connection"),
    IEC1107_DELAY_AFTER_FAIL("upl.property.iec1107.delayAfterFail", "Delay after fail"),
    IEC1107_DELAY_AFTER_FAIL_DESCRIPTION("upl.property.iec1107.delayAfterFail.description", "Delay after fail"),
    IEC1107_REQUEST_TIME_ZONE("upl.property.iec1107.requestTimeZone", "Request time zone"),
    IEC1107_REQUEST_TIME_ZONE_DESCRIPTION("upl.property.iec1107.requestTimeZone.description", "Request time zone"),
    IEC1107_REQUEST_CLOCK_OBJECT("upl.property.iec1107.requestClockObject", "Request clock object"),
    IEC1107_REQUEST_CLOCK_OBJECT_DESCRIPTION("upl.property.iec1107.requestClockObject.description", "Request clock object"),
    IEC1107_CLIENT_MAC_ADDRESS("upl.property.iec1107.clientMacAddress", "Client MAC address"),
    IEC1107_CLIENT_MAC_ADDRESS_DESCRIPTION("upl.property.iec1107.clientMacAddress.description", "Client MAC address"),
    IEC1107_SERVER_UPPER_MAC_ADDRESS("upl.property.iec1107.serverUpperMacAddress", "Server upper MAC address"),
    IEC1107_SERVER_UPPER_MAC_ADDRESS_DESCRIPTION("upl.property.iec1107.serverUpperMacAddress.description", "Server upper MAC address"),
    IEC1107_SERVER_LOWER_MAC_ADDRESS("upl.property.iec1107.serverLowerMacAddress", "Server lower MAG address"),
    IEC1107_SERVER_LOWER_MAC_ADDRESS_DESCRIPTION("upl.property.iec1107.serverLowerMacAddress.description", "Server lower MAG address"),
    IEC1107_SCRIPTING_ENABLED("upl.property.iec1107.scriptingEnables", "Scripting enabled" ),
    IEC1107_SCRIPTING_ENABLED_DESCRIPTION("upl.property.iec1107.scriptingEnables.description", "Scripting enabled" ),
    IEC1107_INSTRUMENTATION_PROFILE_MODE("upl.property.iec1107.instrumentationProfileMode", "Instrumentation profile mode"),
    IEC1107_INSTRUMENTATION_PROFILE_MODE_DESCRIPTION("upl.property.iec1107.instrumentationProfileMode.description", "Instrumentation profile mode"),
    IEC1107_FIXED_PROFILE_TIMEZONE("upl.property.iec1107.fixedProfileTimezone", "Fixed profile timezone"),
    IEC1107_FIXED_PROFILE_TIMEZONE_DESCRIPTION("upl.property.iec1107.fixedProfileTimezone.description", "Fixed profile timezone"),
    IEC1107_READ_USER_LOGBOOK("upl.property.iec1107.readUserLogbook", "Read user logbook"),
    IEC1107_READ_USER_LOGBOOK_DESCRIPTION("upl.property.iec1107.readUserLogbook.description", "Read user logbook"),
    IEC1107_RECONNECT_AFTER_R6_READ("upl.property.iec1107.reconnectAfterR6Read", "Reconnect after R6 read"),
    IEC1107_RECONNECT_AFTER_R6_READ_DESCRIPTION("upl.property.iec1107.reconnectAfterR6Read.description", "Reconnect after R6 read"),
    IEC1107_READ_CURRENT_DAY("upl.property.iec1107.readCurrentDay", "Read current day"),
    IEC1107_READ_CURRENT_DAY_DESCRIPTION("upl.property.iec1107.readCurrentDay.description", "Read current day"),
    IEC1107_OPUS("upl.property.eic1107.opus", "OPUS"),
    IEC1107_OPUS_DESCRIPTION("upl.property.eic1107.opus.description", "OPUS"),
    IEC870_ADDRESS("upl.property.iec870.address", "DeviceId"),
    IEC870_ADDRESS_DESCRIPTION("upl.property.iec870.address.description", "DeviceId"),
    IEC870_PASSWORD("upl.property.iec870.password", "Password"),
    IEC870_PASSWORD_DESCRIPTION("upl.property.iec870.password.description", "Password"),
    IEC870_TIMEOUT("upl.property.iec870.timeout", "Timeout"),
    IEC870_TIMEOUT_DESCRIPTION("upl.property.iec870.timeout.description", "Timeout"),
    IEC870_RETRIES("upl.property.iec870.retries", "Retries"),
    IEC870_RETRIES_DESCRIPTION("upl.property.iec870.retries.description", "Retries"),
    IEC870_ROUNDTRIPCORRECTION("upl.property.iec870.roundTripCorrection", "Roundtrip correction"),
    IEC870_ROUNDTRIPCORRECTION_DESCRIPTION("upl.property.iec870.roundTripCorrection.description", "Roundtrip correction"),
    IEC870_CORRECTTIME("upl.property.iec870.correctTime", "Correct time"),
    IEC870_CORRECTTIME_DESCRIPTION("upl.property.iec870.correctTime.description", "Correct time"),
    IEC870_PROFILEINTERVAL("upl.property.iec870.profileInterval", "Profile interval"),
    IEC870_PROFILEINTERVAL_DESCRIPTION("upl.property.iec870.profileInterval.description", "Profile interval"),
    IEC870_CHANNEL_MAP("upl.property.iec870.channelMap", "Channel map"),
    IEC870_CHANNEL_MAP_DESCRIPTION("upl.property.iec870.channelMap.description", "Channel map"),
    IEC870_SERIALNUMBER("upl.property.iec870.serialNumber", "Serialnumber"),
    IEC870_SERIALNUMBER_DESCRIPTION("upl.property.iec870.serialNumber.description", "Serialnumber"),
    IEC870_METER_TYPE("upl.property.iec870.meterType", "Metertype"),
    IEC870_METER_TYPE_DESCRIPTION("upl.property.iec870.meterType.description", "Metertype"),
    IEC870_NODEID("upl.property.iec870.nodeId", "Node Id"),
    IEC870_NODEID_DESCRIPTION("upl.property.iec870.nodeId.description", "Node Id"),
    IEC870_EXTENDED_LOGGING("upl.property.iec870.extendedLogging", "Extended logging"),
    IEC870_EXTENDED_LOGGING_DESCRIPTION("upl.property.iec870.extendedLogging.description", "Extended logging"),
    IEC870_FETCH_PROGRAM_PROFILE("upl.property.iec870.fetchProgramProfile", "Fetch program profile"),
    IEC870_FETCH_PROGRAM_PROFILE_DESCRIPTION("upl.property.iec870.fetchProgramProfile.description", "Fetch program profile"),
    IEC870_CUMULATIVE_PROFILE("upl.property.iec870.cumulativeProfile", "Cumulative profile"),
    IEC870_CUMULATIVE_PROFILE_DESCRIPTION("upl.property.iec870.cumulativeProfile.description", "Cumulative profile"),
    KENDA_NODEID("upl.property.kenda.nodeId", "Node id"),
    KENDA_NODEID_DESCRIPTION("upl.property.kenda.nodeId.description", "Node id"),
    KENDA_CHANNEL_MAP("upl.property.kenda.channelMap", "Channel map"),
    KENDA_CHANNEL_MAP_DESCRIPTION("upl.property.kenda.channelMap.description", "Channel map"),
    KENDA_TIMEOUT("upl.property.kenda.timeout", "Timeout"),
    KENDA_TIMEOUT_DESCRIPTION("upl.property.kenda.timeout.description", "Timeout"),
    KENDA_RETRY("upl.property.kenda.retry", "Retry"),
    KENDA_RETRY_DESCRIPTION("upl.property.kenda.retry.description", "Retry"),
    KENDA_DELAY_AFTER_CONNECT("upl.property.delayAfterConnect", "Delay after connect"),
    KENDA_DELAY_AFTER_CONNECT_DESCRIPTION("upl.property.delayAfterConnect.description", "Delay after connect"),
    LANDISGYR_NODEID("upl.property.landisgyr.nodeId", "Node Id"),
    LANDISGYR_NODEID_DESCRIPTION("upl.property.landisgyr.nodeId.description", "Node Id"),
    LANDISGYR_SERIALNUMBER("upl.property.landisgyr.serialNumber", "Serialnumber"),
    LANDISGYR_SERIALNUMBER_DESCRIPTION("upl.property.landisgyr.serialNumber.description", "Serialnumber"),
    LANDISGYR_PASSWORD("upl.property.landisgyr.password", "Password"),
    LANDISGYR_PASSWORD_DESCRIPTION("upl.property.landisgyr.password.description", "Password"),
    LANDISGYR_TIMEOUT("upl.property.landisgyr.timeout", "Timeout"),
    LANDISGYR_TIMEOUT_DESCRIPTION("upl.property.landisgyr.timeout.description", "Timeout"),
    LANDISGYR_RETRIES("upl.property.landisgyr.retries", "Retries"),
    LANDISGYR_RETRIES_DESCRIPTION("upl.property.landisgyr.retries.description", "Retries"),
    LANDISGYR_ROUNDTRIPCORRECTION("upl.property.landisgyr.roundTripCorrection", "Roundtrip correction"),
    LANDISGYR_ROUNDTRIPCORRECTION_DESCRIPTION("upl.property.landisgyr.roundTripCorrection.description", "Roundtrip correction"),
    LANDISGYR_CORRECTTIME("upl.property.landisgyr.correctTime", "Correct time"),
    LANDISGYR_CORRECTTIME_DESCRIPTION("upl.property.landisgyr.correctTime.description", "Correct time"),
    LANDISGYR_EXTENDED_LOGGING("upl.property.landisgyr.extendedLogging", "Extended logging"),
    LANDISGYR_EXTENDED_LOGGING_DESCRIPTION("upl.property.landisgyr.extendedLogging.description", "Extended logging"),
    LANDISGYR_NODE_PREFIX("upl.property.landisgyr.nodePrefix", "Node prefix"),
    LANDISGYR_NODE_PREFIX_DESCRIPTION("upl.property.landisgyr.nodePrefix.description", "Node prefix"),
    LANDISGYR_FORCE_DELAY("upl.property.landisgyr.forceDelay", "Force delay"),
    LANDISGYR_FORCE_DELAY_DESCRIPTION("upl.property.landisgyr.forceDelay.description", "Force delay"),
    LANDISGYR_SHOULD_DISCONNECT("upl.property.landisgyr.shouldDisconnect", "Should disconnect"),
    LANDISGYR_SHOULD_DISCONNECT_DESCRIPTION("upl.property.landisgyr.shouldDisconnect.description", "Should disconnect"),
    LANDISGYR_READ_UNIT1_SERIALNUMBER("upl.property.landisgyr.readUnit1SerialNumber", "Read unit 1 serialnumber"),
    LANDISGYR_READ_UNIT1_SERIALNUMBER_DESCRIPTION("upl.property.landisgyr.readUnit1SerialNumber.description", "Read unit 1 serialnumber"),
    LANDISGYR_READ_PROFILE_DATA_BEFORE_CONFIG_CHANGE("upl.property.landisgyr.readProfileDataBeforeConfigChange", "Read profile data before config change"),
    LANDISGYR_READ_PROFILE_DATA_BEFORE_CONFIG_CHANGE_DESCRIPTION("upl.property.landisgyr.readProfileDataBeforeConfigChange.description", "Read profile data before config change"),
    METCOM_ADDRESS("upl.property.metcom.address", "DeviceId"),
    METCOM_ADDRESS_DESCRIPTION("upl.property.metcom.address.description", "DeviceId"),
    METCOM_PASSWORD("upl.property.metcom.password", "Password"),
    METCOM_PASSWORD_DESCRIPTION("upl.property.metcom.password.description", "Password"),
    METCOM_NODEID("upl.property.metcom.nodeId", "Node Id"),
    METCOM_NODEID_DESCRIPTION("upl.property.metcom.nodeId.description", "Node Id"),
    METCOM_TIMEOUT("upl.property.metcom.timeout", "Timeout"),
    METCOM_TIMEOUT_DESCRIPTION("upl.property.metcom.timeout.description", "Timeout"),
    METCOM_RETRIES("upl.property.metcom.retries", "Retries"),
    METCOM_RETRIES_DESCRIPTION("upl.property.metcom.retries.description", "Retries"),
    METCOM_ROUNDTRIPCORRECTION("upl.property.metcom.roundTripCorrection", "Roundtrip correction"),
    METCOM_ROUNDTRIPCORRECTION_DESCRIPTION("upl.property.metcom.roundTripCorrection.description", "Roundtrip correction"),
    METCOM_PROFILEINTERVAL("upl.property.metcom.profileInterval", "Profile interval"),
    METCOM_PROFILEINTERVAL_DESCRIPTION("upl.property.metcom.profileInterval.description", "Profile interval"),
    METCOM_ECHOCANCELLING("upl.property.metcom.echoCancelling", "Echo cancelling"),
    METCOM_ECHOCANCELLING_DESCRIPTION("upl.property.metcom.echoCancelling.description", "Echo cancelling"),
    METCOM_HALF_DUPLEX("upl.property.metcom.halfDuplex", "Half duplex"),
    METCOM_HALF_DUPLEX_DESCRIPTION("upl.property.metcom.halfDuplex.description", "Half duplex"),
    METCOM_FORCED_DELAY("upl.property.metcom.forcedDelay", "Forced delay"),
    METCOM_FORCED_DELAY_DESCRIPTION("upl.property.metcom.forcedDelay.description", "Forced delay"),
    METCOM_CHANNEL_MAP("upl.property.metcom.channelMap", "Channel map"),
    METCOM_CHANNEL_MAP_DESCRIPTION("upl.property.metcom.channelMap.description", "Channel map"),
    METCOM_EXTENDED_LOGGING("upl.property.metcom.extendedLogging", "Extended logging"),
    METCOM_EXTENDED_LOGGING_DESCRIPTION("upl.property.metcom.extendedLogging.description", "Extended logging"),
    METCOM_SOFTWARE_7E1("upl.property.metcom.software7E1", "Software 7E1"),
    METCOM_SOFTWARE_7E1_DESCRIPTION("upl.property.metcom.software7E1.description", "Software 7E1"),
    METCOM_METER_CLASS("upl.property.metcom.meterClass", "Meter class"),
    METCOM_METER_CLASS_DESCRIPTION("upl.property.metcom.meterClass.description", "Meter class"),
    METCOM_REMOVE_POWER_OUTAGE_INTERVALS("upl.property.metcom.removePowerOutageIntervals", "Remove power outage intervals"),
    METCOM_REMOVE_POWER_OUTAGE_INTERVALS_DESCRIPTION("upl.property.metcom.removePowerOutageIntervals.description", "Remove power outage intervals"),
    METCOM_INTERVAL_STATUS_BEHAVIOUR("upl.property.metcom.intervalStatusBehaviour", "Interval status behaviour"),
    METCOM_INTERVAL_STATUS_BEHAVIOUR_DESCRIPTION("upl.property.metcom.intervalStatusBehaviour.description", "Interval status behaviour"),
    METCOM_LOGBOOK_READ_COMMAND("upl.property.metcom.logbookReadCommand", "Logbook read command"),
    METCOM_LOGBOOK_READ_COMMAND_DESCRIPTION("upl.property.metcom.logbookReadCommand.description", "Logbook read command"),
    METCOM_AUTOBILLING_POINT_NR_OF_DIGITS("upl.property.metcom.autobillingPointNrOfDigits", "Autobilling point nr of digits" ),
    METCOM_AUTOBILLING_POINT_NR_OF_DIGITS_DESCRIPTION("upl.property.metcom.autobillingPointNrOfDigits.description", "Autobilling point nr of digits" ),
    METCOM_TIME_SET_METHOD("upl.property.metcom.timeSetMethod", "Time set method"),
    METCOM_TIME_SET_METHOD_DESCRIPTION("upl.property.metcom.timeSetMethod.description", "Time set method"),
    MODBUS_PASSWORD("upl.property.modbus.password", "Password"),
    MODBUS_PASSWORD_DESCRIPTION("upl.property.modbus.password.description", "Password"),
    MODBUS_LOADPROFILE_NUMBER("upl.property.modbus.loadProfileNumber", "Loadprofile number"),
    MODBUS_LOADPROFILE_NUMBER_DESCRIPTION("upl.property.modbus.loadProfileNumber.description", "Loadprofile number"),
    PACT_ADDRESS("upl.property.pact.address", "DeviceId"),
    PACT_ADDRESS_DESCRIPTION("upl.property.pact.address.description", "DeviceId"),
    PACT_PASSWORD("upl.property.pact.password", "Password"),
    PACT_PASSWORD_DESCRIPTION("upl.property.pact.password.description", "Password"),
    PACT_SERIALNUMBER("upl.property.pact.serialNumber", "Serialnumber"),
    PACT_SERIALNUMBER_DESCRIPTION("upl.property.pact.serialNumber.description", "Serialnumber"),
    PACT_TIMEOUT("upl.property.pact.timeout", "Timeout"),
    PACT_TIMEOUT_DESCRIPTION("upl.property.pact.timeout.description", "Timeout"),
    PACT_RETRIES("upl.property.pact.retries", "Retries"),
    PACT_RETRIES_DESCRIPTION("upl.property.pact.retries.description", "Retries"),
    PACT_ROUNDTRIPCORRECTION("upl.property.pact.roundTripCorrection", "Roundtrip correction"),
    PACT_ROUNDTRIPCORRECTION_DESCRIPTION("upl.property.pact.roundTripCorrection.description", "Roundtrip correction"),
    PACT_NODEID("upl.property.pact.nodeId", "Node Id"),
    PACT_NODEID_DESCRIPTION("upl.property.pact.nodeId.description", "Node Id"),
    PACT_ECHOCANCELLING("upl.property.pact.echoCancelling", "Echo cancelling"),
    PACT_ECHOCANCELLING_DESCRIPTION("upl.property.pact.echoCancelling.description", "Echo cancelling"),
    PACT_SECURITYLEVEL("upl.property.pact.securityLevel", "Security level"),
    PACT_SECURITYLEVEL_DESCRIPTION("upl.property.pact.securityLevel.description", "Security level"),
    PACT_CHANNEL_MAP("upl.property.pact.channelMap", "Channel map"),
    PACT_CHANNEL_MAP_DESCRIPTION("upl.property.pact.channelMap.description", "Channel map"),
    PACT_HIGH_KEY("upl.property.pact.highKey", "High key"),
    PACT_HIGH_KEY_DESCRIPTION("upl.property.pact.highKey.description", "High key"),
    PACT_HIGH_KEY_REF("upl.property.pact.highKeyRef", "High key reference"),
    PACT_HIGH_KEY_REF_DESCRIPTION("upl.property.pact.highKeyRef.description", "High key reference"),
    PACT_LOW_KEY("upl.property.pact.lowKey", "Low key"),
    PACT_LOW_KEY_DESCRIPTION("upl.property.pact.lowKey.description", "Low key"),
    PACT_PAKNET("upl.property.pact.paknet", "PAKNET"),
    PACT_PAKNET_DESCRIPTION("upl.property.pact.paknet.description", "PAKNET"),
    PACT_PACTLAN("upl.property.pact.pactlan", "PACTLAN"),
    PACT_PACTLAN_DESCRIPTION("upl.property.pact.pactlan.description", "PACTLAN"),
    PACT_EXTENDED_LOGGING("upl.property.pact.extendedLogging", "Extended logging"),
    PACT_EXTENDED_LOGGING_DESCRIPTION("upl.property.pact.extendedLogging.description", "Extended logging"),
    PACT_REGISTER_TIMEZONE("upl.property.pact.registerTimezone", "Register timezone"),
    PACT_REGISTER_TIMEZONE_DESCRIPTION("upl.property.pact.registerTimezone.description", "Register timezone"),
    PACT_STATUS_FLAG_CHANNEL("upl.property.pact.statusFlagChannel", "Status flag channel"),
    PACT_STATUS_FLAG_CHANNEL_DESCRIPTION("upl.property.pact.statusFlagChannel.description", "Status flag channel"),
    PACT_MODULO("upl.property.pact.modulo", "Modulo"),
    PACT_MODULO_DESCRIPTION("upl.property.pact.modulo.description", "Modulo"),
    PACT_METERTYPE("upl.property.pact.meterType", "Meter type"),
    PACT_METERTYPE_DESCRIPTION("upl.property.pact.meterType.description", "Meter type"),
    PACT_KEY_INFO_REQUIRED("upl.property.pact.keyInfoRequired", "Key info required"),
    PACT_KEY_INFO_REQUIRED_DESCRIPTION("upl.property.pact.keyInfoRequired.description", "Key info required"),
    PACT_FORCED_REQUEST_EXTRA_DAYS("upl.property.pact.ForcedRequestExtraDays", "Forced request extra days"),
    PACT_FORCED_REQUEST_EXTRA_DAYS_DESCRIPTION("upl.property.pact.ForcedRequestExtraDays.description", "Forced request extra days"),
    ION_NODEID("upl.property.ion.nodeId", "Node Id"),
    ION_NODEID_DESCRIPTION("upl.property.ion.nodeId.description", "Node Id"),
    ION_PASSWORD("upl.property.ion.password", "Password"),
    ION_PASSWORD_DESCRIPTION("upl.property.ion.password.description", "Password"),
    ION_SERIALNUMBER("upl.property.ion.serialNumber", "Serialnumber"),
    ION_SERIALNUMBER_DESCRIPTION("upl.property.ion.serialNumber.description", "Serialnumber"),
    ION_TIMEOUT("upl.property.ion.timeout", "Timeout"),
    ION_TIMEOUT_DESCRIPTION("upl.property.ion.timeout.description", "Timeout"),
    ION_RETRIES("upl.property.ion.retries", "Retries"),
    ION_RETRIES_DESCRIPTION("upl.property.ion.retries.description", "Retries"),
    ION_ROUNDTRIPCORRECTION("upl.property.ion.roundTripCorrection", "Roundtrip correction"),
    ION_ROUNDTRIPCORRECTION_DESCRIPTION("upl.property.ion.roundTripCorrection.description", "Roundtrip correction"),
    ION_USER_ID("upl.property.ion.userId", "User id"),
    ION_USER_ID_DESCRIPTION("upl.property.ion.userID.description", "User id"),
    ION_EXTENDED_LOGGING("upl.property.ion.extendedLogging", "Extended logging"),
    ION_EXTENDED_LOGGING_DESCRIPTION("upl.property.ion.extendedLogging.description", "Extended logging"),
    ION_PROFILEINTERVAL("upl.property.ion.profileInterval", "Profile interval"),
    ION_PROFILEINTERVAL_DESCRIPTION("upl.property.ion.profileInterval.description", "Profile interval"),
    ION_CORRECTTIME("upl.property.ion.correctTime", "Correct time"),
    ION_CORRECTTIME_DESCRIPTION("upl.property.ion.correctTime.description", "Correct time"),
    ION_CHANNEL_MAP("upl.property.ion.channelMap", "Channel map"),
    ION_CHANNEL_MAP_DESCRIPTION("upl.property.ion.channelMap.description", "Channel map"),
    ION_FORCE_DELAY("upl.property.ion.forceDelay", "Force delay"),
    ION_FORCE_DELAY_DESCRIPTION("upl.property.ion.forceDelay.description", "Force delay"),
    ION_DATA_RECORDER_NAME("upl.property.ion.dataRecorderName","Data recorder name"),
    ION_DATA_RECORDER_NAME_DESCRIPTION("upl.property.ion.dataRecorderName.description","Data recorder name"),
    ION_DTR_BEHAVIOUR("upl.property.ion.dtrBehaviour", "DTR behaviour"),
    ION_DTR_BEHAVIOUR_NAME_DESCRIPTION("upl.property.ion.dtrBehaviour.description", "DTR behaviour"),
    RTUPLUSBUS_HALF_DUPLEX("upl.property.rtuplusbus.halfDuplex", "Half duplex"),
    RTUPLUSBUS_HALF_DUPLEX_DESCRIPTION("upl.property.rtuplusbus.halfDuplex.description", "Half duplex"),
    RTUPLUSBUS_FORCED_DELAY("upl.property.rtuplusbus.forcedDelay", "Forced delay"),
    RTUPLUSBUS_FORCED_DELAY_DESCRIPTION("upl.property.rtuplusbus.forcedDelay.description", "Forced delay"),
    RTUPLUSBUS_NODEID("upl.property.rtuplusbus.nodeId", "Node Id"),
    RTUPLUSBUS_NODEID_DESCRIPTION("upl.property.rtuplusbus.nodeId.description", "Node Id"),
    RTUPLUSBUS_PASSWORD("upl.property.rtuplusbus.password", "Password"),
    RTUPLUSBUS_PASSWORD_DESCRIPTION("upl.property.rtuplusbus.password.description", "Password"),
    RTUPLUSBUS_TIMEOUT("upl.property.rtuplusbus.timeout", "Timeout"),
    RTUPLUSBUS_TIMEOUT_DESCRIPTION("upl.property.rtuplusbus.timeout.description", "Timeout"),
    RTUPLUSBUS_RETRIES("upl.property.rtuplusbus.retries", "Retries"),
    RTUPLUSBUS_RETRIES_DESCRIPTION("upl.property.rtuplusbus.retries.description", "Retries"),
    RTUPLUSBUS_ROUNDTRIPCORRECTION("upl.property.rtuplusbus.roundTripCorrection", "Roundtrip correction"),
    RTUPLUSBUS_ROUNDTRIPCORRECTION_DESCRIPTION("upl.property.rtuplusbus.roundTripCorrection.description", "Roundtrip correction"),
    RTUPLUSBUS_DELAY_AFTERFAIL("upl.property.rtuplusbus.delayAfterfail", "Delay afterfail"),
    RTUPLUSBUS_DELAY_AFTERFAIL_DESCRIPTION("upl.property.rtuplusbus.delayAfterfail.description", "Delay afterfail"),
    RTUPLUSBUS_PROFILEINTERVAL("upl.property.rtuplusbus.profileInterval", "Profile interval"),
    RTUPLUSBUS_PROFILEINTERVAL_DESCRIPTION("upl.property.rtuplusbus.profileInterval.description", "Profile interval"),
    RTUPLUSBUS_DELAY_AFTER_FAIL("upl.property.rtuplusbus.delayAfterFail", "Delay after fail"),
    RTUPLUSBUS_DELAY_AFTER_FAIL_DESCRIPTION("upl.property.rtuplusbus.delayAfterFail", "Delay after fail"),
    RTUPLUSBUS_PROTOCOL_VERSION("upl.property.rtuplusbus.protocolVersion", "Protocol version"),
    RTUPLUSBUS_PROTOCOL_VERSION_DESCRIPTION("upl.property.rtuplusbus.protocolVersion", "Protocol version"),
    RTUPLUSBUS_MAXIMUM_NUMBER_OF_RECORDS("upl.property.rtuplusbus.maximumNumberOfRecords", "Maximum number of records"),
    RTUPLUSBUS_MAXIMUM_NUMBER_OF_RECORDS_DESCRIPTION("upl.property.rtuplusbus.maximumNumberOfRecords", "Maximum number of records"),
    SCTM_BILLING_TIMESTAMP_ID("upl.property.sctm.billingTimestampId", "Billing timestamp id"),
    SCTM_BILLING_TIMESTAMP_ID_DESCRIPTION("upl.property.sctm.billingTimestampId.description", "Billing timestamp id"),
    EICT_SMS_BASE_URL("upl.property.eict.smsBaseUrl", "SmsConnectionURL"),
    EICT_SMS_BASE_URL_DESCRIPTION("upl.property.eict.smsBaseUrl.description", "SmsConnectionURL"),
    EICT_SMS_SOURCE("upl.property.eict.smsSource", "API source"),
    EICT_SMS_SOURCE_DESCRIPTION("upl.property.eict.smsSource.description", "API source"),
    EICT_SMS_AUTH("upl.property.eict.smsAuth", "API authentication"),
    EICT_SMS_AUTH_DESCRIPTION("upl.property.eict.smsAuth.description", "API authentication"),
    EICT_SMS_SERVICE_CODE("upl.property.eict.smsServiceCode", "SmsServiceCode"),
    EICT_SMS_SERVICE_CODE_DESCRIPTION("upl.property.eict.smsServiceCode.description", "SmsServiceCode"),
    EICT_SMS_PHONE_NUMBER("upl.property.eict.smsPhoneNumber", "SmsPhoneNumber"),
    EICT_SMS_PHONE_NUMBER_DESCRIPTION("upl.property.eict.smsPhoneNumber.description", "SmsPhoneNumber"),
    EICT_WAKEUP_POLLING_TIMEOUT("upl.property.eict.wakeUpPollingTimeout", "PollTimeOut"),
    EICT_WAKEUP_POLLING_TIMEOUT_DESCRIPTION("upl.property.eict.wakeUpPollingTimeout.description", "PollTimeOut"),
    EICT_WAKEUP_POLLING_FREQUENCY("upl.property.eict.wakeUpPollingFrequency", "PollFrequency"),
    EICT_WAKEUP_POLLING_FREQUENCY_DESCRIPTION("upl.property.eict.wakeUpPollingFrequency.description", "PollFrequency"),
    EICT_SECURITY_LEVEL("upl.property.eict.securityLevel", "Security level"),
    EICT_SECURITY_LEVEL_DESCRIPTION("upl.property.eict.securityLevel.description", "Security level"),
    EICT_ADDRESSING_MODE("upl.property.eict.adressingMode", "Addressing mode"),
    EICT_ADDRESSING_MODE_DESCRIPTION("upl.property.eict.adressingMode.description", "Addressing mode"),
    EICT_CLIENT_MAC_ADDRESS("upl.property.eict.clientMacAddress", "Client MAC address"),
    EICT_CLIENT_MAC_ADDRESS_DESCRIPTION("upl.property.eict.clientMacAddress.description", "Client MAC address"),
    EICT_SERVER_MAC_ADDRESS("upl.property.eict.serverMacAddress", "Server MAC address"),
    EICT_SERVER_MAC_ADDRESS_DESCRIPTION("upl.property.eict.serverMacAddress.description", "Server MAC address"),
    EICT_CONNECTION("upl.property.eict.connection", "Connection"),
    EICT_CONNECTION_DESCRIPTION("upl.property.eict.connection.description", "Connection"),
    EICT_FORCED_DELAY("upl.property.eict.forcedDelay", "Forced delay"),
    EICT_FORCED_DELAY_DESCRIPTION("upl.property.eict.forcedDelay.description", "Forced delay"),
    EICT_DELAY_AFTER_ERROR("upl.property.eict.delayAfterError", "Delay after error"),
    EICT_DELAY_AFTER_ERROR_DESCRIPTION("upl.property.eict.delayAfterError.description", "Delay after error"),
    EICT_INFORMATION_FIELD_SIZE("upl.property.eict.informationFieldSize", "Information field size"),
    EICT_INFORMATION_FIELD_SIZE_DESCRIPTION("upl.property.eict.informationFieldSize.description", "Information field size"),
    EICT_MAX_REC_PDU_SIZE("upl.property.eict.maxRecPduSize", "Maximum received PDU size"),
    EICT_MAX_REC_PDU_SIZE_DESCRIPTION("upl.property.eict.maxRecPduSize.description", "Maximum received PDU size"),
    EICT_RETRIES("upl.property.eict.retries", "Retries"),
    EICT_RETRIES_DESCRIPTION("upl.property.eict.retries.description", "Retries"),
    EICT_TIMEOUT("upl.property.eict.timeout", "Timeout"),
    EICT_TIMEOUT_DESCRIPTION("upl.property.eict.timeout.description", "Timeout"),
    EICT_ROUND_TRIP_CORRECTION("upl.property.eict.roundTripCorrection", "Roundtrip correction"),
    EICT_ROUND_TRIP_CORRECTION_DESCRIPTION("upl.property.eict.roundTripCorrection.description", "Roundtrip correction"),
    EICT_BULK_REQUEST("upl.property.eict.bulkRequest", "Bulk request"),
    EICT_BULK_REQUEST_DESCRIPTION("upl.property.eict.bulkRequest.description", "Bulk request"),
    EICT_CIPHERING_TYPE("upl.property.eict.ciphering", "Ciphering type"),
    EICT_CIPHERING_TYPE_DESCRIPTION("upl.property.eict.ciphering.description", "Ciphering type"),
    EICT_NTA_SIMULATION_TOOL("upl.property.eict.ntaSimulationTool", "NTA simulation tool"),
    EICT_NTA_SIMULATION_TOOL_DESCRIPTION("upl.property.eict.ntaSimulationTool.description", "NTA simulation tool"),
    EICT_LOGBOOK_SELECTOR("upl.property.eict.logbookSelector", "Logbook selector"),
    EICT_LOGBOOK_SELECTOR_DESCRIPTION("upl.property.eict.logbookSelector.description", "Logbook selector"),
    EICT_DATATRANSPORT_AUTHENTICATIONKEY("upl.property.eict.datatransportAutenticationKey", "Datatransport authentication key"),
    EICT_DATATRANSPORT_AUTHENTICATIONKEY_DESCRIPTION("upl.property.eict.datatransportAutenticationKey.description", "Datatransport authentication key"),
    EICT_DATATRANSPORT_ENCRYPTIONKEY("upl.property.eict.datatransportEncryptionKey", "Datatransport encryption key"),
    EICT_DATATRANSPORT_ENCRYPTIONKEY_DESCRIPTION("upl.property.eict.datatransportEncryptionKey.description", "Datatransport encryption key"),
    EICT_SYSTEM_IDENTIFIER("upl.property.eict.systemIdentifier", "System identifier"),
    EICT_SYSTEM_IDENTIFIER_DESCRIPTION("upl.property.eict.systemIdentifier.description", "System identifier"),
    EICT_INVOKE_ID_AND_PRIORITY("upl.property.eict.invokeIdAndPriority", "Invoke id and priority"),
    EICT_INVOKE_ID_AND_PRIORITY_DESCRIPTION("upl.property.eict.invokeIdAndPriority.description", "Invoke id and priority"),
    NTA_NTA_SIMULATION_TOOL("upl.property.nta.ntaSimulationTool", "NTA simulation tool"),
    NTA_NTA_SIMULATION_TOOL_DESCRIPTION("upl.property.nta.ntaSimulationTool.description", "NTA simulation tool"),
    NTA_SECURITY_LEVEL("upl.property.nta.securityLevel", "Security level"),
    NTA_SECURITY_LEVEL_DESCRIPTION("upl.property.nta.securityLevel.description", "Security level"),
    NTA_ADDRESSING_MODE("upl.property.nta.adressingMode", "Addressing mode"),
    NTA_ADDRESSING_MODE_DESCRIPTION("upl.property.nta.adressingMode.description", "Addressing mode"),
    NTA_CLIENT_MAC_ADDRESS("upl.property.nta.clientMacAddress", "Client MAC address"),
    NTA_CLIENT_MAC_ADDRESS_DESCRIPTION("upl.property.nta.clientMacAddress.description", "Client MAC address"),
    NTA_SERVER_MAC_ADDRESS("upl.property.nta.serverMacAddress", "Server MAC address"),
    NTA_SERVER_MAC_ADDRESS_DESCRIPTION("upl.property.nta.serverMacAddress.description", "Server MAC address"),
    NTA_CONNECTION("upl.property.nta.connection", "Connection"),
    NTA_CONNECTION_DESCRIPTION("upl.property.nta.connection.description", "Connection"),
    NTA_FORCED_DELAY("upl.property.nta.forcedDelay", "Forced delay"),
    NTA_FORCED_DELAY_DESCRIPTION("upl.property.nta.forcedDelay.description", "Forced delay"),
    NTA_DELAY_AFTER_ERROR("upl.property.nta.delayAfterError", "Delay after error"),
    NTA_DELAY_AFTER_ERROR_DESCRIPTION("upl.property.nta.delayAfterError.description", "Delay after error"),
    NTA_INFORMATION_FIELD_SIZE("upl.property.nta.informationFieldSize", "Information field size"),
    NTA_INFORMATION_FIELD_SIZE_DESCRIPTION("upl.property.nta.informationFieldSize.description", "Information field size"),
    NTA_MAX_REC_PDU_SIZE("upl.property.nta.maxRecPduSize", "Maximum received PDU size"),
    NTA_MAX_REC_PDU_SIZE_DESCRIPTION("upl.property.nta.maxRecPduSize.description", "Maximum received PDU size"),
    NTA_RETRIES("upl.property.nta.retries", "Retries"),
    NTA_RETRIES_DESCRIPTION("upl.property.nta.retries.description", "Retries"),
    NTA_TIMEOUT("upl.property.nta.timeout", "Timeout"),
    NTA_TIMEOUT_DESCRIPTION("upl.property.nta.timeout.description", "Timeout"),
    NTA_ROUND_TRIP_CORRECTION("upl.property.nta.roundTripCorrection", "Roundtrip correction"),
    NTA_ROUND_TRIP_CORRECTION_DESCRIPTION("upl.property.nta.roundTripCorrection.description", "Roundtrip correction"),
    NTA_BULK_REQUEST("upl.property.nta.bulkRequest", "Bulk request"),
    NTA_BULK_REQUEST_DESCRIPTION("upl.property.nta.bulkRequest.description", "Bulk request"),
    NTA_CIPHERING_TYPE("upl.property.nta.ciphering", "Ciphering type"),
    NTA_CIPHERING_TYPE_DESCRIPTION("upl.property.nta.ciphering.description", "Ciphering type"),
    NTA_DATATRANSPORT_AUTHENTICATIONKEY("upl.property.nta.datatransportAutenticationKey", "Datatransport authentication key"),
    NTA_DATATRANSPORT_AUTHENTICATIONKEY_DESCRIPTION("upl.property.nta.datatransportAutenticationKey.description", "Datatransport authentication key"),
    NTA_DATATRANSPORT_ENCRYPTIONKEY("upl.property.nta.datatransportEncryptionKey", "Datatransport encryption key"),
    NTA_DATATRANSPORT_ENCRYPTIONKEY_DESCRIPTION("upl.property.nta.datatransportEncryptionKey.description", "Datatransport encryption key"),
    NTA_OLD_MBUS_DISCOVERY("upl.property.nta.oldMbusDiscovery", "Old MBUS discovery"),
    NTA_OLD_MBUS_DISCOVERY_DESCRIPTION("upl.property.nta.oldMbusDiscovery.description", "Old MBUS discovery"),
    NTA_FIX_MBUS_HEX_SHORT_ID("upl.property.nta.fixMbusHexShortId", "Fix MBUS hex shortId"),
    NTA_FIX_MBUS_HEX_SHORT_ID_DESCRIPTION("upl.property.nta.fixMbusHexShortId.description", "Fix MBUS hex shortId"),
    NTA_WAKE_UP("upl.property.nta.wakeUp", "Wake up"),
    NTA_WAKE_UP_DESCRIPTION("upl.property.nta.wakeUp.description", "Wake up"),
    NTA_IGNORE_DST_STATUS_CODE("upl.property.nta.ignoreDstStatusCode", "Ignore DST status code"),
    NTA_IGNORE_DST_STATUS_CODE_DESCRIPTION("upl.property.nta.ignoreDstStatusCode.description", "Ignore DST status code"),
    NTA_FORCED_TO_READ_CACHE("upl.property.nta.forcedToReadCache", "Forced to read cache"),
    NTA_FORCED_TO_READ_CACHE_DESCRIPTION("upl.property.nta.forcedToReadCache.description", "Forced to read cache"),
    NTA_VALIDATE_INVOKE_ID("upl.property.nta.validateInvokeId", "Validate invoke id"),
    NTA_VALIDATE_INVOKE_ID_DESCRIPTION("upl.property.nta.validateInvokeId.description", "Validate invoke id"),
    NTA_CUMULATIVE_CAPTURE_TIME_CHANNEL("upl.property.nta.cumulativeCaptureTimeChannel", "Cumulative capture time channel"),
    NTA_CUMULATIVE_CAPTURE_TIME_CHANNEL_DESCRIPTION("upl.property.nta.cumulativeCaptureTimeChannel.description", "Cumulative capture time channel"),
    NTA_DSMR_40_HEX_PASSWORD("upl.property.nta.dsmr40HexPassword", "DSMR 40 Hex password"),
    NTA_DSMR_40_HEX_PASSWORD_DESCRIPTION("upl.property.nta.dsmr40HexPassword.description", "DSMR 40 Hex password"),
    NTA_RTU_TYPE("upl.property.nta.rtuType", "Rtu type"),
    NTA_RTU_TYPE_DESCRIPTION("upl.property.nta.rtuType.description", "Rtu type"),
    NTA_FOLDER_EXTERNAL_NAME("upl.property.nta.folderType", "Folder type"),
    NTA_FOLDER_EXTERNAL_NAME_DESCRIPTION("upl.property.nta.folderType.description", "Folder type"),
    NTA_LAST_SEND_DATE("upl.property.nta.lastSendDate", "Last send date"),
    NTA_LAST_SEND_DATE_DESCRIPTION("upl.property.nta.lastSendDate.description", "Last send date"),
    NTA_AARQ_RETRIES("upl.property.nta.aarqRetries", "AARQ retries"),
    NTA_AARQ_RETRIES_DESCRIPTION("upl.property.nta.aarqRetries.description", "AARQ retries"),
    NTA_AARQ_TIMEOUT("upl.property.nta.aarqTimeout", "AARQ timeout"),
    NTA_AARQ_TIMEOUT_DESCRIPTION("upl.property.nta.aarqTimeout.description", "AARQ timeout"),
    NTA_PSK("upl.property.nta.psk", "PSK"),
    NTA_PSK_DESCRIPTION("upl.property.nta.psk.description", "PSK"),
    NTA_CHECK_NUMBER_OF_BLOCKS_DURING_FIRMWARE_RESUME("upl.property.nta.checkNumberOfBlocksDuringFirmwareResume", "Check number of blocks during firmware resume"),
    NTA_CHECK_NUMBER_OF_BLOCKS_DURING_FIRMWARE_RESUME_DESCRIPTION("upl.property.nta.checkNumberOfBlocksDuringFirmwareResume.description", "Check number of blocks during firmware resume"),
    PRENTA_RETRIES("upl.property.prenta.retries", "Retries"),
    PRENTA_RETRIES_DESCRIPTION("upl.property.prenta.retries", "Retries"),
    PRENTA_TIMEOUT("upl.property.prenta.timout", "Timeout"),
    PRENTA_TIMEOUT_DESCRIPTION("upl.property.prenta.timout", "Timeout"),
    PRENTA_SECURITY_LEVEL("upl.property.prenta.securityLevel", "Security levl"),
    PRENTA_SECURITY_LEVEL_DESCRIPTION("upl.property.prenta.securityLevel", "Security levl"),
    PRENTA_CLIENT_MAC_ADDRESS("upl.property.prenta.clientMacAddress", "Client MAC address"),
    PRENTA_CLIENT_MAC_ADDRESS_DESCRIPTION("upl.property.prenta.clientMacAddress", "Client MAC address"),
    PRENTA_SERVER_MAC_ADDRESS("upl.property.prenta.serverMacAddress", "Server MAC addres"),
    PRENTA_SERVER_MAC_ADDRESS_DESCRIPTION("upl.property.prenta.serverMacAddress", "Server MAC addres"),
    PRENTA_ADDRESSING_MODE("upl.property.prenta.addressingMode", "Addressing mode"),
    PRENTA_ADDRESSING_MODE_DESCRIPTION("upl.property.prenta.addressingMode", "Addressing mode"),
    PRENTA_CONNECTION("upl.property.prenta.connection", "Connection"),
    PRENTA_CONNECTION_DESCRIPTION("upl.property.prenta.connection", "Connection"),
    PRENTA_REQUEST_TIME_ZONE("upl.property.prenta.requestTimeZone", "Request timezone"),
    PRENTA_REQUEST_TIME_ZONE_DESCRIPTION("upl.property.prenta.requestTimeZone", "Request timezone"),
    PRENTA_FIRMWARE_VERION("upl.property.prenta.firmwareVerion", "Firmware version"),
    PRENTA_FIRMWARE_VERION_DESCRIPTION("upl.property.prenta.firmwareVerion", "Firmware version"),
    PRENTA_EXTENDED_LOGGING("upl.property.prenta.extendedLogging", "Extended logging"),
    PRENTA_EXTENDED_LOGGING_DESCRIPTION("upl.property.prenta.extendedLogging", "Extended logging"),
    PRENTA_DEVICETYPE("upl.property.prenta.deviceType", "Devicetype"),
    PRENTA_DEVICETYPE_DESCRIPTION("upl.property.prenta.deviceType", "Devicetype"),
    PRENTA_TEST_LOGGING("upl.property.prenta.testLogging", "Test logging"),
    PRENTA_TEST_LOGGING_DESCRIPTION("upl.property.prenta.testLogging", "Test logging"),
    PRENTA_FOLDER_EXTERNAL_NAME("upl.property.prenta.folderExternalName", "Folder external name"),
    PRENTA_FOLDER_EXTERNAL_NAME_DESCRIPTION("upl.property.prenta.folderExternalName", "Folder external name"),
    PRENTA_CSD_CALL("upl.property.prenta.csdCall", "Csd call"),
    PRENTA_CSD_CALL_DESCRIPTION("upl.property.prenta.csdCall", "Csd call"),
    PRENTA_IP_PORTNUMBER("upl.property.prenta.ipPortNumber", "Ip port number"),
    PRENTA_IP_PORTNUMBER_DESCRIPTION("upl.property.prenta.ipPortNumber", "Ip port number"),
    PRENTA_POLL_TIMEOUT("upl.property.prenta.pollTimeOut", "Poll timeout"),
    PRENTA_POLL_TIMEOUT_DESCRIPTION("upl.property.prenta.pollTimeOut", "Poll timeout"),
    PRENTA_CSD_CALL_TIMEOUT("upl.property.prenta.csdCallTimeOut", "CSD call timeout"),
    PRENTA_CSD_CALL_TIMEOUT_DESCRIPTION("upl.property.prenta.csdCallTimeOut", "CSD call timeout"),
    PRENTA_CSD_POLL_FREQUENCY("upl.property.prenta.csdPollFrequency", "CSD poll frequency"),
    PRENTA_CSD_POLL_FREQUENCY_DESCRIPTION("upl.property.prenta.csdPollFrequency", "CSD poll frequency"),
    PRENTA_FIXED_IP_ADDRES("upl.property.prenta.fixedIpAddress", "Fixed IP address"),
    PRENTA_FIXED_IP_ADDRES_DESCRIPTION("upl.property.prenta.fixedIpAddress", "Fixed IP address"),
    PRENTA_NEW_LLS_SECRET("upl.property.prenta.newLlsSecret", "New LLS secret"),
    PRENTA_NEW_LLS_SECRET_DESCRIPTION("upl.property.prenta.newLlsSecret", "New LLS secret"),
    WAVEFLOW_LOADPROFILE_OBISCODE("upl.property.waveflow.loadprofileObiscode", "Loadprofile obiscode"),
    WAVEFLOW_LOADPROFILE_OBISCODE_DESCRIPTION("upl.property.waveflow.loadprofileObiscode.description", "Loadprofile obiscode"),
    WAVEFLOW_CORRECTTIME("upl.property.waveflow.correctTime", "Correct time"),
    WAVEFLOW_CORRECTTIME_DESCRIPTION("upl.property.waveflow.correctTime.description", "Correct time"),
    WAVEFLOW_ENABLE_MULTIFRAME_MODE("upl.property.waveflow.enableMultiFrameMode", "Enable multiframe mode"),
    WAVEFLOW_ENABLE_MULTIFRAME_MODE_DESCRIPTION("upl.property.waveflow.enableMultiFrameMode.description", "Enable multiframe mode"),
    WAVEFLOW_VERIFY_PROFILE_INTERVAL("upl.property.waveflow.verifyProfileInterval", "Verify profile interval"),
    WAVEFLOW_VERIFY_PROFILE_INTERVAL_DESCRIPTION("upl.property.waveflow.verifyProfileInterval.description", "Verify profile interval"),
    WAVEFLOW_WAVENIS_BUBBLE_UP_INFO("upl.property.waveflow.wavenisBubbleUpInfo", "Wavenis bubble up info"),
    WAVEFLOW_WAVENIS_BUBBLE_UP_INFO_DESCRIPTION("upl.property.waveflow.wavenisBubbleUpInfo.description", "Wavenis bubble up info"),
    WAVEFLOW_APPLICATION_STATUS_VARIANT("upl.property.waveflow.applicationStatusVariant", "Application status variant"),
    WAVEFLOW_APPLICATION_STATUS_VARIANT_DESCRIPTION("upl.property.waveflow.applicationStatusVariant.description", "Application status variant"),
    WAVEFLOW_ROUND_DOWN_TO_NEAREST_INTERVAL("upl.property.waveflow.roundDownToNearestInterval", "Round down to nearest interval"),
    WAVEFLOW_ROUND_DOWN_TO_NEAREST_INTERVAL_DESCRIPTION("upl.property.waveflow.roundDownToNearestInterval.description", "Round down to nearest interval"),
    WAVEFLOW_INITIAL_RF_COMMAND("upl.property.waveflow.initialRfCommand", "Initial RF command"),
    WAVEFLOW_INITIAL_RF_COMMAND_DESCRIPTION("upl.property.waveflow.initialRfCommand.description", "Initial RF command"),
    WAVEFLOW_CONNECTION("upl.property.waveflow.connection", "Connection"),
    WAVEFLOW_CONNECTION_DESCRIPTION("upl.property.waveflow.connection.description", "Connection"),
    WAVEFLOW_SCALE_A("upl.property.waveflow.scaleA", "Scale A"),
    WAVEFLOW_SCALE_A_DESCRIPTION("upl.property.waveflow.scaleA.description", "Scale A"),
    WAVEFLOW_SCALE_B("upl.property.waveflow.scaleB", "Scale B"),
    WAVEFLOW_SCALE_B_DESCRIPTION("upl.property.waveflow.scaleB.description", "Scale B"),
    WAVEFLOW_SCALE_C("upl.property.waveflow.scaleC", "Scale C"),
    WAVEFLOW_SCALE_C_DESCRIPTION("upl.property.waveflow.scaleC.description", "Scale C"),
    WAVEFLOW_SCALE_D("upl.property.waveflow.scaleD", "Scale D"),
    WAVEFLOW_SCALE_D_DESCRIPTION("upl.property.waveflow.scaleD.description", "Scale D"),
    WAVEFLOW_MULTIPLIER_A("upl.property.waveflow.multiplierA", "Multiplier A"),
    WAVEFLOW_MULTIPLIER_A_DESCRIPTION("upl.property.waveflow.multiplierA.description", "Multiplier A"),
    WAVEFLOW_MULTIPLIER_B("upl.property.waveflow.multiplierB", "Multiplier B"),
    WAVEFLOW_MULTIPLIER_B_DESCRIPTION("upl.property.waveflow.multiplierB.description", "Multiplier B"),
    WAVEFLOW_MULTIPLIER_C("Upl.property.waveflow.multiplierC", "Multiplier C"),
    WAVEFLOW_MULTIPLIER_C_DESCRIPTION("Upl.property.waveflow.multiplierC.description", "Multiplier C"),
    WAVEFLOW_MULTIPLIER_D("upl.property.waveflow.multiplierD", "Multiplier D"),
    WAVEFLOW_MULTIPLIER_D_DESCRIPTION("upl.property.waveflow.multiplierD.description", "Multiplier D"),
    EDMI_EVENT_LOG_NAME("upl.property.edmi.eventLogName", "Event log name"),
    EDMI_EVENT_LOG_NAME_DESCRIPTION("upl.property.edmi.eventLogName.description", "Event log name"),
    EDMI_LOAD_SURVEY_NAME("upl.property.edmi.loadSurveyName", "Load survey name"),
    EDMI_LOAD_SURVEY_NAME_DESCRIPTION("upl.property.edmi.loadSurveyName.description", "Load survey name"),
    EDMI_STATUS_FLAG_CHANNEL("upl.property.edmi.statusFlagChannel", "Status flag channel"),
    EDMI_STATUS_FLAG_CHANNEL_DESCRIPTION("upl.property.edmi.statusFlagChannel.description", "Status flag channel"),
    EDMI_USE_OLD_PROFILE_FROM_DATE("upl.property.edmi.oldProfileFromDate", "Old profile from date"),
    EDMI_USE_OLD_PROFILE_FROM_DATE_DESCRIPTION("upl.property.edmi.oldProfileFromDate.description", "Old profile from date"),
    LANDISGYR_MODEM_PASSWORD("upl.property.landisgyr.modemPassword", "Modem password"),
    LANDISGYR_MODEM_PASSWORD_DESCRIPTION("upl.property.landisgyr.modemPassword.description", "Modem password"),
    WAVETHERM_CORRECTTIME("upl.property.wavetherm.correctTime", "Correct time"),
    WAVETHERM_CORRECTTIME_DESCRIPTION("upl.property.wavetherm.correctTime.description", "Correct time"),
    WAVETHERM_VERIFY_PROFILE_INTERVAL("upl.property.wavetherm.verifyProfileInterval", "Verify profile interval"),
    WAVETHERM_VERIFY_PROFILE_INTERVAL_DESCRIPTION("upl.property.wavetherm.verifyProfileInterval.description", "Verify profile interval"),
    WAVETHERM_LOADPROFILE_OBISCODE("upl.property.wavetherm.loadprofileObisCode", "Loadprofile OBIS code"),
    WAVETHERM_LOADPROFILE_OBISCODE_DESCRIPTION("upl.property.wavetherm.loadprofileObisCode.description", "Loadprofile OBIS code"),
    MODBUS_INTERFRAME_TIMEOUT("upl.property.modbus.interframeTimeOut", "Interframe timeout"),
    MODBUS_INTERFRAME_TIMEOUT_DESCRIPTION("upl.property.modbus.interframeTimeOut.description", "Interframe timeout"),
    MODBUS_NETWORK_ID("upl.property.modbus.networkId", "Network Id"),
    MODBUS_NETWORK_ID_DESCRIPTION("upl.property.modbus.networkId.description", "Network Id"),
    MODBUS_VIRTUAL_LOADPROFILE("upl.property.modbus.virtualLoadprofile", "Virtual loadprofile"),
    MODBUS_VIRTUAL_LOADPROFILE_DESCRIPTION("upl.property.modbus.virtualLoadprofile.description", "Virtual loadprofile"),
    MODBUS_PHYSICAL_LAYER("upl.property.modbus.physicalLayer", "Physical layer"),
    MODBUS_PHYSICAL_LAYER_DESCRIPTION("upl.property.modbus.physicalLayer.description", "Physical layer"),
    MODBUS_RESPONSE_TIMEOUT("upl.property.modbus.responsTimeout", "Response timeout"),
    MODBUS_RESPONSE_TIMEOUT_DESCRIPTION("upl.property.modbus.responsTimeout.description", "Response timeout"),
    MODBUS_REGISTER_ORDER_FIXED_POINT("upl.property.modbus.registerOrderFixedPoint", "Register order fixed point"),
    MODBUS_REGISTER_ORDER_FIXED_POINT_DESCRIPTION("upl.property.modbus.registerOrderFixedPoint.description", "Register order fixed point"),
    MODBUS_REGISTER_ORDER_FLOATING_POINT("upl.property.modbus.registerOrderFloatinPoint", "Register order floating point"),
    MODBUS_REGISTER_ORDER_FLOATING_POINT_DESCRIPTION("upl.property.modbus.registerOrderFloatinPoint.description", "Register order floating point"),
    MODBUS_FIRST_TIME_DELAY("upl.property.modbus.firstTimeDelay", "First time delay"),
    MODBUS_FIRST_TIME_DELAY_DESCRIPTION("upl.property.modbus.firstTimeDelay.description", "First time delay"),
    MODBUS_METER_FIRMWARE_VERSION("upl.property.modbus.meterFirmwareVersion", "Meter firmware version"),
    MODBUS_METER_FIRMWARE_VERSION_DESCRIPTION("upl.property.modbus.meterFirmwareVersion.description", "Meter firmware version"),
    MODBUS_CONNECTION("upl.property.modbus.connection", "Connection"),
    MODBUS_CONNECTION_DESCRIPTION("upl.property.modbus.connection.description", "Connection"),
    MODBUS_NODE_ADDRESS("upl.property.modbus.nodeAddress", "Node address"),
    MODBUS_NODE_ADDRESS_DESCRIPTION("upl.property.modbus.nodeAddress.description", "Node address"),
    LANDISGYR_CRN_INITIAL_VALUE("upl.property.landisgyr.crnInitialValue", "CRN initial value"),
    LANDISGYR_CRN_INITIAL_VALUE_DESCRIPTION("upl.property.landisgyr.crnInitialValue.description", "CRN initial value"),
    LANDISGYR_MODE_OF_OPERATION("upl.property.landisgyr.modeOfOperation", "Mode of operation"),
    LANDISGYR_MODE_OF_OPERATION_DESCRIPTION("upl.property.landisgyr.modeOfOperation.description", "Mode of operation"),
    EICT_NEW_DATATRANSPORT_AUTHENTICATIONKEY("upl.property.eict.newDatatransportAuthenticationkey", "New datatransport authentication key"),
    EICT_NEW_DATATRANSPORT_AUTHENTICATIONKEY_DESCRIPTION("upl.property.eict.newDatatransportAuthenticationkey.description", "New datatransport authentication key"),
    EICT_NEW_DATATRANSPORT_ENCRYPTIONKEY("upl.property.eict.newDatatransportEncryptionkey", "New datatransport encryption key"),
    EICT_NEW_DATATRANSPORT_ENCRYPTIONKEY_DESCRIPTION("upl.property.eict.newDatatransportEncryptionkey.description", "New datatransport encryption key"),
    EICT_NEW_HLS_SECRET("upl.property.eict.newHlsSecret", "New HLS secret"),
    EICT_NEW_HLS_SECRET_DESCRIPTION("upl.property.eict.newHlsSecret.description", "New HLS secret"),
    EICT_ZIGBEE_MAC("upl.property.eict.zigbeeMac", "Zigbee MAC"),
    EICT_ZIGBEE_MAC_DESCRIPTION("upl.property.eict.zigbeeMac.description", "Zigbee MAC"),
    EICT_ZIGBEE_PCLK("upl.property.eict.zigbeePCLK", "Zigbee PCLK"),
    EICT_ZIGBEE_PCLK_DESCRIPTION("upl.property.eict.zigbeePCLK.description", "Zigbee PCLK"),
    EICT_ZIGBEE_LINK_KEY("upl.property.eict.zigbeeLinkKey", "Zigbee link key"),
    MARKV_VERIFY_TIME_DELAY("upl.property.markv.verifyTimeDelay", "Verify time delay"),
    MARKV_VERIFY_TIME_DELAY_DESCRIPTION("upl.property.markv.verifyTimeDelay.description", "Verify time delay"),
    WAVELOG_CORRECTTIME("upl.property.waveLog.correctTime", "Correct time"),
    WAVELOG_CORRECTTIME_DESCRIPTION("upl.property.waveLog.correctTime.description", "Correct time"),
    RTM_CORRECTTIME("upl.property.rtm.correctTime", "Correct time"),
    RTM_CORRECTTIME_DESCRIPTION("upl.property.rtm.correctTime.description", "Correct time"),
    RTM_VERIFY_PROFILE_INTERVAL("upl.property.rtm.verifyProfileInterval", "Verify profile interval"),
    RTM_VERIFY_PROFILE_INTERVAL_DESCRIPTION("upl.property.rtm.verifyProfileInterval.description", "Verify profile interval"),
    RTM_ENABLE_MULTI_FRAME_MODE("upl.property.rtm.enableMultiFrameMode", "Enable multi frame mode"),
    RTM_ENABLE_MULTI_FRAME_MODE_DESCRIPTION("upl.property.rtm.enableMultiFrameMode.description", "Enable multi frame mode"),
    RTM_WAVENIS_BUBBLE_UP_INFO("upl.property.rtm.wavenisBubbleUpInfo", "Wavenis bubble up info"),
    RTM_WAVENIS_BUBBLE_UP_INFO_DESCRIPTION("upl.property.rtm.wavenisBubbleUpInfo.description", "Wavenis bubble up info"),
    RTM_INITIAL_RF_COMMAND("upl.property.rtm.initialRFCommand", "Initital RF command"),
    RTM_INITIAL_RF_COMMAND_DESCRIPTION("upl.property.rtm.initialRFCommand.description", "Initital RF command"),
    RTM_ROUND_DOWN_TO_NEAREST_INTERVAL("upl.property.rtm.roundDownToNearestInterval", "Round down to nearest interval"),
    RTM_ROUND_DOWN_TO_NEAREST_INTERVAL_DESCRIPTION("upl.property.rtm.roundDownToNearestInterval.description", "Round down to nearest interval"),
    EDF_HALF_DUPLEX("upl.property.edf.halfDuplex", "Half duplex"),
    EDF_HALF_DUPLEX_DESCRIPTION("upl.property.edf.halfDuplex.description", "Half duplex"),
    EDF_ACK_TIMEOUT_TL("upl.property.edf.ackTimeoutTL", "ACK timeout TL"),
    EDF_ACK_TIMEOUT_TL_DESCRIPTION("upl.property.edf.ackTimeoutTL.description", "ACK timeout TL"),
    EDF_INTER_CHAR_TIMEOUT("upl.property.edf.interCharTimeout", "Inter char timeout"),
    EDF_INTER_CHAR_TIMEOUT_DESCRIPTION("upl.property.edf.interCharTimeout.description", "Inter char timeout"),
    EDF_COMMAND_TIMEOUT("upl.property.edf.commandTimeout", "Command timeout"),
    EDF_COMMAND_TIMEOUT_DESCRIPTION("upl.property.edf.commandTimeout.description", "Command timeout"),
    EDF_FLUSH_TIMEOUT("upl.property.edf.flushTimeout", "Flush timeout"),
    EDF_FLUSH_TIMEOUT_DESCRIPTION("upl.property.edf.flushTimeout.description", "Flush timeout"),
    POREG_APPARENT_ENERGY_RESULT_LEVEL("upl.property.poreg.apparentEnergyResultLevel", "Apparent energy result level"),
    POREG_APPARENT_ENERGY_RESULT_LEVEL_DESCRIPTION("upl.property.poreg.apparentEnergyResultLevel.description", "Apparent energy result level"),
    POREG_SYSTEM_ADDRESS("upl.property.poreg.systemAddress", "System address"),
    POREG_SYSTEM_ADDRESS_DESCRIPTION("upl.property.poreg.systemAddress.description", "System address"),
    ELSTER_WHO_ARE_YOU_TIMEOUT("upl.property.elster.whoAreYouTimeout", "Who are you timeout"),
    ELSTER_WHO_ARE_YOU_TIMEOUT_DESCRIPTION("upl.property.elster.whoAreYouTimeout.description", "Who are you timeout"),
    ELSTER_TOTAL_REGISTER_RATE("upl.property.elster.totalRegisterRate", "Total register rate"),
    ELSTER_TOTAL_REGISTER_RATE_DESCRIPTION("upl.property.elster.totalRegisterRate.description", "Total register rate"),
    ELSTER_OPTICAL_HANDSHAKE_OVER_MODEM_PORT("upl.property.elster.opticalHandshakeOverModem", "Optical handshake over modem"),
    ELSTER_OPTICAL_HANDSHAKE_OVER_MODEM_PORT_DESCRIPTION("upl.property.elster.opticalHandshakeOverModem.description", "Optical handshake over modem"),
    WAVESENSE_VERIFY_PROFILE_INTERVAL("upl.property.wavesense.verifyProfileInterval", "Verify profile interval"),
    WAVESENSE_VERIFY_PROFILE_INTERVAL_DESCRIPTION("upl.property.wavesense.verifyProfileInterval.description", "Verify profile interval"),
    WAVESENSE_LOADPROFILE_OBISCODE("upl.property.wavesense.loadprofileObiscode", "Loadprofile obiscode"),
    WAVESENSE_LOADPROFILE_OBISCODE_DESCRIPTION("upl.property.wavesense.loadprofileObiscode.description", "Loadprofile obiscode"),
    EDF_T1TIMEOUT("upl.property.edf.t1Timeout", "T1 timeout"),
    EDF_T1TIMEOUT_DESCRIPTION("upl.property.edf.t1Timeout.description", "T1 timeout"),
    EDF_STSAP("upl.property.edf.stsap", "STSAP"),
    EDF_STSAP_DESCRIPTION("upl.property.edf.stsap.description", "STSAP"),
    EDF_DTSAP("upl.property.edf.dtsap", "DTSAP"),
    EDF_DTSAP_DESCRIPTION("upl.property.edf.dtsap.description", "DTSAP"),
    EDF_CLIENT_TYPE("upl.property.edf.clientType", "Client type"),
    EDF_CLIENT_TYPE_DESCRIPTION("upl.property.edf.clientType.description", "Client type"),
    EDF_CALLING_PHYSICAL_ADDRESS("upl.property.edf.callingPhysicalAddress", "Calling phyisical address"),
    EDF_CALLING_PHYSICAL_ADDRESS_DESCRIPTION("upl.property.edf.callingPhysicalAddress.description", "Calling phyisical address"),
    EDF_PROPOSED_APP_CTX_NAME("upl.property.edf.proposedAppCtxName", "Proposed app ctx name"),
    EDF_PROPOSED_APP_CTX_NAME_DESCRIPTION("upl.property.edf.proposedAppCtxName.description", "Proposed app ctx name"),
    EDF_DELAY_AFTER_CONNECT("upl.property.edf.delayAterConnect", "Delay after connect"),
    EDF_DELAY_AFTER_CONNECT_DESCRIPTION("upl.property.edf.delayAterConnect.description", "Delay after connect"),
    S4_C12User("upl.property.s4.c12User", "C12 user"),
    S4_C12User_DESCRIPTION("upl.property.s4.c12User.description", "C12 user"),
    S4_C12UserId("upl.property.s4.c12UserId", "C12 user id"),
    S4_C12UserId_DESCRIPTION("upl.property.s4.c12UserId.description", "C12 user id"),
    S4_MODEM_PASSWORD("upl.property.s4.modemPassword", "Modem password"),
    S4_MODEM_PASSWORD_DESCRIPTION("upl.property.s4.modemPassword.description", "Modem password"),
    IEC1107_LOGGER("upl.property.iec1107.logger", "Logger"),
    IEC1107_LOGGER_DESCRIPTION("upl.property.iec1107.logger.description", "Logger"),
    DLMS_CALLING_AP_TITLE("upl.property.dlms.callingApTitle", "DLMS calling AP title"),
    DLMS_CALLING_AP_TITLE_DESCRIPTION("upl.property.dlms.callingApTitle.description", "DLMS calling AP title"),
    WAVEFLOW_READ_LOAD_PROFILE("upl.property.waveflow.readLoadProfile", "Read loadprofile"),
    WAVEFLOW_READ_LOAD_PROFILE_DESCRIPTION("upl.property.waveflow.readLoadProfile.description", "Read loadprofile"),
    WAVEFLOW_SERIAL_NUMBER_A("upl.property.waveflow.serialNumberA", "Serial number A"),
    WAVEFLOW_SERIAL_NUMBER_A_DESCRIPTION("upl.property.waveflow.serialNumberA.description", "Serial number A"),
    WAVEFLOW_SERIAL_NUMBER_B("upl.property.waveflow.serialNumberB", "Serial number B"),
    WAVEFLOW_SERIAL_NUMBER_B_DESCRIPTION("upl.property.waveflow.serialNumberB.description", "Serial number B"),
    EDF_SAFETY_TIMEOUT("upl.property.edf.safetyTimeout", "Safety timeout"),
    EDF_SAFETY_TIMEOUT_DESCRIPTION("upl.property.edf.safetyTimeout.description", "Safety timeout"),
    ITRON_UNIT_TYPE("upl.property.itron.unitType", "Unit type"),
    ITRON_UNIT_TYPE_DESCRIPTION("upl.property.itron.unitType.description", "Unit type"),
    ITRON_UNIT_ID("upl.property.itron.unitId", "Unit id"),
    ITRON_UNIT_ID_DESCRIPTION("upl.property.itron.unitId.description", "Unit id"),
    ITRON_NODE_ADDRESS("upl.property.itron.nodeAddress", "Node address"),
    ITRON_NODE_ADDRESS_DESCRIPTION("upl.property.itron.nodeAddress.description", "Node address"),
    ITRON_DELAY_AFTER_CONNECT("upl.property.itron.delayAfterConnect", "Delay after connect"),
    WAIT_UNTIL_TIME_VALID("upl.property.itron.WAIT_UNTIL_TIME_VALID", "Wait until time valid"),
    WAITING_TIME("upl.property.itron.WAITING_TIME", "Waiting time"),
    ITRON_DELAY_AFTER_CONNECT_DESCRIPTION("upl.property.itron.delayAfterConnect.description", "Delay after connect"),
    ITRON_BLOCK_SIZE("upl.property.itron.blockSize", "Block size"),
    ITRON_BLOCK_SIZE_DESCRIPTION("upl.property.itron.blockSize.description", "Block size"),
    ITRON_DAISY_CHAIN("upl.property.itron.daisyChain", "Daisy chain"),
    ITRON_DAISY_CHAIN_DESCRIPTION("upl.property.itron.daisyChain.description", "Daisy chain"),
    ITRON_ALLOW_CLOCK_SET("upl.property.itron.allowClockSet", "Allow clock set"),
    ITRON_ALLOW_CLOCK_SET_DESCRIPTION("upl.property.itron.allowClockSet.description", "Allow clock set"),
    ITRON_UNIT_ID_MASTER("upl.property.itron.unitIdMaster", "Unit id master"),
    ITRON_UNIT_ID_MASTER_DESCRIPTION("upl.property.itron.unitIdMaster.description", "Unit id master"),
    ITRON_SECURITY_LEVEL_MASTER("upl.property.itron.securityLevelMaster", "Security level master"),
    ITRON_SECURITY_LEVEL_MASTER_DESCRIPTION("upl.property.itron.securityLevelMaster.description", "Security level master"),
    ITRON_PASSWORD_MASTER("upl.property.itron.password", "Password"),
    ITRON_PASSWORD_MASTER_DESCRIPTION("upl.property.itron.password.description", "Password"),
    CORONIS_CORRECTTIME("upl.property.coronis.correctTime", "CorrectTime"),
    CORONIS_CORRECTTIME_DESCRIPTION("upl.property.coronis.correctTime.description", "CorrectTime"),
    CORONIS_CORRECT_WAVEFLOW_TIME("upl.property.coronis.correctWaveFlowTime", "Correct waveflow time"),
    CORONIS_CORRECT_WAVEFLOW_TIME_DESCRIPTION("upl.property.coronis.correctWaveFlowTime.description", "Correct waveflow time"),
    CORONIS_VERIFY_PROFILE_INTERVAL("upl.property.coronis.verifyProfileInterval", "Verify profile interval"),
    CORONIS_VERIFY_PROFILE_INTERVAL_DESCRIPTION("upl.property.coronis.verifyProfileInterval.description", "Verify profile interval"),
    CORONIS_IS_OLD_FIRMWARE("upl.property.coronis.isOldFirmaware", "Is old firmware"),
    CORONIS_IS_OLD_FIRMWARE_DESCRIPTION("upl.property.coronis.isOldFirmaware.description", "Is old firmware"),
    CORONIS_OPTIMIZE_CHANGE_CONTACTOR_STATUS("upl.property.coronis.optimizeChangeContactorStatus", "Change contactor status"),
    CORONIS_OPTIMIZE_CHANGE_CONTACTOR_STATUS_DESCRIPTION("upl.property.coronis.optimizeChangeContactorStatus.description", "Change contactor status"),
    CORONIS_SERIAL_NUMBER_A("upl.property.coronis.serialNumberA", "Serial number A"),
    CORONIS_SERIAL_NUMBER_A_DESCRIPTION("upl.property.coronis.serialNumberA.description", "Serial number A"),
    CORONIS_MAX_NUMBER_OF_INTERVALS("upl.property.coronis.maxNumberOfIntervals", "Max number of intervals"),
    CORONIS_MAX_NUMBER_OF_INTERVALS_DESCRIPTION("upl.property.coronis.maxNumberOfIntervals.description", "Max number of intervals"),
    CORONIS_WAVENIS_ENCRYPTIONKEY("upl.property.coronis.wavenisEncryptionKey", "Wavenis encryption key"),
    CORONIS_WAVENIS_ENCRYPTIONKEY_DESCRIPTION("upl.property.coronis.wavenisEncryptionKey.description", "Wavenis encryption key"),
    CORONIS_LOADPROFILE_OBISCODE("upl.property.coronis.loadprofileObiscode", "Loadprofile obiscode"),
    CORONIS_LOADPROFILE_OBISCODE_DESCRIPTION("upl.property.coronis.loadprofileObiscode.description", "Loadprofile obiscode"),
    CORONIS_LP_MULTIPLIER("upl.property.coronis.lpMultiplier", "LP multiplier"),
    CORONIS_LP_MULTIPLIER_DESCRIPTION("upl.property.coronis.lpMultiplier.description", "LP multiplier"),
    DLMS_EVENT_ID_INDEX("upl.property.dlms.eventIdIndex", "Event id index"),
    DLMS_EVENT_ID_INDEX_DESCRIPTION("upl.property.dlms.eventIdIndex.description", "Event id index"),
    MODBUS_START_REGISTERS_ZERO_BASED("upl.property.modbus.startRegistersZeroBased", "Start registers zero based"),
    MODBUS_START_REGISTERS_ZERO_BASED_DESCRIPTION("upl.property.modbus.startRegistersZeroBased.description", "Start registers zero based"),
    ITRON_C12_USER("upl.property.itron.c12User", "C12 user"),
    ITRON_C12_USER_DESCRIPTION("upl.property.itron.c12User.description", "C12 user"),
    ITRON_C12_USERID("upl.property.itron.c12UserId", "C12 user id"),
    ITRON_C12_USERID_DESCRIPTION("upl.property.itron.c12UserId.description", "C12 user id"),
    ITRON_MAX_NR_PACKETS("upl.property.itron.maxNrPackets", "Max nr packets"),
    ITRON_MAX_NR_PACKETS_DESCRIPTION("upl.property.itron.maxNrPackets.description", "Max nr packets"),
    ITRON_READ_LOAD_PROFILE_CHUNKED("upl.property.itron.readLoadProfileChunked", "Read loadprofile chuncked"),
    ITRON_READ_LOAD_PROFILE_CHUNKED_DESCRIPTION("upl.property.itron.readLoadProfileChunked.description", "Read loadprofile chuncked"),
    ITRON_CHUNK_SIZE("upl.property.itron.chunkSize", "Chunk size"),
    ITRON_CHUNK_SIZE_DESCRIPTION("upl.property.itron.chunkSize.description", "Chunk size"),
    ITRON_CONVERT_REGISTER_READS_TO_KILO_UNITS("upl.property.itron.convertRegisterReadsToKiloUnits", "Convert register reads to kilo units"),
    ITRON_READ_DEMANDS_AND_COINCIDENTS("upl.property.itron.ReadDemandsAndCoincidents", "Read demands and coincidents"),
    ITRON_READ_TIERS("upl.property.itron.ReadTiers", "Read tiers"),
    ITRON_LIMIT_REGISTER_READ_SIZE("upl.property.itron.LimitRegisterReadSize", "Limit register read size"),
    ITRON_REDUCE_MAX_NUMBER_OF_UOM_ENTRY_BY("upl.property.itron.ReduceMaxNumberOfUomEntryBy", "Reduce max number of Uom entry by"),
    ITRON_EVENT_CHUNK_SIZE("upl.property.itron.EventChunkSize", "Event chunk size"),
    ITRON_CONVERT_REGISTER_READS_TO_KILO_UNITS_DESCRIPTION("upl.property.itron.convertRegisterReadsToKiloUnits.description", "Convert register reads to kilo units"),
    ITRON_APPLY_DEMAND_REGISTER_MULTIPLIER("upl.property.itron.applyDemandRegisterMultiplier", "Apply demand register multiplier"),
    ITRON_APPLY_DEMAND_REGISTER_MULTIPLIER_DESCRIPTION("upl.property.itron.applyDemandRegisterMultiplier.description", "Apply demand register multiplier"),
    ITRON_APPLY_ENERGY_REGISTER_MULTIPLIER("upl.property.itron.applyEnergyRegisterMultiplier", "Apply energy register multiplier"),
    ITRON_APPLY_ENERGY_REGISTER_MULTIPLIER_DESCRIPTION("upl.property.itron.applyEnergyRegisterMultiplier.description", "Apply energy register multiplier"),
    ITRON_APPLY_SELF_READ_REGISTER_MULTIPLIER("upl.property.itron.applySelfReadRegisterMultiplier", "Apply self read register multiplier"),
    ITRON_APPLY_SELF_READ_REGISTER_MULTIPLIER_DESCRIPTION("upl.property.itron.applySelfReadRegisterMultiplier.description", "Apply self read register multiplier"),
    ITRON_SUPPORTS_IDENTIFY_COMMAND("upl.property.itron.supportsIdentifyCommmand", "Supports identify command"),
    ITRON_SUPPORTS_IDENTIFY_COMMAND_DESCRIPTION("upl.property.itron.supportsIdentifyCommmand.description", "Supports identify command"),
    ITRON_CLIENT_ADDRESS("upl.property.itron.clientAddress", "Client address"),
    ITRON_CLIENT_ADDRESS_DESCRIPTION("upl.property.itron.clientAddress.description", "Client address"),
    ITRON_MASS_MEMORY_ID("upl.property.itron.massMemoryId", "Mass memory id"),
    ITRON_MASS_MEMORY_ID_DESCRIPTION("upl.property.itron.massMemoryId.description", "Mass memory id"),
    EICT_VERIFY_FIRMWARE_VERSION("upl.property.eict.verifyFirmwareVersion", "Verify firmware version"),
    EICT_VERIFY_FIRMWARE_VERSION_DESCRIPTION("upl.property.eict.verifyFirmwareVersion.description", "Verify firmware version"),
    DLMS_FORCE_TO_READ_CACHE("upl.property.dlms.forceToReadCache", "Force to read cache"),
    DLMS_FORCE_TO_READ_CACHE_DESCRIPTION("upl.property.dlms.forceToReadCache.description", "Force to read cache"),
    MODBUS_SOCOMECTYPE("upl.property.modbus.socomecType", "Socomec type"),
    MODBUS_SOCOMECTYPE_DESCRIPTION("upl.property.modbus.socomecType.description", "Socomec type"),
    CM10_DELAY_AFTER_CONNECT("upl.property.cm10.delayAfterConnect", "Delay after connect"),
    CM10_DELAY_AFTER_CONNECT_DESCRIPTION("upl.property.cm10.delayAfterConnect.description", "Delay after connect"),
    CM10_IS_C10_METER("upl.property.cm10.isC10Meter", "Is C10 meter"),
    CM10_IS_C10_METER_DESCRIPTION("upl.property.cm10.isC10Meter.description", "Is C10 meter"),
    EDF_METER_VERSION("upl.property.edf.meterVersion", "Meter version"),
    EDF_METER_VERSION_DESCRIPTION("upl.property.edf.meterVersion.description", "Meter version"),
    GE_C12_USER("upl.property.ge.c12User", "C12 user"),
    GE_C12_USER_DESCRIPTION("upl.property.ge.c12User.description", "C12 user"),
    GE_C12_USERID("upl.property.ge.c12Userid", "C12 user id"),
    GE_C12_USERID_DESCRIPTION("upl.property.ge.c12Userid.description", "C12 user id"),
    WAVETALK_CORRECTTIME("upl.property.wavetalk.correctTime", "Correct time"),
    WAVETALK_CORRECTTIME_DESCRIPTION("upl.property.wavetalk.correctTime.description", "Correct time"),
    MODBUS_LIMIT_MAX_NR_OF_DAYS("upl.property.modbus.limitMaxNrOfDays", "Limit max nr of days"),
    MODBUS_LIMIT_MAX_NR_OF_DAYS_DESCRIPTION("upl.property.modbus.limitMaxNrOfDays.description", "Limit max nr of days"),
    USE120_USER_ID("upl.property.use120.userId", "User id"),
    USE120_USER_ID_DESCRIPTION("upl.property.use120.userId.description", "User id"),
    E120_CHANNEL_MAP("upl.property.e120.channelMap", "Channel map"),
    E120_CHANNEL_MAP_DESCRIPTION("upl.property.e120.channelMa.descriptionp", "Channel map"),
    ITRON_LOADPROFILE_UNIT_SCALE("upl.property.itron.loadprofilUnitScale", "Loadprofile unit scale"),
    ITRON_LOADPROFILE_UNIT_SCALE_DESCRIPTION("upl.property.itron.loadprofilUnitScale.description", "Loadprofile unit scale"),
    MODBUS_APPLY_CTRATIO("upl.property.modbus.applyCtratio", "Apply CT ratio"),
    MODBUS_APPLY_CTRATIO_DESCRIPTION("upl.property.modbus.applyCtratio.description", "Apply CT ratio"),
    MODBUS_START_REGISTERS("upl.property.modbus.startRegisters", "Start registers"),
    MODBUS_START_REGISTERS_DESCRIPTION("upl.property.modbus.startRegisters.description", "Start registers"),
    ELSTER_NODE_ADRESS("upl.property.elster.nodeAddress", "Node address"),
    ELSTER_NODE_ADRESS_DESCRIPTION("upl.property.elster.nodeAddress.description", "Node address"),
    ELSTER_CHANNEL_MAP("upl.property.elster.channelMap", "Channel map"),
    ELSTER_CHANNEL_MAP_DESCRIPTION("upl.property.elster.channelMap.description", "Channel map"),
    GE_USE_SNAPSHOT_PROCEDURE("upl.property.ge.useSnapshotProcedure", "Use snapshot procedure"),
    GE_USE_SNAPSHOT_PROCEDURE_DESCRIPTION("upl.property.ge.useSnapshotProcedure.description", "Use snapshot procedure"),
    MODBUS_CHANNEL_MAP("upl.property.modbus.channelMap", "Channel map"),
    MODBUS_CHANNEL_MAP_DESCRIPTION("upl.property.modbus.channelMap.description", "Channel map"),
    EDMI_DELTA_WIRED("upl.property.edmi.deltaWired", "Delta wired"),
    EDMI_DELTA_WIRED_DESCRIPTION("upl.property.edmi.deltaWired.description", "Delta wired"),
    EDMI_NEXUS_CHANNEL_MAPPING("upl.property.edmi.nexusChannelMapping", "Nexus Channel mapping"),
    EDMI_NEXUS_CHANNEL_MAPPING_DESCRIPTION("upl.property.edmi.nexusChannelMapping.description", "Nexus Channel mapping"),
    ENERDIS_SOCOMEC_TYPE("upl.property.enerdis.socomecType", "Socomec type"),
    ENERDIS_SOCOMEC_TYPE_DESCRIPTION("upl.property.enerdis.socomecType.description", "Socomec type"),
    ENERDIS_LIMIT_MAX_NR_OF_DAYS("upl.property.enerdis.limitMaxNrOfDays", "Limit max nr of days"),
    ENERDIS_LIMIT_MAX_NR_OF_DAYS_DESCRIPTION("upl.property.enerdis.limitMaxNrOfDays.description", "Limit max nr of days"),
    ELSTER_SECURITYLEVEL("upl.property.elster.securityLevel", "Security level"),
    ELSTER_SECURITYLEVEL_DESCRIPTION("upl.property.elster.securityLevel.description", "Security level"),
    ELSTER_ADDRESSING_MODE("upl.property.elster.addressingMode", "Adressing mode"),
    ELSTER_ADDRESSING_MODE_DESCRIPTION("upl.property.elster.addressingMode.description", "Adressing mode"),
    ELSTER_CLIENT_MAC_ADDRESS("upl.property.elster.clientMacAddress", "Client MAC address"),
    ELSTER_CLIENT_MAC_ADDRESS_DESCRIPTION("upl.property.elster.clientMacAddress.description", "Client MAC address"),
    ELSTER_SERVER_MAC_ADDRESS("upl.property.elster.serverMacAddress", "Server MAC address"),
    ELSTER_SERVER_MAC_ADDRESS_DESCRIPTION("upl.property.elster.serverMacAddress.description", "Server MAC address"),
    ELSTER_CONNECTION("upl.property.elster.connection", "Connection"),
    ELSTER_CONNECTION_DESCRIPTION("upl.property.elster.connection.description", "Connection"),
    ELSTER_FORCED_DELAY("upl.property.elster.forcedDelay", "Forced delay"),
    ELSTER_FORCED_DELAY_DESCRIPTION("upl.property.elster.forcedDelay.description", "Forced delay"),
    ELSTER_MAX_REC_PDU_SIZE("upl.property.elster.maxRecPduSize", "Maximum received PDU size"),
    ELSTER_MAX_REC_PDU_SIZE_DESCRIPTION("upl.property.elster.maxRecPduSize.description", "Maximum received PDU size"),
    ELSTER_RETRIES("upl.property.elster.retries", "Retries"),
    ELSTER_RETRIES_DESCRIPTION("upl.property.elster.retries.description", "Retries"),
    ELSTER_TIMEOUT("upl.property.elster.timeout", "Timeout"),
    ELSTER_TIMEOUT_DESCRIPTION("upl.property.elster.timeout.description", "Timeout"),
    ELSTER_ROUND_TRIP_CORRECTION("upl.property.elster.roundTripCorrection", "Roundtrip correction"),
    ELSTER_ROUND_TRIP_CORRECTION_DESCRIPTION("upl.property.elster.roundTripCorrection.description", "Roundtrip correction"),
    ELSTER_DATATRANSPORT_AUTHENTICATIONKEY("upl.property.elster.dataTransportAuthenticationKey", "Datatransport authentication key"),
    ELSTER_DATATRANSPORT_AUTHENTICATIONKEY_DESCRIPTION("upl.property.elster.dataTransportAuthenticationKey.description", "Datatransport authentication key"),
    ELSTER_DATATRANSPORT_ENCRYPTIONKEY("upl.property.elster.dataTransportEncryptionKey", "Datatransport encryption key"),
    ELSTER_DATATRANSPORT_ENCRYPTIONKEY_DESCRIPTION("upl.property.elster.dataTransportEncryptionKey.description", "Datatransport encryption key"),
    ELSTER_VERIFY_FIRMWARE_VERSION("upl.property.elster.verifyFirmwareVersion", "Verify firmware version"),
    ELSTER_VERIFY_FIRMWARE_VERSION_DESCRIPTION("upl.property.elster.verifyFirmwareVersion.description", "Verify firmware version"),
    ELSTER_LOGBOOK_SELECTOR("upl.property.elster.logbookSelector", "Logbook selector"),
    ELSTER_LOGBOOK_SELECTOR_DESCRIPTION("upl.property.elster.logbookSelector.description", "Logbook selector"),
    ELSTER_C12_USER("upl.property.elster.c12User", "C12 user"),
    ELSTER_C12_USER_DESCRIPTION("upl.property.elster.c12User.description", "C12 user"),
    ELSTER_C12_USERID("upl.property.elster.c12UserID", "C12 user id"),
    ELSTER_C12_USERID_DESCRIPTION("upl.property.elster.c12UserID.description", "C12 user id"),
    ELSTER_PASSWORD_BINARY("upl.property.elster.password", "Password"),
    ELSTER_PASSWORD_BINARY_DESCRIPTION("upl.property.elster.password.description", "Password"),
    ELSTER_RETRIEVE_EXTRA_INTERVALS("upl.property.elster.retrieveExtraIntervals", "Retrieve extra intervals"),
    ELSTER_RETRIEVE_EXTRA_INTERVALS_DESCRIPTION("upl.property.elster.retrieveExtraIntervals.description", "Retrieve extra intervals"),
    ELSTER_CALLED_AP_TITLE("upl.property.elster.calledAPTitle", "Called AP title"),
    ELSTER_CALLED_AP_TITLE_DESCRIPTION("upl.property.elster.calledAPTitle.description", "Called AP title"),
    ELSTER_SECURITY_KEY("upl.property.elster.securityKey", "Security key"),
    ELSTER_SECURITY_KEY_DESCRIPTION("upl.property.elster.securityKey.description", "Security key"),
    ELSTER_SECURITY_MODE("upl.property.elser.securityMode", "Security mode"),
    ELSTER_SECURITY_MODE_DESCRIPTION("upl.property.elser.securityMode.description", "Security mode"),
    ELSTER_RS485_RTU_PLUS_SERVER("upl.property.elster.rS485RtuPlusServer", "RS485 Rtu Plus Server"),
    ELSTER_FRAME_CONTROL_TOGGLE_BIT_MODE("upl.property.elster.FrameControlToggleBitMode", "Frame control toggle bit mode"),
    ELSTER_PACKET_SIZE("upl.property.elster.PACKET_SIZE", "Packet size"),
    ELSTER_RS485_RTU_PLUS_SERVER_DESCRIPTION("upl.property.elster.rS485RtuPlusServer.description", "RS485 Rtu Plus Server"),
    DLMS_IP_PORT_NUMBER("upl.property.dlms.ipPortNumber", "Ip port number"),
    DLMS_IP_PORT_NUMBER_DESCRIPTION("upl.property.dlms.ipPortNumber.description", "Ip port number"),
    DLMS_DATATRANSPORTKEY("upl.property.dlms.datatransportKey", "Datatransport key"),
    DLMS_DATATRANSPORTKEY_DESCRIPTION("upl.property.dlms.datatransportKey.description", "Datatransport key"),
    DLMS_MASTERKEY("upl.property.dlms.masterKey", "Master key"),
    DLMS_MASTERKEY_DESCRIPTION("upl.property.dlms.masterKey.description", "Master key"),
    TEST_TEST("upl.property.test.test", "Test"),
    TEST_TEST_DESCRIPTION("upl.property.test.test.description", "Test"),
    IEC1107_STATUS_FLAG_CHANNEL("upl.property.iec1107_statusFlagChannel", "Status flag channel"),
    IEC1107_STATUS_FLAG_CHANNEL_DESCRIPTION("upl.property.iec1107_statusFlagChannel.description", "Status flag channel"),
    IEC1107_EMPTY_NODE_ADDRESS("upl.property.iec1107_emptyNodeAddress", "Empty node address"),
    IEC1107_EMPTY_NODE_ADDRESS_DESCRIPTION("upl.property.iec1107_emptyNodeAddress.description", "Empty node address"),
    MODBUS_TIMEZONE("upl.property.modbus.timezone", "Timezone"),
    MODBUS_TIMEZONE_DESCRIPTION("upl.property.modbus.timezone.description", "Timezone"),
    DLMS_WAKE_UP("upl.property.dlms.wakeUp", "Wake up"),
    DLMS_WAKE_UP_DESCRIPTION("upl.property.dlms.wakeUp.description", "Wake up"),
    DLMS_WAVENIS_ENCRYPTION_KEY("upl.property.dlms.wavenisEncryptionKey", "Wavenis encryption key"),
    DLMS_WAVENIS_ENCRYPTION_KEY_DESCRIPTION("upl.property.dlms.wavenisEncryptionKey.description", "Wavenis encryption key")
    ;


    private final String key;
    private final String defaultFormat;

    PropertyTranslationKeys(String key, String defaultFormat) {
        this.key = key;
        this.defaultFormat = defaultFormat;
    }

    @Override
    public String getKey() {
        return this.key;
    }

    @Override
    public String getDefaultFormat() {
        return this.defaultFormat;
    }

}


