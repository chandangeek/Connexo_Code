/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.elster.dlms.types.basic;

import java.util.HashSet;
import java.util.Set;
import java.util.Random;
import com.elster.coding.CodingUtils;
import com.elster.dlms.types.basic.ObisCode.Groups;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author osse
 */
public class ObisCodeTest
{

  public ObisCodeTest()
  {
  }

  @BeforeClass
  public static void setUpClass() throws Exception
  {
  }

  @AfterClass
  public static void tearDownClass() throws Exception
  {
  }

  /**
   * Test of compareTo method, of class ObisCode.
   */
  @Test
  public void testCompareTo()
  {
    System.out.println("compareTo");
    ObisCode o1 = new ObisCode(1, 2, 3, 4, 5, 6);
    ObisCode o2 = new ObisCode(1, 2, 3, 4, 5, 7);
    ObisCode o3 = new ObisCode(1, 4, 3, 4, 5, 7);
    ObisCode instance = new ObisCode(1, 2, 3, 4, 5, 7);
    assertTrue(instance.compareTo(o1) > 0);
    assertTrue(instance.compareTo(o2) == 0);
    assertTrue(instance.compareTo(instance) == 0);
    assertTrue(instance.compareTo(o3) < 0);
  }

  /**
   * Test of getValueGroup method, of class ObisCode.
   */
  @Test
  public void testGetValueGroup_int()
  {
    System.out.println("getValueGroup");
    int no = 2;
    ObisCode instance = new ObisCode(1, 2, 3, 4, 5, 6);
    int expResult = 3;
    int result = instance.getValueGroup(no);
    assertEquals(expResult, result);
  }

  /**
   * Test of getValueGroup method, of class ObisCode.
   */
  @Test
  public void testGetValueGroup_ObisCodeGroups()
  {
    System.out.println("getValueGroup");
    Groups valueGroup = Groups.D;
    ObisCode instance = new ObisCode(1, 2, 3, 4, 5, 6);
    int expResult = 4;
    int result = instance.getValueGroup(valueGroup);
    assertEquals(expResult, result);
  }

  /**
   * Test constructors (and more).
   */
  @Test
  public void testConstructors()
  {

    final long seed = System.nanoTime();
    System.out.println("Test constructors (and more). Seed for random:" + seed);

    final Random r = new Random(seed);

    final Set<Integer> hashs = new HashSet<Integer>();

    for (int round = 0; round < 1000; round++)
    {
      final byte[] bytes = new byte[6];
      r.nextBytes(bytes);

      final String asString = Integer.toString(0xff & bytes[0]) + "."
              + Integer.toString(0xff & bytes[1]) + "."
              + Integer.toString(0xff & bytes[2]) + "."
              + Integer.toString(0xff & bytes[3]) + "."
              + Integer.toString(0xff & bytes[4]) + "."
              + Integer.toString(0xff & bytes[5]);

      //instances
      ObisCode instance = new ObisCode(bytes.clone());
      ObisCode instance2 = new ObisCode(0xFF & bytes[0], 0xFF & bytes[1], 0xFF & bytes[2], 0xFF & bytes[3], 0xFF & bytes[4], 0xFF & bytes[5]);
      ObisCode instance3 = new ObisCode(asString);

      //equals
      assertEquals(instance, instance2);
      assertEquals(instance, instance3);
      assertEquals(instance2, instance3);

      //hashs
      hashs.add(instance.hashCode());

      
      //toString
      assertEquals(asString, instance.toString());

      //toByteArray
      assertArrayEquals(bytes, instance.toByteArray());
      
      //single value groups
      assertEquals(0xFF & bytes[0], instance.getA());
      assertEquals(0xFF & bytes[1], instance.getB());
      assertEquals(0xFF & bytes[2], instance.getC());
      assertEquals(0xFF & bytes[3], instance.getD());
      assertEquals(0xFF & bytes[4], instance.getE());
      assertEquals(0xFF & bytes[5], instance.getF());
      
      for (int i = 0; i < 6; i++)
      {
        assertEquals(0xFF & bytes[i], instance.getValueGroup(i));
        assertEquals(0xFF & bytes[i], instance.getValueGroup(ObisCode.Groups.values()[i]));
      }


      //derivation
      int groupToChange = r.nextInt(6);
      int newGroupValue = r.nextInt(256);

      ObisCode derived = instance.derive(groupToChange, newGroupValue);
      byte[] derivedBytes=bytes.clone();
      derivedBytes[groupToChange] = (byte) newGroupValue;

      assertArrayEquals(derivedBytes, derived.toByteArray());
    }

    System.out.println("Different hash values:" + hashs.size());

    assertTrue("Not enough different hash values (can fail because the OBIS codes are generated by a random generator)", hashs.size() > 800);
  }

  /**
   * Test of toByteArray method, of class ObisCode.
   */
  @Test
  public void testToByteArray()
  {
    System.out.println("toByteArray");
    ObisCode instance = new ObisCode(1, 2, 3, 4, 0xFF, 6);
    byte[] expResult = CodingUtils.string2ByteArray("01020304FF06");
    byte[] result = instance.toByteArray();
    assertArrayEquals(expResult, result);
  }

  /**
   * Test of getA method, of class ObisCode.
   */
  @Test
  public void testGetA()
  {
    System.out.println("getA");
    ObisCode instance = new ObisCode(255, 2, 3, 4, 5, 6);
    int expResult = 255;
    int result = instance.getA();
    assertEquals(expResult, result);
  }

  /**
   * Test of getB method, of class ObisCode.
   */
  @Test
  public void testGetB()
  {
    System.out.println("getB");
    ObisCode instance = new ObisCode(1, 2, 3, 4, 5, 6);
    int expResult = 2;
    int result = instance.getB();
    assertEquals(expResult, result);

  }

  /**
   * Test of getC method, of class ObisCode.
   */
  @Test
  public void testGetC()
  {
    System.out.println("getC");
    ObisCode instance = new ObisCode(1, 2, 3, 4, 5, 6);
    int expResult = 3;
    int result = instance.getC();
    assertEquals(expResult, result);
  }

  /**
   * Test of getD method, of class ObisCode.
   */
  @Test
  public void testGetD()
  {
    System.out.println("getD");
    ObisCode instance = new ObisCode(1, 2, 3, 4, 5, 6);
    int expResult = 4;
    int result = instance.getD();
    assertEquals(expResult, result);

  }

  /**
   * Test of getE method, of class ObisCode.
   */
  @Test
  public void testGetE()
  {
    System.out.println("getE");
    ObisCode instance = new ObisCode(1, 2, 3, 4, 5, 6);
    int expResult = 5;
    int result = instance.getE();
    assertEquals(expResult, result);

  }

  /**
   * Test of getF method, of class ObisCode.
   */
  @Test
  public void testGetF()
  {
    System.out.println("getF");
    ObisCode instance = new ObisCode(1, 2, 3, 4, 5, 6);
    int expResult = 6;
    int result = instance.getF();
    assertEquals(expResult, result);
  }

  /**
   * Test of clone method, of class ObisCode.
  //   */
//  @Test
//  public void testClone() throws Exception
//  {
//    System.out.println("clone");
//    ObisCode instance = new ObisCode(1, 2, 3, 4, 5, 6);
//    Object expResult = new ObisCode(1, 2, 3, 4, 5, 6);
//    Object result = instance.clone();
//    assertEquals(expResult, result);
//  }
  /**
   * Test of equals method, of class ObisCode.
   */
  @Test
  public void testEquals()
  {
    System.out.println("equals");
    Object objEq = new ObisCode(1, 2, 3, 4, 5, 6);
    Object objNotEq = new ObisCode(1, 2, 67, 4, 5, 6);
    ObisCode instance = new ObisCode(1, 2, 3, 4, 5, 6);
    assertEquals(true, instance.equals(objEq));
    assertEquals(false, instance.equals(objNotEq));
  }

  /**
   * Test of toString method, of class ObisCode.
   */
  @Test
  public void testToString()
  {
    System.out.println("toString");
    ObisCode instance = new ObisCode(201, 2, 203, 4, 205, 6);
    String expResult = "201.2.203.4.205.6";
    String result = instance.toString();
    assertEquals(expResult, result);
  }

  /**
   * Test of derive method, of class ObisCode.
   */
  @Test
  public void testDerive_int_int()
  {
    System.out.println("derive");
    int group = 3;
    int newGroupValue = 40;
    ObisCode instance = new ObisCode(1, 2, 3, 4, 5, 6);
    ObisCode expResult = new ObisCode(1, 2, 3, 40, 5, 6);
    ObisCode result = instance.derive(group, newGroupValue);
    assertEquals(expResult, result);
  }

  /**
   * Test of derive method, of class ObisCode.
   */
  @Test
  public void testDerive_int_int2()
  {
    System.out.println("derive");
    int group = 0;
    int newGroupValue = 180;
    ObisCode instance = new ObisCode(255, 2, 3, 4, 5, 6);
    ObisCode expResult = new ObisCode(180, 2, 3, 4, 5, 6);
    ObisCode result = instance.derive(group, newGroupValue);
    assertEquals(expResult, result);
  }

  /**
   * Test of derive method, of class ObisCode.
   */
  @Test
  public void testDerive_ObisCodeGroups_int()
  {
    System.out.println("derive");
    Groups group = Groups.F;
    int newGroupValue = 255;
    ObisCode instance = new ObisCode(1, 2, 3, 4, 5, 6);
    ObisCode expResult = new ObisCode(1, 2, 3, 4, 5, 255);
    ObisCode result = instance.derive(group, newGroupValue);
    assertEquals(expResult, result);
  }
}
