/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.elster.dlms.cosem.classes.class03;

/**
 * COSEM Units. <P>
 * See BB ed.10 chap.4.3.2<P>
 * The list was generated by "COSEM_Class_3_Units.xls"
 *
 * 
 * @author osse
 */
public enum Unit
{
  YEAR(1, "a"),
  MONTH(2, "mo"),
  WEEK(3, "wk"),
  DAY(4, "d"),
  HOUR(5, "h"),
  MIN(6, "min."),
  SECOND(7, "s"),
  DEGREE(8, "°"),
  DEGREE_CELSIUS(9, "°C"),
  CURRENCY(10, "currency"),
  METRE(11, "m"),
  METRE_PER_SECOND(12, "m/s"),
  CUBIC_METRE_VOLUME(13, "m³"),
  CUBIC_METRE_CORRECTED_VOLUME(14, "m³"),
  CUBIC_METRE_PER_HOUR_VOLUME(15, "m³/h"),
  CUBIC_METRE_PER_HOUR_CORRECTED_VOLUME(16, "m³/h"),
  UBIC_METRE_PER_DAY_VOLUME(17, "m³/d"),
  CUBIC_METRE_PER_DAY_CORRECTED_VOLUME(18, "m³/d"),
  LITRE(19, "l"),
  KILOGRAM(20, "kg"),
  NEWTON(21, "N"),
  NEWTONMETER(22, "Nm"),
  PASCAL(23, "Pa"),
  BAR(24, "bar"),
  JOULE(25, "J"),
  JOULE_PER_HOUR(26, "J/h"),
  WATT(27, "W"),
  VOLT_AMPERE(28, "VA"),
  VAR(29, "var"),
  WATT_HOUR(30, "Wh"),
  VOLT_AMPERE_HOUR(31, "VAh"),
  VAR_HOUR(32, "varh"),
  AMPERE(33, "A"),
  COULOMB(34, "C"),
  VOLT(35, "V"),
  VOLT_PER_METRE(36, "V/m"),
  FARAD(37, "F"),
  OHM(38, "Ohm"),
  OM(39, "Ohm m²/m"),
  WEBER(40, "Wb"),
  TESLA(41, "T"),
  AMPERE_PER_METRE(42, "A/m"),
  HENRY(43, "H"),
  HERTZ(44, "Hz"),
  RW(45, "1/"),
  RB(46, "1/(varh)"),
  RS(47, "1/(VAh)"),
  VOLT_SQUARED_HOURS(48, "V²h"),
  AMPERE_SQUARED_HOURS(49, "A²h"),
  KILOGRAM_PER_SECOND(50, "kg/s"),
  SIEMENS(51, "S, mho"),
  KELVIN(52, "K"),
  RU2H(53, "1/(V²h)"),
  RI2H(54, "1/(A²h)"),
  RV(55, "1/m³"),
  PERCENTAGE(56, "%"),
  AMPERE_HOUR(57, "Ah"),
  WATT_HOUR_PER_CUBIC_METRE(60, "Wh/m³"),
  CALORIFIC_VALUE(61, "J/m³"),
  MOLE_PERCENT(62, "Mol %"),
  GRAMM_PER_CUBIC_METRE(63, "g/m³"),
  PASCAL_SECOND(64, "Pa s"),
  JOULE_PER_KILOGRAM(65, "J/kg"),
  DBM_SIGNAL_STRENGTH(70, "dBm"),
  RESERVED(253, "reserved"),
  OTHER_UNIT(254, "other"),
  COUNT(255, "");

  private int id;
  private String displayName;

  private Unit(final int id,final String displayName)
  {
    this.id = id;
    this.displayName = displayName;
  }

  public int getId()
  {
    return id;
  }

  public String getDisplayName()
  {
    return displayName;
  }

  static public Unit findById(int id)
  {
    Unit[] all = values();

    //simple binary search:
    int l = 0;
    int h = all.length - 1;

    while (l <= h)
    {
      int m = (l + h) >>> 1;
      int val = all[m].getId();
      if (val < id)
      {
        l = m + 1;
      }
      else if (val > id)
      {
        h = m - 1;
      }
      else
      {
        return all[m];
      }
    }
    return null;
  }

}
