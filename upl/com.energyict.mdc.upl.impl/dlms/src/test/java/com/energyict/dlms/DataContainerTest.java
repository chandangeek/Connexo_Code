package com.energyict.dlms;

import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertEquals;

/**
 * Copyrights EnergyICT
 * User: sva
 * Date: 18/11/11
 * Time: 11:41
 */
public class DataContainerTest {

    @Test
    public void parseTest() throws IOException {
        byte[] response = new byte[]{1, -127, -37, 2, 5, 17, 18, 17, 3, 6, 18, -45, 52, 76, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -45, 52, 105, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 18, -45, 52, 105, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 18, -38, -26, 47, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -38, -20, -75, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 18, -38, -20, -75, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 18, -37, 20, 0, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -37, 22, 121, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 18, -37, 22, 121, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 18, -37, 22, -124, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -37, 30, 48, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -37, 41, -75, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 18, -37, 41, -75, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 18, -37, 42, -104, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -37, 44, 64, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -37, 58, 80, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -37, 72, 96, 17, 60, 23, 58, 24, -111, 92, 2, 5, 17, 0, 17, 0, 6, 18, -37, 86, 112, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -37, 100, -128, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -37, 114, -112, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -37, -128, -96, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -37, -114, -80, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -37, -100, -64, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -37, -86, -48, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -37, -72, -32, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -37, -58, -16, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -37, -43, 0, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -37, -29, 16, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -37, -15, 32, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -37, -1, 48, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -36, 13, 64, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -36, 27, 80, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -36, 41, 96, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -36, 44, -125, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 18, -36, 44, -125, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 18, -36, 46, -64, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -36, 46, -35, 17, 60, 23, 60, -105, -77, 16, 2, 5, 17, 7, 17, 4, 6, 18, -36, 46, -35, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 18, -36, 46, -19, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -36, 47, 106, 17, 60, 23, 54, -55, 83, -100, 2, 5, 17, 7, 17, 4, 6, 18, -36, 47, 106, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 18, -36, 47, 122, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -36, 49, -56, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 18, -36, 49, -56, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 18, -36, 49, -35, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -36, 50, -20, 17, 60, 23, 57, -90, -71, 61, 2, 5, 17, 7, 17, 4, 6, 18, -36, 50, -20, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 18, -36, 51, 75, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -36, 51, 126, 17, 60, 23, 58, -48, 2, -30, 2, 5, 17, 7, 17, 4, 6, 18, -36, 51, 126, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 18, -36, 51, -114, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -36, 51, -19, 17, 60, 23, 62, 24, -60, -67, 2, 5, 17, 7, 17, 4, 6, 18, -36, 51, -19, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 18, -36, 51, -3, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -36, 52, -128, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 18, -36, 52, -128, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 18, -36, 52, -111, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -36, 53, 32, 17, 60, 23, 61, 29, 9, 91, 2, 5, 17, 7, 17, 4, 6, 18, -36, 53, 32, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 18, -36, 53, 48, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -36, 53, 117, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 18, -36, 53, 117, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 18, -36, 53, -24, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -36, 55, 112, 17, 60, 23, 58, -118, -117, 9, 2, 5, 17, 0, 17, 0, 6, 18, -36, 56, 55, 17, 60, 23, 58, 8, 80, -100, 2, 5, 17, 7, 17, 4, 6, 18, -36, 56, 55, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 18, -36, 57, 32, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -36, 60, 118, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 18, -36, 60, 118, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 18, -36, 60, -53, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -36, 69, -128, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -36, 83, -112, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -36, 97, -96, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -36, 101, 10, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 18, -36, 101, 10, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 18, -36, 101, 18, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -36, 102, 113, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 18, -36, 102, 113, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 18, -36, 102, 119, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 18, -36, 103, -109, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 5, 17, 4, 6, 18, -36, 103, -109, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 5, 17, 5, 6, 21, -41, -1, 68, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 21, -40, 4, 50, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 21, -40, 4, 50, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 21, -40, 5, 95, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 21, -40, 6, -127, 17, 60, 23, 62, -112, -112, 79, 2, 5, 17, 7, 17, 4, 6, 21, -40, 6, -127, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 21, -40, 6, -102, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 21, -40, 8, -23, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 21, -40, 8, -23, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 21, -40, 9, 8, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 21, -40, 9, 26, 17, 60, 23, 60, -61, -76, -10, 2, 5, 17, 7, 17, 4, 6, 21, -40, 9, 26, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 21, -40, 9, 44, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 21, -40, 10, -128, 17, 60, 23, 63, -126, 99, 107, 2, 5, 17, 0, 17, 0, 6, 21, -40, 16, 44, 17, 60, 23, 57, 3, 18, 111, 2, 5, 17, 7, 17, 4, 6, 21, -40, 16, 44, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 21, -17, -125, 112, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 21, -17, -124, -42, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 21, -17, -124, -42, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 22, 19, 69, -112, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 19, 71, -43, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 22, 19, 71, -43, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 22, 19, 92, -16, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 19, 94, 0, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 19, 97, 125, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 22, 19, 97, 125, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 22, 19, 97, -34, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 19, 108, 16, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 19, 121, 115, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 22, 19, 121, 115, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 22, 20, -85, -99, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 20, -84, -72, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 22, 20, -84, -72, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 22, 20, -84, -8, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 20, -81, -128, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 20, -67, -112, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 20, -53, -96, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 20, -43, -50, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 22, 20, -43, -50, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 22, 21, -96, -76, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 21, -96, -15, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 22, 21, -96, -15, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 22, 21, -96, -6, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 21, -84, -96, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 21, -70, -80, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 21, -56, -64, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 21, -42, -48, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 21, -28, -32, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 21, -14, -16, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 22, 1, 0, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 22, 15, 16, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 22, 29, 32, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 22, 29, 48, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 22, 22, 29, 48, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 22, 57, 42, 81, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 57, 48, -90, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 22, 57, 48, -90, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 22, 57, -123, -30, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 57, -121, -60, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 22, 57, -121, -60, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 22, 60, 5, 18, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 60, 5, -17, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 22, 60, 5, -17, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 22, 60, 11, 15, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 60, 18, 80, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 60, 18, -80, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 22, 60, 18, -80, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 22, 65, -124, -115, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 65, 124, 79, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 22, 65, 124, 79, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 22, 65, 124, 87, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 65, 125, -111, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 22, 65, 125, -111, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 22, 78, -79, -113, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 78, -73, 41, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 22, 78, -73, 41, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 22, 83, 123, -62, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 83, -121, 0, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 83, -107, 16, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 83, -93, 32, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 83, -79, 48, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 83, -65, 64, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 83, -51, 80, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 83, -45, -38, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 22, 83, -45, -38, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 22, 83, -45, -29, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 83, -44, -6, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 22, 83, -44, -6, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 22, 83, -43, 3, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 83, -41, 78, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 22, 83, -41, 78, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 22, 83, -41, 87, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 83, -37, 96, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 83, -23, 112, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 83, -16, 122, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 22, 83, -16, 122, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 22, 83, -16, -126, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 83, -9, -128, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 84, 5, -112, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 84, 19, -96, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 84, 33, -80, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 84, 47, -64, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 84, 61, -48, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 84, 75, -32, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 84, 89, -16, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 84, 104, 0, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 84, 118, 16, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 84, -124, 32, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 84, -110, 48, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 84, -96, 64, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 84, -82, 80, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 84, -68, 96, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 84, -54, 112, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 84, -40, -128, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 84, -26, -112, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 84, -12, -96, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 84, -4, 9, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 22, 84, -4, 9, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 22, 84, -4, 20, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 85, 2, -80, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 85, 16, -64, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 85, 30, -48, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 85, 40, 17, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 22, 85, 40, 17, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 22, 85, 40, 54, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 85, 44, -32, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 85, 58, -16, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 85, 59, 18, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 5, 17, 4, 6, 22, 85, 59, 18, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 5, 17, 5, 6, 22, 85, 58, -1, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 85, 73, 0, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 85, 76, -124, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 7, 17, 4, 6, 22, 85, 76, -124, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 8, 17, 4, 6, 22, 88, -67, -71, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 88, -66, -16, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 88, -51, 0, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 88, -37, 16, 17, 60, 23, 0, 0, 0, 0, 2, 5, 17, 0, 17, 0, 6, 22, 88, -23, 32, 17, 60, 23, 0, 0, 0, 0};
        DataContainer dc = new DataContainer();
        dc.doParseObjectList(response, null);
        assertEquals(219, dc.getRoot().getNrOfElements());
    }


    /**** Test the paring of float32 format ****/
        @Test
    public void testGetFloat32_A() throws Exception {
        DataContainer dc = new DataContainer();
        byte[] buffer = new byte[]{63, -128, 0, 0};
        float expected = (float) 1;
        float actual = dc.getFloat32(buffer, 0);
        assertEquals(expected,actual, 0);
    }

    @Test
    public void testGetFloat32_B() throws Exception {
        DataContainer dc = new DataContainer();
        byte[] buffer = new byte[]{71, 114, 104, 0};
        float expected = (float) 62056;
        float actual = dc.getFloat32(buffer, 0);
        assertEquals(expected,actual, 0);
    }

    @Test
    public void testGetFloat32_C() throws Exception {
        DataContainer dc = new DataContainer();
        byte[] buffer = new byte[]{64, 0, 0, 1};
        float expected = (float) 2.000000238418579;
        float actual = dc.getFloat32(buffer, 0);
        assertEquals(expected, actual, 0);
    }


    /**** Test the paring of float64 format ****/
    @Test
    public void testGetFloat64_A() throws Exception {
        DataContainer dc = new DataContainer();
        byte[] buffer = new byte[]{63,-16, 0, 0, 0, 0, 0, 0};
        float expected = 1;
        float actual = dc.getFloat64(buffer, 0);
        assertEquals(expected,actual, 0);
    }

    @Test
    public void testGetFloat64_B() throws Exception {
        DataContainer dc = new DataContainer();
        byte[] buffer = new byte[]{64,-18, 77, 0, 0, 0, 0, 0};
        float expected = 62056;
        float actual = dc.getFloat64(buffer, 0);
        assertEquals(expected,actual, 0);
    }
}
