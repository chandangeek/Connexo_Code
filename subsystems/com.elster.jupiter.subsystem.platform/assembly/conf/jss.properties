#
# JSS_TEST_CONFIG_PLACE_HOLDER
#
############################################################
#                    S S L  (JSS <==> HSM)                 #
############################################################
#
# If set to true, any connection to an HSM will be
# secured using SSL (TLS). Be sure to configure all
# of the following properties in this section correct. 
#
# Default: false
#
#jss.ssl.enable=

# The following parameters configure the JSS SSL stack, that
# sends calls to HSMs using encrypted and authenticated SSL
# sockets.
# Note that you only need to potentially change those parameters
# if you use an HSM that has SSL support.
#
# If the following key material resources cannot be found and
# you do *not* use an HSM with SSL support, it won't have any
# consequence on operations.
#
# All resource locations below may be specified with one of
# the following prefixes:
# * classpath:...
# * file:...

# The location of the client trust store.
#
# Default: -
# Example: file:///etc/ssl/truststore.jks
#
#jss.ssl.truststore=

# The password of the trust store
#
# Default: -
# Example: mysecretpassword
#
#jss.ssl.truststore.password=

# The location of the key store
#
# Default: -
# Example: file:///etc/ssl/keystore.jks
#
#jss.ssl.keystore=

# The password of the key store
# Default: -
# Example: mysecretpassword
#
#jss.ssl.keystore.password=

# If client authentication is required, this entry must be set to true
# Default: true
# Example: false
# jss.ssl.client.auth=false

############################################################
#                      A L E R T I N G                     #
############################################################

# The minimum number of active and operational HSMs.
# If the number of active HSMs drops below that number, 
# HSMS-BELOW-TRESHOLD alert will be logged.
#
# Default: 1
# Example: jss.alert.hsm.treshold=2
#
#jss.alert.hsm.treshold=

# Usually FunctionFailedErrors (the communication with the HSM
# was successful, but the HSM reported a - most likely - crypto-
# graphic problem) are NOT reported via the alerting channel
# but only logged. By setting this flag to true, all FunctionFailed-
# Errors are send to the external eventLogger (see below) as well.
#
# Default: false
# Example: jss.alert.doReportFunctionFailed=true
#
#jss.alert.doReportFunctionFailed=

# Sets the external EventLogger. This allows an external
# application that embeds the JSS to react on provided
# events in an application specific way. Any class that is
# configured here MUST implement the interface
# com.atos.worldline.jss.internal.runtime.alertlogging.EventLogger    
#
# Default: com.atos.worldline.jss.internal.runtime.alertlogging.DummyExternalEventLogger
# Example: jss.extern.eventlogger=myPackage.MyJssEventLogger
#
#jss.extern.eventlogger=

############################################################
#               N E T W O R K   T U N I N G                #
############################################################

# The timeout (in milliseconds) when trying to connect to a HSM.
#
# Default: 3000
# Example: jss.network.connection.timeout=1500
#
#jss.network.connection.timeout=

# When closing a socket connection, this parameter handles how
# the underlying operation systems network stack is notified
# about the close. When SO_LINGER is disabled (false), the
# "normal" termination sequence (FIN/ACK) is used. This however
# may lead to a huge number of sockets in TIME_WAIT state. When
# SO_LINGER is enabled (true), on closing the socket an RST
# is send and along with the default linger timeout of 0 all
# of the unsent data gets dropped. This OTOH does not seem
# to work properly on Solaris, which keeps lots of sockets
# in IDLE state.
#
# So the recommendation is to disable SO_LINGER on Solaris
# systems and enable on all other systems.
#
# Default: true
# Example: jss.network.so_linger.enable=false
#
#jss.network.so_linger.enable=

# When closing a socket connection and SO_LINGER is enabled,
# wait for this millisecond amount of time before sending the
# RST signal (0: don't wait at all).
# When SO_LINGER is disabled, this parameter has no effect.
#
# Default: 0
# Example: jss.network.so_linger.enable=1000
#
#jss.network.so_linger.timeout=

# The timeout for read operations on HSM replies, in milliseconds.
#
# Default: no timeout
# Example: jss.network.read.timeout=3000
#
#jss.network.read.timeout=

# The size of the network buffer for read operations.
#
# Default: default buffer size of the operating system
# Example: jss.network.buffer.receive=8192
#
#jss.network.buffer.receive=

# The size of the network buffer for write operations.
#
# Default: default buffer size of the operating system
# Example: jss.network.buffer.send=8192
#
#jss.network.buffer.send=

# In cases where no DNS server is available, a hostname reverse lookup might block for a while
# and lead to timeouts.
# This parameter can be used to disable the lookup.
# Default: false
# Example: true
# jss.network.disable.reverselookup=

############################################################
#    P O O L I N G  && K E E P A L I V E                   #
############################################################

# The number of parallel connections to the HSM.
#
# Default: 4
# Example: jss.network.channelpool.size=3
#
#jss.network.channelpool.size=

# Whenever there are more requests incoming than can be
# processed, these pending requests will get stored on
# a waiting queue and served on a FIFO base. If however
# there are noteable differences in processing speed between
# the configured HSMs, the queue may pile up. When the limit
# pendingQueueSize is reached further request will be declined
# until the queue as been worked down.
# 
# Please note that an significant increase in this option
# may lead to memory issues.
#
# Default: 50000
# Example: jss.network.channelpool.pendingQueueSize=100000
#
#jss.network.channelpool.pendingQueueSize=

# Defines the interval (in seconds) in which an monitor
# call to each of the configured connections should have
# been triggered once e.g. to ensure that an inactivity
# drop by a firewall does not fire.
#
# The KeepAlive-Timer will send one message each
# (cycleSeconds/jss.network.channelpool.size) seconds,
# this will ensure that each connection will be used
# either by the KeepAliveTimer or by a regular API call
# inside any (cycleSeconds) interval.
#
# Any number <= 0 will disable this feature, which
# not recommended. 
#  
# Default: 600 
# Example: jss.network.keepAliveTimer.cycleSeconds=3600
#
#jss.network.channelpool.keepAliveTimer.cycleSeconds=


